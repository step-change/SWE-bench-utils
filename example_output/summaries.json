[
    {
        "instance_id": "django__django-10680",
        "summary": "The issue proposes refactoring AutoField logic into a mixin to inherit system checks and validation checks from IntegerField and BigIntegerField. This could potentially make it easier to define new types of auto fields based on other fields in the future.",
        "category": "Feature Request",
        "tags": [
            "Refactoring",
            "AutoField",
            "IntegerField",
            "BigIntegerField",
            "Validation",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10730",
        "summary": "The issue reports an infinite loop in ExceptionReporter.get_traceback_frames() due to a cause/context cycle.",
        "category": "Bug",
        "tags": [
            "Infinite Loop",
            "ExceptionReporter",
            "Traceback"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10737",
        "summary": "The issue suggests that FieldError's should include the field that caused the error for better debugging.",
        "category": "Feature Request",
        "tags": [
            "FieldError",
            "Error Handling",
            "Debugging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10853",
        "summary": "The issue reports that Django doesn't check the SQLite version or availability of window functions, leading to an OperationalError when the generated SQL is executed.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "Window Functions",
            "OperationalError",
            "SQL Execution"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10880",
        "summary": "The issue reports a query syntax error with a Count annotation containing both a Case condition and a distinct=True param in Django 2.2.",
        "category": "Bug",
        "tags": [
            "Query Syntax",
            "Count Annotation",
            "Case Condition",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10904",
        "summary": "The issue proposes replacing the use of OSError aliases with OSError in the Django code base for simplification and consistency, as they are aliases of OSError since Python 3.3.",
        "category": "Feature Request",
        "tags": [
            "OSError",
            "Aliases",
            "Code Cleanup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10390",
        "summary": "The issue is about the Trunc() function in Django not handling exceptions raised by pytz when it truncates to a nonexisting or ambiguous datetime. The user suggests that the function should not check the validity of truncated dates.",
        "category": "Bug",
        "tags": [
            "Database",
            "Datetime",
            "Truncation",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10426",
        "summary": "The issue is about the lack of app label validation in the showmigrations command in Django. The user suggests that the validation should be added to this command.",
        "category": "Feature Request",
        "tags": [
            "App Label",
            "Validation",
            "Showmigrations Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10531",
        "summary": "The issue is about the history for a model object in the Django admin section not showing human-readable messages. The user suggests that verbose names should be favored over field names.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model History",
            "Verbose Names"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10554",
        "summary": "The issue is about the union queryset with ordering breaking on ordering with derived querysets in Django. The user provides a simple reproduction of the issue.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Ordering",
            "Derived Querysets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10606",
        "summary": "The issue is about the use of RelatedOnlyFieldListFilter with a reverse ManyToMany relation causing an exception in Django. The user provides a link to a pull request and a demo of how to trigger the bug.",
        "category": "Bug",
        "tags": [
            "RelatedOnlyFieldListFilter",
            "ManyToMany Relation",
            "Exception"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10643",
        "summary": "The issue is about the icontains lookup not accepting UUIDs with or without dashes in Django. The user suggests that Django should handle this internally and make the search possible by the value as displayed in the admin.",
        "category": "Feature Request",
        "tags": [
            "UUID",
            "Icontains Lookup",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10087",
        "summary": "The issue reports a misleading error message in sqlmigrate due to lack of validation for migration existence.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10097",
        "summary": "The issue reports that URLValidator accepts invalid characters in the username and password fields of a URL, which is against RFC 1738 section 3.1. The issue suggests that the validation regex should be fixed to reject invalid URLs correctly.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Regex"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10213",
        "summary": "The issue requests a new feature to add a --force-colors flag to Django management commands to output ANSI color sequences in cases where colors would be disabled by default.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Output Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10287",
        "summary": "The issue reports that when the ordering class member in Meta of a model contains a field from a related model that does not exist, django's makemigrations does not throw an error. The issue suggests that validation should be added for related fields and lookups in model Meta.ordering.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10301",
        "summary": "The issue reports that SQLite functions crash on NULL values. The issue suggests that this is a bug that needs to be fixed.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "NULL Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10316",
        "summary": "The issue reports that diffsettings raises a misleading exception message if using settings.configure(). The issue suggests that a check should be added to see if settings are configured before calling settings._setup().",
        "category": "Bug",
        "tags": [
            "Settings",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10910",
        "summary": "The issue reports a bug with Django ORM creating incorrect queries when using timezone determined like 'timezone(timedelta(hours=some_hours))'. This results in incorrect timezone handling in PostgreSQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "ORM",
            "Timezone",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10914",
        "summary": "The issue reports a problem with file upload permissions in Django. The permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data.",
        "category": "Bug",
        "tags": [
            "File Upload",
            "Permissions",
            "FileSystemStorage"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10924",
        "summary": "The issue is a feature request to allow FilePathField path to accept a callable. This is to handle cases where the file path is different on different machines.",
        "category": "Feature Request",
        "tags": [
            "FilePathField",
            "Models",
            "File Path"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10939",
        "summary": "The issue reports a bug where ModelAdmin with custom widgets, inlines, and filter_horizontal can merge media in broken order, causing MediaOrderConflictWarning and inlines.js to load before jQuery.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Widgets",
            "Inlines",
            "Media"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10957",
        "summary": "The issue is a proposal to deprecate legacy functions in django.utils.translation -- ugettext(), ugettext_lazy(), ugettext_noop(), ungettext(), and ungettext_lazy() -- which are simple aliases that remain for Python 2 Unicode backwards compatibility.",
        "category": "Feature Request",
        "tags": [
            "Deprecation",
            "Translation",
            "Python 2 Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10973",
        "summary": "The issue is a proposal to use subprocess.run and PGPASSWORD for client in postgres backend. This would simplify the code and make it more reliable.",
        "category": "Feature Request",
        "tags": [
            "Postgres Backend",
            "Subprocess",
            "PGPASSWORD"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11053",
        "summary": "The issue is about the settings.configure() and UserSettingsHolder.__getattr__() allowing non-upper settings to be set and retrieved, which contradicts the documentation.",
        "category": "Bug",
        "tags": [
            "Settings",
            "Configuration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11057",
        "summary": "The issue is about the admin check for AuthenticationMiddleware not allowing subclasses. The user is facing a problem while upgrading from Django 2.1 to 2.2b1 due to a custom middleware for authentication.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Authentication",
            "Admin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11062",
        "summary": "The issue is about a ProgrammingError when trying to aggregate an annotated field calculated with django.db.models.functions.Extract. The user is trying to calculate hourly usages using a DateTimeField.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11066",
        "summary": "The issue is about RenameContentType._rename() not saving the content type on the correct database. The user is running a dynamic database router and facing an OperationalError when running a migration.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Content Types"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11070",
        "summary": "The issue is a feature request to add autocomplete attribute to contrib.auth fields. The user has also provided a pull request for the same.",
        "category": "Feature Request",
        "tags": [
            "Forms",
            "Authentication"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11085",
        "summary": "The issue is about custom model metaclasses not being able to access the attribute dict in __init__. The user is trying to define a custom metaclass and access the attribute dict of the class being defined.",
        "category": "Bug",
        "tags": [
            "Models",
            "Metaclasses"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10989",
        "summary": "The issue is about a crash on Windows terminals due to the use of ellipses in output strings. The problem is related to the encoding of the ellipsis character in the Windows terminal's default code page. The issue did not occur in Django 2.1.7.",
        "category": "Bug",
        "tags": [
            "Windows",
            "Encoding",
            "Terminal",
            "Output Strings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10997",
        "summary": "The issue is a feature request to add the applied datetime value to the showmigrations command. This would help in identifying new migrations that need to be rolled back when switching between branches with different migrations.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Datetime",
            "Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10999",
        "summary": "The issue is about a bug in the parse_duration() function for some negative durations. The regular expression used in the function does not match negative durations due to the absence of '-?' in the lookahead part of the <hours> definition.",
        "category": "Bug",
        "tags": [
            "Duration",
            "Parsing",
            "Regular Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11001",
        "summary": "The issue is about the incorrect removal of an order_by clause created as multiline RawSQL. The SQLCompiler is removing one of the order_by clauses because it thinks the clause was already seen. The problem is due to the comparison of only the last line of SQL passed to the order_by clause.",
        "category": "Bug",
        "tags": [
            "SQLCompiler",
            "RawSQL",
            "Order_by"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11003",
        "summary": "The issue is about a 'Select a valid choice' error when initializing a disabled ModelChoiceField with a valid choice. The error message is not informative and the validation should work if the field contains a valid choice.",
        "category": "Bug",
        "tags": [
            "ModelChoiceField",
            "Validation",
            "Error Message"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11011",
        "summary": "The issue is a feature request to make FileResponse always set the Content-Disposition header. This would allow the browser to set a default name for the inline file in case a user attempts to download it.",
        "category": "Feature Request",
        "tags": [
            "FileResponse",
            "Content-Disposition",
            "Browser"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11019",
        "summary": "The issue is about Django throwing unnecessary MediaOrderConflictWarnings when merging 3 or more media objects. The problem arises from the order in which the media objects are added, causing a conflict in the order of JS files.",
        "category": "Bug",
        "tags": [
            "Media",
            "JS",
            "Forms"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11030",
        "summary": "The issue is about subquery expressions being unnecessarily added to the group by clause in Django. The user is trying to annotate a queryset with multiple subqueries, but when chained together, the query takes a long time to execute due to the final group by clause receiving the subquery as extra fields.",
        "category": "Bug",
        "tags": [
            "Database",
            "Subquery",
            "Group By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11034",
        "summary": "The issue is about the hard-coded ':' in the label_tag method of the AdminReadonlyField class in Django's admin. The user suggests that it should be configurable and translatable.",
        "category": "Feature Request",
        "tags": [
            "Admin",
            "Label",
            "Translation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11039",
        "summary": "The issue is about Django's sqlmigrate wrapping its output in BEGIN/COMMIT even if the database doesn't support transactional DDL. The user suggests considering connection.features.can_rollback_ddl when assigning self.output_transaction in sqlmigrate.",
        "category": "Bug",
        "tags": [
            "Database",
            "DDL",
            "sqlmigrate"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11044",
        "summary": "The issue is about Django's Form data/files initializing with a regular dict instead of a QueryDict when None is converted. The user suggests that methods of the form might rely on the API of a QueryDict such as 'iterlists' or 'getlist' which a regular dict doesn't provide.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Data",
            "QueryDict"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11049",
        "summary": "The issue is about the incorrect expected format in the invalid DurationField error message in Django. The user suggests that the format should be '[DD] [[HH:]MM:]ss[.uuuuuu]' instead of '[DD] [HH:[MM:]]ss[.uuuuuu]' as seconds are mandatory, minutes are optional, and hours are optional if minutes are provided.",
        "category": "Bug",
        "tags": [
            "Error Message",
            "DurationField",
            "Format"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11087",
        "summary": "The issue is about an unexpected UnicodeDecodeError during a .delete() run by a daily data purging management command when upgrading Django 1.11 installation from Python 2.7 to Python 3.6. The error occurs during the .delete() of Jobs. The issue suggests that Django ORM should handle the unicode conversion itself and Django should not fetch fields that are not needed for the .delete().",
        "category": "Bug",
        "tags": [
            "Database",
            "Python Upgrade",
            "UnicodeDecodeError",
            "Delete Method"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11088",
        "summary": "The issue is about a TypeError that occurs when trying to undo a migration after changing the default value of a BinaryField from '' to b''. The issue suggests that '' is allowed during migration, but not in reverse migration.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "BinaryField",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11095",
        "summary": "The issue is a feature request to add a ModelAdmin.get_inlines() hook to allow setting inlines based on the request or model instance. Currently, this can be achieved by overriding the method get_inline_instances, but it requires copying a for loop to the code.",
        "category": "Feature Request",
        "tags": [
            "ModelAdmin",
            "Inlines",
            "Hook"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11096",
        "summary": "The issue is about the inability to use admin_order_field on properties in the admin. While it is possible to specify properties from the model in list_display and set admin_order_field for non-fields, it does not work on properties.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Properties",
            "admin_order_field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11099",
        "summary": "The issue is about the UsernameValidator allowing trailing newline in usernames due to a quirk in Python regexes. The issue suggests changing the validator regex to reject usernames that end with a newline.",
        "category": "Bug",
        "tags": [
            "UsernameValidator",
            "Regex",
            "Newline"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11115",
        "summary": "The issue is about the difficulty in tracking down the offending models for AlreadyRegistered exceptions. The issue suggests that it would be helpful if the exception gave more details about the already-registered model.",
        "category": "Feature Request",
        "tags": [
            "Model",
            "AlreadyRegistered",
            "Exception"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11119",
        "summary": "The issue is about the Engine.render_to_string() function in Django not honoring the autoescape attribute. If an engine is created with autoescape=False and its render_to_string() method is called, the result will always be autoescaped.",
        "category": "Bug",
        "tags": [
            "Engine",
            "Autoescape",
            "Rendering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11129",
        "summary": "The issue is about an incorrect error message when using QuerySet.update() that requires a join on an annotated F expression. The error occurs when trying to update a field using an F expression on an annotated field which includes a join in it.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11133",
        "summary": "The issue is about HttpResponse not handling memoryview objects correctly. When trying to write a BinaryField retrieved from the database into a HttpResponse, Postgresql returns the contents of the field as a memoryview object which Django doesn't handle correctly.",
        "category": "Bug",
        "tags": [
            "HttpResponse",
            "Memoryview",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11138",
        "summary": "The issue is about the TIME_ZONE value in DATABASES settings not being used when making dates timezone-aware on MySQL, SQLite, and Oracle. The issue occurs when querying the database with date lookup.",
        "category": "Bug",
        "tags": [
            "Database",
            "Timezone",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11141",
        "summary": "The issue is about allowing migrations directories without __init__.py files. The migrate command currently checks for existence of a __file__ attribute on the migrations package which prevents migrate from working on namespace packages.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Namespace Packages"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11149",
        "summary": "The issue is about admin inlines for auto-created ManyToManyFields being editable if the user only has the view permission. This issue occurs in the Django admin interface.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "Permissions",
            "ManyToManyFields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11155",
        "summary": "The issue proposes adding settings to set Secure, HttpOnly, and SameSite on the language cookie. The default values maintain the current behavior. The reasons for adding them include requirements from auditors and browser nudges towards HttpOnly and Secure when possible.",
        "category": "Feature Request",
        "tags": [
            "Cookies",
            "Security",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11163",
        "summary": "The issue reports that the model_to_dict() function does not return an empty dictionary when called with an empty list of fields. Instead, it returns all fields. The problem lies in the condition checking if the field name is not in the fields.",
        "category": "Bug",
        "tags": [
            "Models",
            "Data Conversion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11165",
        "summary": "The issue reports that the new HTTPRequest.headers object is not usable in templates because variable lookups cannot use hyphens. The suggestion is to have a parallel set of keys in underscored variables.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Templates",
            "Headers"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11166",
        "summary": "The issue reports that the admin app has a hard dependency on the sessions app. The admin app checks whether the django.contrib.sessions app is in INSTALLED_APPS, which can cause problems for projects using a replacement session management app.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Sessions",
            "Dependencies"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11169",
        "summary": "The issue suggests adding a new system check message when a custom error handler 'path.to.view' cannot be imported. Currently, it raises ModuleNotFoundError or ViewDoesNotExist.",
        "category": "Feature Request",
        "tags": [
            "System Check",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11170",
        "summary": "The issue reports a UnicodeDecodeError when loading debug templates. The error occurs when the technical_500.html page is not properly printed. The issue was resolved by changing the encoding format to utf-8 when reading the technical_500.html file.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Debugging",
            "Unicode"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11177",
        "summary": "The autoreloader in Django 2.2 is not consistently detecting changes to .py files, which is a change in behavior from previous versions. The issue seems to occur when multiple changes are made to the same file.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "Runserver",
            "Python Files"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11179",
        "summary": "When deleting a model with no dependencies, the primary key (PK) on the model is not updated and set to None.",
        "category": "Bug",
        "tags": [
            "Model",
            "Delete",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11185",
        "summary": "The Model.delete(keep_parents=True) function does not preserve all parent reverse relationships, including relationships toward parents of parents.",
        "category": "Bug",
        "tags": [
            "Model",
            "Delete",
            "Relationships"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11194",
        "summary": "The RSS views.py uses settings.LANGUAGE_CODE as the language tag for the RSS feed, and there is currently no way to change it. A patch has been made to address this issue.",
        "category": "Feature Request",
        "tags": [
            "RSS",
            "Language Code",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11205",
        "summary": "Inefficient SQL is generated when counting a ManyToMany relation, including a useless join that slows down the process. An optimization is suggested for when there are no filters applied.",
        "category": "Bug",
        "tags": [
            "SQL",
            "ManyToMany",
            "Count"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11206",
        "summary": "The utils.numberformat.format function renders small decimals in exponential notation, which is caused by a hardcoded cut-off point in the internal logic. It is suggested that the returned string should be 0.0000...000 when a decimal_pos argument is supplied and the number to be formatted is smaller in absolute size than what can be encoded using the provided number of decimal positions.",
        "category": "Bug",
        "tags": [
            "Number Format",
            "Decimal",
            "Exponential Notation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11211",
        "summary": "The issue reports that prefetch related is not working when used GenericForeignKey (GFK) for a model that uses UUID field as primary key (PK). The Django ORM engine returns None for attribute 'foo'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ORM",
            "UUID",
            "GenericForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11214",
        "summary": "The issue reports that a CheckConstraint with a Q(x__in=range(y, z)) condition is repeatedly deleted and re-added when running makemigrations. The problem seems to be because the range is converted into a tuple.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Migrations",
            "CheckConstraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11216",
        "summary": "The issue reports that when using ManifestStaticFilesStorage, collectstatic generates duplicate versions of some files. The issue suggests adding a keep_intermediate_files property to HashedFilesMixin.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "ManifestStaticFilesStorage",
            "HashedFilesMixin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11234",
        "summary": "The issue reports that prefetch related is not working when used GenericForeignKey (GFK) for a model that uses ForeignKey (FK) as primary key (PK). The Django ORM engine returns None for attribute 'content_object'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ORM",
            "ForeignKey",
            "GenericForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11239",
        "summary": "The issue reports that the dbshell command does not support the client cert params. The issue suggests adding support for the other 'ssl' parameters required for mutual TLS for the DB connection.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "PostgreSQL",
            "dbshell",
            "TLS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11244",
        "summary": "The issue reports that a system check which verifies that LANGUAGES_BIDI is a subset of LANGUAGES breaks almost all installations of Django using a custom LANGUAGES list which do not also override LANGUAGES_BIDI. The issue suggests removing the translation.E005 check.",
        "category": "Bug",
        "tags": [
            "Translation",
            "System Check",
            "LANGUAGES_BIDI"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11260",
        "summary": "The inspectdb tool generates a unique ForeignKey instead of a OneToOneField, causing fields.W342 warnings.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "InspectDB"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11265",
        "summary": "Using exclude on a queryset with an annotated FilteredRelation results in a FieldError on the annotation name.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "FilteredRelation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11270",
        "summary": "The startapp command does not validate the target argument, which can lead to issues if the target directory has an invalid name.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "Startapp"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11276",
        "summary": "The function django.utils.html.escape() duplicates the Python stdlib function html.escape(). The suggestion is to replace the Django function with the Python stdlib function for better performance and wider community support.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Performance",
            "Utils"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11278",
        "summary": "The name field for constraints (check and unique) and partial indexes must be unique in the database scope. A system check for uniqueness of names should be added.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "System Check",
            "Constraints",
            "Indexes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11279",
        "summary": "Allow %(app_label)s and %(class)s to be specified in the name argument for BaseConstraint (CheckConstraint, UniqueConstraint) and Index. This would allow for specifying check constraints and partial indexes in abstract models.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Constraints",
            "Indexes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11281",
        "summary": "The issue is about improving the typography of user-facing strings in Django. The user suggests using different characters for quotes, contractions, and ellipsis.",
        "category": "Feature Request",
        "tags": [
            "Typography",
            "User Interface"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11283",
        "summary": "The user is encountering an error when trying to migrate their project to Django 2.2. The error is related to the migration auth.0011_update_proxy_permissions and is caused by duplicate key values.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "IntegrityError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11292",
        "summary": "The user proposes to expose the 'skip_checks' option on the command line for management commands. This would allow users to skip checks when running a command from the command line.",
        "category": "Feature Request",
        "tags": [
            "Management Commands",
            "Skip Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11294",
        "summary": "The issue is about the 'pluralize' filter returning the singular form instead of an empty string when it's passed an object that isn't a number, a string, or a list. The user suggests rewriting the filter to handle different types of input.",
        "category": "Bug",
        "tags": [
            "Filters",
            "Pluralize",
            "Input Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11298",
        "summary": "The user suggests allowing ManyToManyField using an intermediary table to be defined as symmetrical. This would simplify the process of adding friends in the given example.",
        "category": "Feature Request",
        "tags": [
            "ManyToManyField",
            "Models",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11299",
        "summary": "The issue is about the CheckConstraint with OR operator generating incorrect SQL on SQLite and Oracle. The problem is caused by Django incorrectly including the fully qualified field name in part of the check constraint.",
        "category": "Bug",
        "tags": [
            "CheckConstraint",
            "SQL",
            "SQLite",
            "Oracle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11374",
        "summary": "The function django.utils.http.urlencode gives unexpected results for tuple values when no iterations are expected. This is a problem when one has objects that has a __str__ method defined, returning the value one would want to be in the urlencode result, but the object by coincidence is also iterable.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11377",
        "summary": "The deprecation warning introduced in Django 2.2 about Meta.ordering being ignored from Django 3.1 onwards leads to errors when a query expression is used. The error occurs when trying to concatenate string representations of all the list items.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11383",
        "summary": "When saving a parent object after setting it on a child object and then saving the child object, no error is thrown but the FK relation is saved with a NULL value.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11389",
        "summary": "To make dynamic the SESSION_COOKIE_AGE setting based on certain parameters of the session, one needs to reimplement in their SessionStore subclasses the following methods: get_expiry_age and get_expiry_date.",
        "category": "Feature Request",
        "tags": [
            "Session Management"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11396",
        "summary": "Cannot order query by constant value on PostgreSQL. This results in a ProgrammingError: non-integer constant in ORDER BY.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11399",
        "summary": "The lazy() class preparation is not being cached correctly. This makes functions like gettext_lazy, format_lazy and reverse_lazy a lot slower than they ought to be.",
        "category": "Bug",
        "tags": [
            "Performance",
            "Lazy Loading"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11323",
        "summary": "The SelectDateWidget in a required field is rendering invalid HTML. According to the HTML5 standard, every select with a required attribute must have a placeholder option with an empty string as a value. This is not the case with SelectDateWidget.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Forms",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11333",
        "summary": "Multiple URLResolvers may be unintentionally constructed by calls to `django.urls.resolvers.get_resolver` if `django.urls.base.set_urlconf` has not yet been called. This results in multiple expensive calls to URLResolver._populate. The proposed solution is to modify `get_resolver` to look up settings.ROOT_URLCONF before the memoized function call.",
        "category": "Bug",
        "tags": [
            "URL Resolver",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11334",
        "summary": "Django's template library tags can't use already decorated things like lru_cache because of getfullargspec. The issue can be solved by unwrapping the function.",
        "category": "Bug",
        "tags": [
            "Template Library",
            "Decorators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11354",
        "summary": "QuerySet.count() does not work with raw SQL annotations on inherited model fields. If a RawSQL annotation of Item's queryset includes one of the fields defined in BaseItem and .count() is called on the annotated queryset, it fails with an error.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "SQL",
            "Model Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11356",
        "summary": "If you set on_delete=None as a ForeignKey field parameter, you might get a TypeError: 'NoneType' object is not callable. The suggestion is to validate the on_delete value to prevent such behaviour.",
        "category": "Bug",
        "tags": [
            "ForeignKey",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11359",
        "summary": "The issue is about automatically resolving Value's output_field for stdlib types. The user is trying to update a SearchVectorField with a string that is not in any other field and is getting a FieldError: Cannot resolve expression type, unknown output_field.",
        "category": "Bug",
        "tags": [
            "Database",
            "SearchVectorField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11400",
        "summary": "The issue is about the ordering problem in admin.RelatedFieldListFilter and admin.RelatedOnlyFieldListFilter. The ordering does not fall back to the ordering defined in Model._meta.ordering. The ordering gets set to an empty tuple and unless ordering is defined on the related model's ModelAdmin class it stays an empty tuple. The issue also mentions that RelatedOnlyFieldListFilter doesn't order the related model at all, even if ordering is defined on the related model's ModelAdmin class.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11405",
        "summary": "The issue is about the mutability of Queryset order and Meta.ordering with reverse(). The bug is revealed by running a specific test and it seems that the test added in a previous commit wasn't correct because order mutates on queryset execution in SQLCompiler.get_order_by().",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11417",
        "summary": "The issue is about updating the mail backend to use a modern standard library parsing approach. The current method uses email.utils.parseaddr from the standard lib. On Python 3, email.headerregistry.parser.get_mailbox() does the same, and is less error-prone.",
        "category": "Feature Request",
        "tags": [
            "Email",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11422",
        "summary": "The issue is about the Autoreloader with StatReloader not tracking changes in manage.py. Under previous versions, editing the manage.py file would trigger the auto-reloading mechanism. However, under the current version, it doesn't.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "File Tracking"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11423",
        "summary": "The issue is about the wrong caching with cyclic prefetching in GenericRelation and prefetch_related. The issue is that if a tag has a content_object, tag.content_object.tag should be equal to tag, but it's not the case.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Caching"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11428",
        "summary": "The issue is about the Autoreloader crashing on re-raising exceptions with custom signature. The problem is that django.utils.autoreload.raise_last_exception tries to construct a new exception of the same type, with 1 argument (the original exception), which results in a TypeError exception.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11433",
        "summary": "The issue is about the inability to overwrite a model's default value with 'cleaned_data' when the field is not included in the form data payload. This does not follow the paradigm of modifying data in 'cleaned_data' and requires the user to copy and overwrite the raw data submitted with the form.",
        "category": "Bug",
        "tags": [
            "Form Handling",
            "Data Validation",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11446",
        "summary": "The issue reports that the default 404 error page served in 'DEBUG=False' mode is not a correctly formed HTML page. The user expects a full webpage to be sent, but only a partial HTML is returned.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11451",
        "summary": "The issue is about the ModelBackend.authenticate() method making a database query when the username is None. The user suggests a shortcut to avoid this unnecessary database query and the running of the password hasher, which is expensive.",
        "category": "Bug",
        "tags": [
            "Database",
            "Authentication",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11457",
        "summary": "The issue is about improving the exceptions raised in Expressions when mixed types are encountered. The user suggests that the exception should provide more detailed information about the types found and which were unexpected.",
        "category": "Feature Request",
        "tags": [
            "Error Handling",
            "Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11477",
        "summary": "The issue reports that the translate_url() function creates an incorrect URL when optional named groups are missing in the URL pattern.",
        "category": "Bug",
        "tags": [
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11490",
        "summary": "The issue is about the inability of composed queries to change the list of columns when values()/values_list() is evaluated multiple times.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11539",
        "summary": "The issue suggests moving index name checks from Index.__init__ into system checks for cleaner and more consistent code.",
        "category": "Feature Request",
        "tags": [
            "Index",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11543",
        "summary": "The issue reports that runserver fails to close connection if --nothreading option is specified. This is due to the web browser using multiple connections with Connection: keep-alive header by default.",
        "category": "Bug",
        "tags": [
            "Runserver",
            "Connection",
            "Threading"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11550",
        "summary": "The issue reports that order_by() on union() querysets results in wrong ordering when the same field type is presented multiple times. The ordering will be incorrect if the field we sort on is not the 1st field of the query.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Ordering",
            "Union"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11551",
        "summary": "The issue reports that admin.E108 is raised on fields accessible only via instance. This issue was found after upgrading Django from 2.07 to 2.2.1.",
        "category": "Bug",
        "tags": [
            "Admin",
            "ModelAdmin",
            "Field Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11555",
        "summary": "The issue reports a bug when using a query expression for ordering during multi-table inheritance. The bug occurs because the field is an OrderBy object, not a string, during get_order_dir.",
        "category": "Bug",
        "tags": [
            "Ordering",
            "Multi-table Inheritance",
            "Query Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11559",
        "summary": "The issue reports a bug when using a query expression for ordering during multi-table inheritance. The bug occurs because the field is an OrderBy object, not a string, during get_order_dir.",
        "category": "Bug",
        "tags": [
            "Ordering",
            "Multi-table Inheritance",
            "Query Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11501",
        "summary": "The issue is about the 'createsuperuser' management command not being suitable for scripting, as it doesn't set a password. The suggestion is to make the command inspect environment variables to pick up the username, password and possibly all other required fields.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "User Management",
            "Environment Variables"
        ]
    },
    {
        "instance_id": "django__django-11514",
        "summary": "The issue is about the 'never_cache' decorator not working as expected because it lacks 'Cache-Control: private', causing resources to be cached by CDN providers. The suggestion is to add this header to a response.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Cache Control",
            "Decorators"
        ]
    },
    {
        "instance_id": "django__django-11517",
        "summary": "The issue is about the 'call_command' raising ValueError when subparser 'dest' is passed in options. This happens when a management command contains subparsers and is called using 'call_command'.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "Subparsers",
            "ValueError"
        ]
    },
    {
        "instance_id": "django__django-11525",
        "summary": "The issue is about the 'mail_managers' function not failing early when the 'MANAGERS' setting is improperly set, causing an SMTPRecipientsRefused error. The suggestion is to raise exceptions in 'mail_admins()'/'mail_managers()' when settings are not in expected formats.",
        "category": "Bug",
        "tags": [
            "Email",
            "Settings",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-11527",
        "summary": "The issue is about the 'sqlsequencereset' command not providing any output if there are no results returned by 'connection.ops.sequence_reset_sql'. The suggestion is to raise a CommandError and say there's nothing to do if 'len(statements) == 0'.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQL",
            "Command Line"
        ]
    },
    {
        "instance_id": "django__django-11532",
        "summary": "The issue is about the email messages crashing on non-ASCII domain when email encoding is non-unicode. The suggestion is to have 'django.core.mail.utils' or 'django.core.mail.message' convert domain name to punycode before using.",
        "category": "Bug",
        "tags": [
            "Email",
            "Unicode",
            "Encoding"
        ]
    },
    {
        "instance_id": "django__django-11603",
        "summary": "The issue is about adding DISTINCT support for Avg and Sum aggregates in Django. Currently, these aggregations throw an exception if the DISTINCT parameter is used, which was not the case before version 2.2.",
        "category": "Feature Request",
        "tags": [
            "Aggregates",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11605",
        "summary": "The issue is about Django's shallow check for window expressions in filters. The current check does not cover the right side of the expression or combined expressions, which can lead to failures on the database backend once executed.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Filter",
            "Window Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11612",
        "summary": "The issue is about SQLite3 migrations failing when a model's Meta db_table is quoted. The error is caused by a syntax error in the generated query. The issue is reproducible when the table with a quoted name has at least one foreign key.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite3",
            "Migrations",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11618",
        "summary": "The issue is about PermissionErrors being cloaked in ManifestFilesMixin.read_manifest() when using the ManifestStaticFilesStorage. The current error handling catches any OSError and proceeds by returning no content, which can leave the app in an unrecoverable state.",
        "category": "Bug",
        "tags": [
            "File Storage",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11620",
        "summary": "The issue is about raising Http404 in a path converter's to_python method not resulting in a technical response when DEBUG is True. The current behavior results in a plain text server error message.",
        "category": "Bug",
        "tags": [
            "URL Resolver",
            "Error Handling",
            "Debugging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11622",
        "summary": "The issue is about adding a helpful exception for invalid values passed to AutoField/FloatField/IntegerField. Currently, Django produces a traceback deep within the ORM with no clue which field assignment caused the error.",
        "category": "Feature Request",
        "tags": [
            "Models",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11560",
        "summary": "The issue is about a ValueError raised when using ExtractYear lookups on a DurationField. The problem arises because ExtractYear compares the source date with a range of dates, which fails when the source is a duration rather than a date.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Lookups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11564",
        "summary": "The issue is about the lack of support for SCRIPT_NAME in STATIC_URL and MEDIA_URL. The user suggests that this can be solved by prepending SCRIPT_NAME to STATIC_URL in settings.py, but this doesn't work when SCRIPT_NAME is a dynamic value.",
        "category": "Feature Request",
        "tags": [
            "URL",
            "Static Files",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11583",
        "summary": "The issue is about an intermittent ValueError: embedded null byte error thrown by StatReloader during auto-reloading. The user suspects the issue might be related to the use of Pathlib, which was not used prior to Django 2.2.",
        "category": "Bug",
        "tags": [
            "Auto-reloading",
            "StatReloader",
            "Pathlib"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11584",
        "summary": "The issue is about a FileNotFoundError thrown when trying to run the development server in a Docker container with volume-mounted source. The user has verified that the issue is consistently reproducible with Django==2.2.3 and not present in Django==2.1.4.",
        "category": "Bug",
        "tags": [
            "Docker",
            "FileNotFoundError",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11591",
        "summary": "The issue is about the lack of strict enforcement on the operations allowed following QuerySet.union(). The documentation states that only LIMIT, OFFSET, and ORDER BY are allowed, but some operations like QuerySet.count() might appear to work.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Union",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11592",
        "summary": "The issue is about the block_size attribute of Django's FileResponse class not being passed to wsgi.file_wrapper. The user suggests that this could be easily fixed.",
        "category": "Bug",
        "tags": [
            "FileResponse",
            "WSGI",
            "File Wrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11630",
        "summary": "After upgrading to Django 2.2, an error is thrown when different apps with different models have the same table name. This was not an issue in previous versions.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "App",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11638",
        "summary": "In Django 2.2.1, the test client throws an exception if a None value is provided in data given to a POST. The user suggests improving the error message to display the offending Key and Value that generate the exception.",
        "category": "Feature Request",
        "tags": [
            "Test Client",
            "POST",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11666",
        "summary": "The 'patch_vary_headers' function appends new headers to the list, which may violate the HTTP spec if the Vary header is set to an asterisk. The user suggests allowing the function to handle the '*' value.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Headers",
            "Caching"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11669",
        "summary": "Only TemplateView pushes self.kwargs to the context, while ListView does not. The user suggests fixing this inconsistency.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "ListView",
            "Context"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11677",
        "summary": "Nested OuterRef is not looking on the right model for the field, resulting in a FieldError. The user provides a test case for this issue.",
        "category": "Bug",
        "tags": [
            "Models",
            "FieldError",
            "Nested OuterRef"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11680",
        "summary": "When saving a new model instance with a primary key that has a default, an unnecessary UPDATE query is executed. The user suggests removing this query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11728",
        "summary": "The function replace_named_groups() fails to replace the final named group if the urlpattern passed in is missing a trailing '/'. This function is used downstream in Django REST Framework.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "REST Framework"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11734",
        "summary": "The test fails when trying to exclude results using OuterRef(). It results in a ValueError indicating that the queryset contains a reference to an outer query and may only be used in a subquery.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "OuterRef"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11740",
        "summary": "Changing a field from UUID to FK does not create any dependencies for the related model. This results in a ValueError indicating that the related model cannot be resolved.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "UUID",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11742",
        "summary": "There is currently no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices. This can cause issues when attempting to save a record with values that are too long.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11749",
        "summary": "The call_command function fails when an argument of a required mutually exclusive group is passed in kwargs. This results in a CommandError indicating that one of the arguments is required.",
        "category": "Bug",
        "tags": [
            "Command",
            "Argument Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11751",
        "summary": "The proposal is to make Django use more security headers by default on new projects. This includes activating security headers SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, and X_FRAME_OPTIONS by default.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Headers",
            "Default Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11688",
        "summary": "The issue is about Django's URL path converters not handling spaces well. The problem arises when constructing a valid looking converter reference with leading/trailing spaces or spaces in between, which results in an invalid regex and an empty kwargs dictionary.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Regex"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11692",
        "summary": "The issue is about the inability to use OuterRef in a union Subquery in Django. When a QuerySet is made using the union method or the | operator, the QuerySet passed into the union method cannot reference OuterRef even when wrapped with Subquery, resulting in a ValueError.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11695",
        "summary": "The issue is about the current implementation of the Ajax autocomplete widget using Select2 in Django triggering a request for every key-press, creating unnecessary load on servers. A patch has been proposed to rate-limit the requests by adding a delay using the ajax.delay option provided by Select2.",
        "category": "Feature Request",
        "tags": [
            "Ajax",
            "Widgets",
            "Server Load"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11701",
        "summary": "The issue is about Django's admin search crashing with an error message 'A string literal cannot contain NUL (0x00) characters.' when a null character is input in the URL field on PostgreSQL.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "URL Validation",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11707",
        "summary": "The issue is about the pickling of a QuerySet evaluating the querysets given to Subquery in annotate in Django. The problem arises because the QuerySet is still stored on the instance within the _constructor_args attribute added by the @deconstructible decorator on the BaseExpression base class.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Subquery",
            "Pickling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11727",
        "summary": "The issue is a feature request to allow hiding the 'Save and Add Another' button with a `show_save_and_add_another` context variable in Django's admin interface for better adjustability.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "User Interface"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11754",
        "summary": "The issue is about allowing the use of an ExceptionReporter subclass in django.views.debug.technical_500_response. Currently, the use of ExceptionReporter is hardcoded. The suggestion is to move this to a parameter and provide an example of using a subclass when specifying handler500. There is also a proposal to add ExceptionReporter to the documentation and a DEFAULT_EXCEPTION_REPORTER setting.",
        "category": "Feature Request",
        "tags": [
            "Exception Handling",
            "Debugging",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11772",
        "summary": "The issue discusses the speed and simplification of the 'make_template_fragment_key' function in django.core.cache.utils. It suggests removing the use of urllib.quote for vary_on args and switching the hashing function from MD5 to SHA256. The issue also proposes to change other cache key generating functions to use SHA256.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Performance",
            "Hashing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11790",
        "summary": "The issue reports that the AuthenticationForm's username field doesn't render with maxlength HTML attribute anymore. This is a regression introduced in #27515 and 5ceaf14686ce626404afb6a5fbd3d8286410bf13.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "HTML",
            "Form"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11797",
        "summary": "The issue reports that filtering on query result overrides GROUP BY of internal query. The problem is that the GROUP BY clause in the SQL query is not correctly set when filtering on the result of a query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11808",
        "summary": "The issue reports that Model.__eq__ never returns NotImplemented if it encounters an object it doesn't know how to compare against. Instead, it automatically returns False. According to the Python 3 data model reference, a __eq__ should return NotImplemented.",
        "category": "Bug",
        "tags": [
            "Model",
            "Comparison",
            "Python"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11810",
        "summary": "The issue reports that when creating a new QuerySet from an existing QuerySet that has had 'select_related' applied, if you apply another 'select_related' to the new QuerySet it will mutate the original QuerySet to also have the extra 'select_related'. The expectation is that the original QuerySet is not mutated, and the two queries are different.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Mutation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11815",
        "summary": "The issue is about Django's migration using the value of an Enum object instead of its name as a default value for a CharField. This causes a problem when the value of the Enum object is translated to the user's language, causing old migration files to raise an error.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Enum",
            "CharField",
            "Translation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11820",
        "summary": "The issue reports a problem where models.E015 is raised when Meta.ordering contains __pk of a related field. This is a regression in a specific commit.",
        "category": "Bug",
        "tags": [
            "Models",
            "Meta.ordering",
            "Related Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11823",
        "summary": "The issue is about the cache_control() 'max_age' overriding cache_page() 'timeout'. If a view is decorated with both, the server side cache uses the 'max_age' value instead of the 'timeout' value.",
        "category": "Bug",
        "tags": [
            "Cache Control",
            "Timeout",
            "Max Age"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11829",
        "summary": "The issue reports that patch_cache_control needs to special case 'no-cache' according to the HTTP/1.1 specification. The current implementation does not treat 'no-cache' as a list and does not give precedence to no_cache=True over no_cache='foo'.",
        "category": "Bug",
        "tags": [
            "Cache Control",
            "No-Cache",
            "HTTP"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11848",
        "summary": "The issue is about the incorrect two-digit year check in django.utils.http.parse_http_date. The current logic is hard-coded to consider 0-69 to be in 2000-2069, and 70-99 to be 1970-1999, instead of comparing versus the current year.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Date Parsing",
            "RFC 7231"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11880",
        "summary": "The issue reports that the __deepcopy__ method for form fields does not perform a deep copy of the error_messages dictionary. As a result, all copies of the same field share the same dictionary and any modification of either the dictionary or the error message itself for one form field is immediately reflected on all other form fields.",
        "category": "Bug",
        "tags": [
            "Form Fields",
            "Deep Copy",
            "Error Messages"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11883",
        "summary": "The issue requests for the cache.delete() function to return a value indicating whether the operation was successful or not. This would be useful for complex caching/locking systems or for logging purposes.",
        "category": "Feature Request",
        "tags": [
            "Cache",
            "Backend",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11885",
        "summary": "The issue suggests combining fast delete queries to reduce the number of roundtrips to the database when emulating ON DELETE CASCADE via on_delete=models.CASCADE.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Query Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11891",
        "summary": "The issue reports that ConditionalGetMiddleware returns a 304 status even if the ETag is the same but Last-Modified has changed. This is problematic when used in combination with apache x-sendfile (django-sendfile).",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "ETag",
            "Last-Modified"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11893",
        "summary": "The issue reports that DateTimeField does not accept ISO 8601 formatted date string because Django expects to have only space as a date and time separator.",
        "category": "Bug",
        "tags": [
            "DateTimeField",
            "ISO 8601",
            "Date Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11894",
        "summary": "The issue reports that Django does not explicitly set the samesite attribute to None when setting cookies, which can cause problems with cross-origin requests in Chrome.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "SameSite",
            "Cross-Origin Requests"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11903",
        "summary": "The issue reports that ManagementUtility.fetch_command prints 'No Django settings specified.' even if they are set via a UserSettingsHolder by doing settings.configure(...).",
        "category": "Bug",
        "tags": [
            "ManagementUtility",
            "Settings",
            "Configuration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11905",
        "summary": "The issue is about the __isnull lookup in Django allowing non-boolean values, which is not documented and untested. The suggestion is to raise an error for non-boolean values to avoid confusion and maintain consistency.",
        "category": "Bug",
        "tags": [
            "Database",
            "Lookup",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11910",
        "summary": "This issue is about Django's ForeignKey's to_field parameter not updating when a primary key field is renamed. The to_field parameter still points to the old field name instead of the new one.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11911",
        "summary": "The issue is about the 'migrate --plan' command outputting 'IRREVERSIBLE' for RunPython operations without docstrings. The issue suggests that the migration should not be described as 'irreversible' and proposes solutions to fix this.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Command",
            "RunPython"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11916",
        "summary": "This issue is about making prefetch_related faster by lazily creating related querysets. The issue suggests two options: allowing assigning the results to somewhere else than manager.all() or lazily instantiate the .all() queryset.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Performance",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11951",
        "summary": "The issue is about the batch_size parameter in bulk_create overriding the compatible batch size calculation. The issue suggests using similar logic in bulk_create as in bulk_update.",
        "category": "Bug",
        "tags": [
            "Database",
            "Bulk Operations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11964",
        "summary": "The issue is about the value of a TextChoices/IntegerChoices field having a differing type. The value returned by the getter of the field will be of the same type as the one created by enum.Enum (enum value).",
        "category": "Bug",
        "tags": [
            "Models",
            "Field Types",
            "Choices"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12049",
        "summary": "The issue is about Django's migration detection failing when using a case-insensitive collation. The user is trying to keep the naming convention of their database, but Django's case sensitive comparison is causing an error when checking if a column is already present in the database.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Case Sensitivity"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12050",
        "summary": "The issue is about the Query.resolve_lookup_value function in Django's ORM. Changes introduced in a previous update cause an input value list to be coerced to tuple, breaking exact value queries. This affects ORM field types that are dependent on matching input types.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Query",
            "Type Coercion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12062",
        "summary": "The issue is a feature request to allow disabling of all migrations during tests. The user suggests adding a setting to disable all migrations on a particular database.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migration",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12073",
        "summary": "The issue is about the InvalidQuery exception in Django's ORM. The user suggests deprecating this barely documented exception and replacing its usage with other exceptions.",
        "category": "Documentation",
        "tags": [
            "ORM",
            "Exceptions",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12091",
        "summary": "The issue is about the HttpRequest.is_ajax method in Django. The user suggests deprecating this method as it inspects a non-standard header set by jQuery, which is decreasing in popularity.",
        "category": "Feature Request",
        "tags": [
            "HttpRequest",
            "Deprecation",
            "jQuery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12113",
        "summary": "The issue is about a test failure when using persistent SQLite databases for the tests. The user encounters a 'database is locked' error when trying to use persistent SQLite databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11983",
        "summary": "The issue is about a bug in Django's admin date_hierarchy filter which excludes 31st October when using timezone with DST in northern hemisphere. The problem is due to the generated SQL having < 2019-10-31 instead of < 2019-11-01.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Admin Console",
            "Date Hierarchy",
            "Timezone",
            "SQL"
        ]
    },
    {
        "instance_id": "django__django-11991",
        "summary": "This issue is a feature request to add support for adding non-key columns to indexes in Django. The user suggests adding an additional kwarg to Index to support this feature.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "Database",
            "Index",
            "Postgres",
            "SQL"
        ]
    },
    {
        "instance_id": "django__django-11997",
        "summary": "The issue reports a bug where the floatformat filter returns '-0' instead of '0' for values between 0 and -0.5. The user suggests that this is a bug and is willing to submit a patch.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Filter",
            "Floatformat"
        ]
    },
    {
        "instance_id": "django__django-11999",
        "summary": "The issue is about a bug where the user is unable to override the get_FIELD_display function on models in Django version 2.2. The user expects to be able to override this function.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Models",
            "Function Override"
        ]
    },
    {
        "instance_id": "django__django-12009",
        "summary": "The issue reports that Django installs both /usr/bin/django-admin and /usr/bin/django-admin.py, both of which execute the same function. The user suggests that it would suffice to install only one of these scripts.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Installation",
            "Scripts"
        ]
    },
    {
        "instance_id": "django__django-12039",
        "summary": "The issue is about a bug in the whitespace in CREATE INDEX statements in Django. The user reports that the generated CREATE INDEX statement is valid but not pretty and suggests a fix.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Database",
            "SQL",
            "Index"
        ]
    },
    {
        "instance_id": "django__django-12121",
        "summary": "The issue is about the behavior of URL converters in Django when they decline to match for a named route. The user suggests either updating the '_reverse_with_prefix' function or updating the documentation to clarify the expected behavior.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12122",
        "summary": "The issue reports that the template filter 'date' with argument 'r' does not return a valid RFC 2822 formatted date when the LANGUAGE_CODE is set to a language other than English. The user suggests adding two arguments to handle this.",
        "category": "Bug",
        "tags": [
            "Template Filter",
            "Date Formatting",
            "Localization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12125",
        "summary": "The issue reports that 'makemigrations' command produces incorrect path for inner classes. When a subclass from django.db.models.Field is defined as an inner class and used inside a django.db.models.Model class, the generated migrations file refers to the inner class as if it were a top-level class.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12132",
        "summary": "The issue suggests adding subdomains of localhost to ALLOWED_HOSTS in DEBUG mode to minimize configuration for new projects. The user points out that Chrome resolves *.localhost to localhost without modifying any host files or DNS.",
        "category": "Feature Request",
        "tags": [
            "Configuration",
            "Debug Mode",
            "ALLOWED_HOSTS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12143",
        "summary": "The issue reports a potential data loss in admin changeform view when using regex special characters in formset prefix. The user suggests using re.escape() to fix the issue.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Regex",
            "Data Loss"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12148",
        "summary": "The issue reports that 'reverse()' and 'get_absolute_url()' may return different values for the same FlatPage. The user points out that this happens when using a prefix for the flatpages urls.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "FlatPage"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12225",
        "summary": "The issue is about an error message that is displayed when an inline has multiple foreign keys to the same parent model. The error message should recommend specifying fk_name.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Handling",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12231",
        "summary": "The issue is about the set() method of relatedmanager which is used to update a list of foreignkeys. The problem is that the database removes all foreignkeys and adds them again. The user suggests that Django should fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Foreign Key",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12237",
        "summary": "The issue is about the slugify() function which does not return a valid slug for the Turkish/Azerbaijani letter '\u0130'. The user suggests that the order in which lower() is called in slugify should be changed.",
        "category": "Bug",
        "tags": [
            "Parsing",
            "Unicode",
            "Slugify"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12262",
        "summary": "The issue is about custom template tags that raise TemplateSyntaxError when keyword-only arguments with defaults are provided. The user has a fix ready and will push it after creating the ticket.",
        "category": "Bug",
        "tags": [
            "Template Tags",
            "Syntax Error"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12273",
        "summary": "The issue is about resetting the primary key for a child model which does not work. Setting the primary key to None does not overwrite the existing object on save().",
        "category": "Bug",
        "tags": [
            "Models",
            "Primary Key",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12276",
        "summary": "The issue is about FileInput which displays required attribute even when initial data exists. The user suggests that ClearableFileInput.use_required_attribute() should be moved to FileInput.use_required_attribute().",
        "category": "Bug",
        "tags": [
            "File Input",
            "HTML",
            "Attributes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12153",
        "summary": "The issue is about a migration script that fails when the default database is not set in a multi-database environment. This contradicts the Django tutorial which states that setting the default database can be omitted.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12155",
        "summary": "The issue is about the admindoc module in Django, which only works correctly when the first line of a docstring is empty. If the docstring text starts at the first line, it causes an error.",
        "category": "Bug",
        "tags": [
            "Documentation",
            "Admindoc"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12161",
        "summary": "The issue is about the through_defaults argument not allowing callable values, unlike the defaults argument of get_or_create or the default argument of any model field. Callable values are passed through without being evaluated, which can lead to unexpected behavior.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12172",
        "summary": "The issue is about the 'async unsafe' checks in Django. It has been reported that Jupyter executes apparently-synchronous code in an async environment, which can cause issues. The suggestion is to add a flag that disables the async-unsafe check.",
        "category": "Feature Request",
        "tags": [
            "Async",
            "Jupyter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12184",
        "summary": "The issue is about optional URL parameters causing some view functions to crash. This was not an issue in Django 2.2, but is causing an error in Django 3.0.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "View Functions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12185",
        "summary": "The issue is about Django raising a NotSupportedError when using window expressions in conditional statements used only in the SELECT clause. The SQL standard disallows referencing window functions in the WHERE clause, but it should be possible in the SELECT clause.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Window Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12187",
        "summary": "The issue is about the exposure of staticfiles manifest in Django deployments using ManifestStaticFilesStorage. The manifest ends up in the directory of publicly served files, which could potentially expose sensitive information. The user suggests potential solutions such as encrypting the manifest on disk or changing the manifest path to somewhere non-public.",
        "category": "Feature Request",
        "tags": [
            "Static Files",
            "Security",
            "ManifestStaticFilesStorage"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12193",
        "summary": "The issue reports a problem with SplitArrayField BooleanField where the final_attrs dict is updated to include 'checked': True after the first True value in the initial data array. This causes every widget initialized after that to default to checked even though the backing data may be False.",
        "category": "Bug",
        "tags": [
            "SplitArrayField",
            "BooleanField",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12196",
        "summary": "The issue is about Django allowing incorrect usage of sensitive_variables and sensitive_post_parameters decorators. The user proposes adding some code to both decorators that catches this misuse to prevent users from decorating their functions incorrectly.",
        "category": "Bug",
        "tags": [
            "Decorators",
            "sensitive_variables",
            "sensitive_post_parameters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12198",
        "summary": "The issue reports a problem with the method authenticate of a custom AuthenticationBackend when decorated with sensitive_variables. The user suggests that inspect.getcallargs will always match, which can cause an uncaught TypeError for an unmatching backend.",
        "category": "Bug",
        "tags": [
            "AuthenticationBackend",
            "sensitive_variables",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12209",
        "summary": "The issue is about a change in behaviour when saving a model instance with an explicit pk value if the pk field has a default. The user reports that in Django 3.0, this results in two INSERTs, whereas in Django 2.2 and earlier, it would result in an INSERT followed by an UPDATE.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12212",
        "summary": "The issue reports a DeserializationError where the local variable 'pk' is referenced before assignment. The user suggests that this error is caused by not dealing with None values and proposes a solution to get around the error.",
        "category": "Bug",
        "tags": [
            "Deserialization",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12281",
        "summary": "The issue is about the error message for admin.E130 not being clear enough. The user suggests that the error message should specify the names that occur more than once and explain where the duplicate comes from.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12284",
        "summary": "The issue is about the Model.get_FOO_display() function not working correctly with inherited choices. The function does not return the correct output for new tuples added in the child model.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12286",
        "summary": "The issue is about the translation.E004 error being raised on sublanguages when a base language is available. According to Django documentation, Django should use the base language if the sublanguage specified is not available.",
        "category": "Bug",
        "tags": [
            "Translation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12299",
        "summary": "The issue is about the update()/delete() operations not working correctly following QuerySet.union(), intersection(), and difference(). The user suggests raising a descriptive error in such cases.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12304",
        "summary": "The issue is about the new enumeration types not being usable in Django templates due to their being callable. The user suggests declaring do_not_call_in_templates = True on the various Choices classes.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Enumeration Types"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12306",
        "summary": "The issue is about named groups in choices not being properly validated in case of non str typed values. The user suggests adding an additional argument to the max function to solve the problem.",
        "category": "Bug",
        "tags": [
            "Models",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12308",
        "summary": "The issue reports that JSONField values are not properly displayed in the Django admin when they are set to readonly. The values are displayed as a dictionary instead of valid JSON.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "JSONField",
            "Readonly"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12313",
        "summary": "The issue reports that Django's 'makemigrations' command does not detect or handle changes in the case of model names. This results in repeated operations and potential exceptions.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Model Name"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12325",
        "summary": "The issue reports that the setup for primary key (pk) for Multi-Table Inheritance (MTI) to parent gets confused by multiple OneToOne references. The order of the fields seems to matter.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "OneToOneField",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12343",
        "summary": "The issue suggests that in the Django admin UI, foreign key or many-to-many fields should be rendered as links for readonly users, allowing them to navigate through the relationships if they have the necessary permissions.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "User Permissions",
            "ForeignKey",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12360",
        "summary": "The issue reports that when a model name is just under the 100 character limit, the codenames generated for the default permissions can exceed the maximum 100 characters on the Permission model, causing a database error.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Permissions",
            "Codenames"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12364",
        "summary": "The issue suggests that the detection of existing total ordering in admin changelist should take into account UniqueConstraints without conditions, as the current discovery algorithm only checks for the presence of a unique_together attribute.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "UniqueConstraints",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12394",
        "summary": "The issue is about an error that crashes the system when trying to raise an error about protected related objects. The error is related to the 'itertools.chain' object not being subscriptable.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Database",
            "Models"
        ]
    },
    {
        "instance_id": "django__django-12396",
        "summary": "The issue is about the test runner trying to access the test database without prefixing 'test_', leading to an access denied error. This happens when running a subset of tests that only uses the default database.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing"
        ]
    },
    {
        "instance_id": "django__django-12406",
        "summary": "The issue is about the RadioSelect widget for foreign keys in ModelForm presenting a blank option even when 'blank=False' is set on the model. The blank option should not be presented in this case.",
        "category": "Bug",
        "tags": [
            "ModelForm",
            "Widgets",
            "Model Validation"
        ]
    },
    {
        "instance_id": "django__django-12407",
        "summary": "The issue is about the Include template tag using 'get_template' where it could use 'select_template'. This would allow for fallbacks by selecting the most appropriate template.",
        "category": "Feature Request",
        "tags": [
            "Templates"
        ]
    },
    {
        "instance_id": "django__django-12419",
        "summary": "The issue is about changing the default for the SECURE_REFERRER_POLICY setting to 'same-origin' to make Django applications leak less information to third party sites.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Settings"
        ]
    },
    {
        "instance_id": "django__django-12430",
        "summary": "The issue is about the potential for data corruption when using caching from async code. This is due to CacheHandler using 'threading.local' instead of 'asgiref.local.Local', leading to a potential race condition.",
        "category": "Bug",
        "tags": [
            "Caching",
            "Async"
        ]
    },
    {
        "instance_id": "django__django-12470",
        "summary": "The issue is about the incorrect ordering of inherited models in Django. When '-pk' is specified in the parent model's Meta.ordering, the child model does not correctly order the query results in descending order as expected.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Models",
            "Database",
            "Inheritance",
            "Ordering"
        ]
    },
    {
        "instance_id": "django__django-12477",
        "summary": "The issue is about Django's handling of UniqueConstraints without conditions. The user is trying to create a migration with a model that uses UniqueConstraint, but Django suggests using unique_together, which may be deprecated in the future.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Models",
            "Database",
            "Migration",
            "Unique Constraints"
        ]
    },
    {
        "instance_id": "django__django-12484",
        "summary": "The issue is about Django's system checks for custom user models. The error message does not provide a hint about which field is causing the problem. The user suggests that Django could provide a hint to improve the user experience.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "Admin Console",
            "System Checks",
            "User Model"
        ]
    },
    {
        "instance_id": "django__django-12485",
        "summary": "The issue is about Django's MultiPartParser not supporting double quotes. Some third-party tools wrap the value in double quotes, which results in incorrect parsing in Django. The user suggests that Django should be compatible with this situation.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "Parsing",
            "HTTP Requests",
            "MultiPartParser"
        ]
    },
    {
        "instance_id": "django__django-12486",
        "summary": "The issue is about Django's numberformat.format() function incorrectly formatting large or tiny floats in scientific notation. The function returns an erroneous output for floats with values larger than 1e16 or smaller than 1e-5.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Number Formatting",
            "Scientific Notation"
        ]
    },
    {
        "instance_id": "django__django-12496",
        "summary": "The issue is about Django making an extra update query when creating a new model object using multi-inheritance model. This happens only if a custom primary key is defined in the parent model.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Models",
            "Database",
            "Inheritance",
            "Primary Key"
        ]
    },
    {
        "instance_id": "django__django-12431",
        "summary": "The issue reports a regression in #30565. When running tests against Postgres, an error occurs indicating that the connection is already closed. This issue is related to the FileResponse with a temporary file.",
        "category": "Bug",
        "tags": [
            "Database",
            "Postgres",
            "FileResponse",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12441",
        "summary": "The issue reports that calling a form method _html_output modifies the self._errors dict for NON_FIELD_ERRORS if there are hidden fields with errors. This happens when the form methods as_p(), as_table(), as_ul() are called multiple times.",
        "category": "Bug",
        "tags": [
            "Forms",
            "HTML",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12453",
        "summary": "The issue reports that TransactionTestCase.serialized_rollback fails to restore objects due to ordering constraints. This problem occurs when setting serialized_rollback = True on a TransactionTestCase triggers rollback emulation.",
        "category": "Bug",
        "tags": [
            "Database",
            "Transaction",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12458",
        "summary": "The issue reports that the serialization dependency sorting disallows circular references unnecessarily. This issue is related to the core.serialization.sort_dependencies() function.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "Dependency Sorting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12464",
        "summary": "The issue reports that DISTINCT with GROUP_CONCAT() and multiple expressions raises NotSupportedError on SQLite. This issue is related to the use of DISTINCT on aggregate functions in SQLite.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12469",
        "summary": "The issue reports that the Admin date_hierarchy filter by month displays an extra day at timezone boundary. This issue is related to the date_hierarchy filter in the Django Admin.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Date Hierarchy",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12497",
        "summary": "The issue is about a misleading error message when there are more than 2 ForeignKeys in an intermediary model of a m2m field and no through_fields have been set. The error message suggests using 'symmetrical' and 'through' which are m2m keyword arguments, not ForeignKey.",
        "category": "Bug",
        "tags": [
            "Error Message",
            "ForeignKey",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12503",
        "summary": "The issue is about the 'makemessages' command not providing feedback when no locale is specified. The command should raise a CommandError, but due to a bug in an if statement, this does not happen.",
        "category": "Bug",
        "tags": [
            "Command",
            "Locale",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12504",
        "summary": "The issue is about the logout link in the admin app not being CSRF-protected because it is a link, not a form. The user suggests that even though protecting logout from CSRF attack might not be crucial, it is a good practice for purity.",
        "category": "Feature Request",
        "tags": [
            "Admin App",
            "CSRF",
            "Logout"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12508",
        "summary": "The issue is about the inability to run specific SQL directly with dbshell. The user suggests adding a -c argument to allow providing commands directly.",
        "category": "Feature Request",
        "tags": [
            "dbshell",
            "SQL",
            "Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12513",
        "summary": "The issue is about the 'providing_args' argument from Signal being purely documentational and providing no functionality or checking. The user suggests deprecating this argument as it causes confusion and is stored in memory for no real use.",
        "category": "Feature Request",
        "tags": [
            "Signal",
            "Argument",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12517",
        "summary": "The issue is about the inconsistent datetime logging from runserver. The user suggests making the logging consistent by providing the datefmt parameter when constructing the logger.",
        "category": "Bug",
        "tags": [
            "Logging",
            "runserver",
            "Datetime"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12588",
        "summary": "The issue is about adding an option to the remove_stale_contenttypes command in Django to also remove entries for nonexistent apps. This option would be disabled by default.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Database"
        ]
    },
    {
        "instance_id": "django__django-12589",
        "summary": "This issue reports a 'GROUP BY' clause error with tricky field annotation in Django 3.0. The error occurs when trying to evaluate a specific query. The issue is complex due to the intricate model structure and query involved.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query"
        ],
        "error": "This issue is complex due to the intricate model structure and query involved."
    },
    {
        "instance_id": "django__django-12591",
        "summary": "The issue is about the inability to replace global admin actions with specialized ones per-admin due to a system check error. This issue was encountered with the qsessions app.",
        "category": "Bug",
        "tags": [
            "Admin Console"
        ]
    },
    {
        "instance_id": "django__django-12613",
        "summary": "This issue reports that the XML serializer in Django does not handle JSONFields. An error is received when trying to serialize a queryset that includes a JSONField.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "JSONField",
            "XML"
        ]
    },
    {
        "instance_id": "django__django-12627",
        "summary": "The issue is about the make_password function in Django accepting almost every Python object as an argument, which can potentially lead to weak passwords. The suggestion is to throw a TypeError when anything but bytes or str is passed to make_password.",
        "category": "Bug",
        "tags": [
            "Security",
            "Password Handling"
        ]
    },
    {
        "instance_id": "django__django-12630",
        "summary": "The issue is a feature request for a --check flag for the migrate command in Django. This would be used to stop CI from deploying an application automatically when unapplied migrations exist.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "CI/CD"
        ]
    },
    {
        "instance_id": "django__django-12518",
        "summary": "The issue is about the sqlmigrate command not being able to inspect migrations that have been squashed. The user is unable to load specific migrations and receives an error message. The user suggests catching this error and allowing inspection of individual migrations that have been involved in a squash.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12519",
        "summary": "The issue reports a regression in Django 3.0.2 where subquery annotations are omitted in the group by query section if multiple annotations are declared. This results in duplicate results in the query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12532",
        "summary": "The issue is about the inconsistency in error message keys between MultipleChoiceField and ModelMultipleChoiceField. The former uses 'invalid_list' while the latter uses 'list'.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Model",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12553",
        "summary": "The issue suggests increasing the default password salt size in BasePasswordHasher from ~71 bits to ~131 bits, in line with modern guidance suggesting a 128 bit minimum on salt sizes.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Password Hashing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12556",
        "summary": "The issue suggests deprecating the use of get_random_string without an explicit length. The current default length value is 12.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Random String Generation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12568",
        "summary": "The issue reports that Django's humanize intword filter does not work with negative numbers. A solution using absolute value is proposed.",
        "category": "Bug",
        "tags": [
            "Humanize",
            "Intword Filter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12663",
        "summary": "The issue is about a regression in Django where using SimpleLazyObject with a nested subquery annotation fails. The user provides a test case that reproduces the issue, which results in a TypeError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Queryset",
            "Subquery",
            "SimpleLazyObject"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12669",
        "summary": "The issue is about the order_by functionality in Django breaking when a QuerySet is annotated with a uuid key. The user suggests a change in the constant django.db.models.sql.constants.ORDER_PATTERN to fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "UUID",
            "Order_By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12671",
        "summary": "The issue is about Django management commands wrapping stdout and stderr in an OutputWrapper that adds a newline at the end of the text provided as the out argument. The user suggests allowing self.stdout.write() and self.stderr.write() to add a newline to respectively stdout and stderr.",
        "category": "Feature Request",
        "tags": [
            "Management Commands",
            "OutputWrapper",
            "Stdout",
            "Stderr"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12700",
        "summary": "The issue is about django.views.debug.SafeExceptionReporterFilter.get_safe_settings() returning several un-cleansed values. The user provides an example where the settings are not cleaned properly.",
        "category": "Bug",
        "tags": [
            "Settings",
            "Debug",
            "SafeExceptionReporterFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12708",
        "summary": "The issue is about a crash during migration when deleting an index_together if there is a unique_together on the same fields. The user provides steps to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Index_Together",
            "Unique_Together"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12713",
        "summary": "The issue is about the inability to set the widget param to function formfield_for_manytomany(). The user points out that this is different from the formfield_for_foreignkey() function.",
        "category": "Bug",
        "tags": [
            "Formfield",
            "ManyToMany",
            "Widget"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12733",
        "summary": "The issue suggests using PostgreSQL TRUNCATE \u2026 RESTART IDENTITY keyword to reset sequences in sql_flush() to reduce the number of queries and improve performance.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Performance",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12734",
        "summary": "The issue reports that Django's migration doesn't detect precision changes in fields that ManyToMany points to. The length of the field in the related table remains unchanged after migration.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "ManyToMany"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12741",
        "summary": "The issue suggests simplifying the signature of `DatabaseOperations.execute_sql_flush()` by dropping the 'using' argument and inferring it from the calling instance.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Code Improvement"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12747",
        "summary": "The issue reports an inconsistency in the result format of the QuerySet.Delete method when zero objects are deleted. The result differs between models with foreign keys and those without.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12748",
        "summary": "The issue suggests adding support to reset sequences on SQLite using the internal sqlite_sequence table.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQLite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12754",
        "summary": "The issue reports a FieldError when migrating a field to a new model subclass. The migration works when creating the subclass and moving the field in the same step, but fails when running it.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "FieldError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12771",
        "summary": "The issue suggests changing the storage of ModeState.fields from a List[Tuple[str, models.Field]] to a Dict[str, models.Field] for efficiency and simplicity. The same change is suggested for ModelState.indexes and .constraints.",
        "category": "Feature Request",
        "tags": [
            "Models",
            "Database",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12774",
        "summary": "The issue reports a failure when running in_bulk() on a field that is unique by UniqueConstraint instead of unique=True. A patch is suggested to fix this.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "UniqueConstraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12796",
        "summary": "The issue suggests adding a flag to skip the consistency check in makemigrations when there is no active database connection or the database host isn't resolvable.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12803",
        "summary": "The issue reports that when returning None from a custom ManifestFilesMixin.file_hash() implementation, the resulting file name includes 'None'. A change in the hashed_name() method is suggested to fix this.",
        "category": "Bug",
        "tags": [
            "File Handling",
            "Hashing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12821",
        "summary": "The issue suggests stopping the minification of only some admin static assets due to inconsistency and the small size of the files. It is suggested to continue distributing the vendored libraries minified.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Static Assets",
            "Minification"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12830",
        "summary": "The issue reports an IndexError exception when accessing formset1.forms[1000] in a scenario where the max_num is at its default value of 1000. The issue suggests adding an absolute_max parameter to formset_factory.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Formsets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12851",
        "summary": "The issue suggests removing the 'ifequal' from the Django template language as it is no longer recommended or used in modern projects.",
        "category": "Feature Request",
        "tags": [
            "Template Language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12855",
        "summary": "The issue proposes the deprecation of the 'django.conf.urls.url' function, which is an alias to 'django.urls.re_path', as it is likely to be deprecated in a future release.",
        "category": "Feature Request",
        "tags": [
            "URL",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12856",
        "summary": "The issue reports that when a model gains a UniqueConstraint, 'makemigrations' doesn't check if the fields named therein actually exist, unlike the older 'unique_together' syntax.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12858",
        "summary": "The issue reports that 'models.E015' is raised when ordering uses lookups that are not transforms, even though the ordering works fine.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12869",
        "summary": "The issue reports that 'collectstatic' doesn't run staticfiles checks, which can lead to errors not being raised when they should be.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12906",
        "summary": "The issue suggests documenting the admin's requirement on 'django.template.context_processors.request' context processor, as it is now used in admin templates.",
        "category": "Documentation",
        "tags": [
            "Admin",
            "Templates",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12908",
        "summary": "The issue reports that the distinct() function does not affect the queryset after using annotate() on two different querysets and then union().",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Union",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12910",
        "summary": "The issue suggests replacing Command.requires_system_checks = True with Command.required_system_checks = '__all__' to allow subclasses to specify tags and avoid manual and error-prone options['skip_checks'] dance.",
        "category": "Feature Request",
        "tags": [
            "Command",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12912",
        "summary": "The issue reports that the alias used in aggregate filtering is incorrect. The same alias is used in the SQL, whereas they are not in the queryset.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Aggregate Filtering",
            "Alias"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12915",
        "summary": "The issue reports that the StaticFilesHandlerMixin is missing the async response function, causing an error when trying to use the ASGIStaticFilesHandler.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "StaticFilesHandler",
            "Async"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12928",
        "summary": "The issue suggests implementing autoreload behaviour for the cached template loader to get the speed benefit during development without having to restart the server every time a template is changed.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Autoreload",
            "Cached Template Loader"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12933",
        "summary": "The issue reports that clearsessions writes to stderr directly when a backend has not implemented clear_expired(). It is suggested to raise CommandError instead.",
        "category": "Bug",
        "tags": [
            "CommandError",
            "Clearsessions",
            "Backend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12973",
        "summary": "The issue is about the order of middleware in Django's settings. If the order is incorrect, it results in an AssertionError. The user suggests updating the order of error output to avoid this exception.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Error Handling",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12983",
        "summary": "The issue is about the django.utils.text.slugify() function. The user suggests that it should strip leading and trailing dashes and underscores.",
        "category": "Feature Request",
        "tags": [
            "Text Processing",
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13012",
        "summary": "The issue is about the incorrect placement of constant expressions of an ExpressionWrapper object in the GROUP BY clause when constructing a query on a Postgres database. This leads to a ProgrammingError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Postgres"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13022",
        "summary": "The issue is about the memcache_key_warnings in Django 2.2.13. The user reports that a bad format string results in an exception rather than a warning when a memcached key with a space in it is used.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13023",
        "summary": "The issue is about the DecimalField.to_python() function. The user reports that it raises a TypeError instead of a ValidationError when a dictionary is passed as the value parameter.",
        "category": "Bug",
        "tags": [
            "Model Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13028",
        "summary": "The issue is about a NotSupportedError raised when filtering a Queryset where the RHS has a filterable=False attribute. The user suggests that this should be documented or fixed.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13030",
        "summary": "The issue is about the unnecessary passing of NULL to the IN lookup in prefetch_related on a ForeignKey. This could potentially lead to incorrect results with complex prefetch querysets using PK refs due to NULL's behavior in SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Queryset",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13032",
        "summary": "The issue is about the unclear error message when running makemigrations without an active database connection. The user suggests that the error message could be improved for better understanding.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Makemigrations",
            "Database Connection"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13033",
        "summary": "The issue is about the incorrect ordering of a self-referencing foreign key by a relation '_id' field. The user has provided several examples to illustrate the problem and is seeking clarification on whether it's a bug or a misunderstanding on their part.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ForeignKey",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13066",
        "summary": "The issue is a feature request to support Argon2id and make it the default variety for Argon2PasswordHasher in Django. The user suggests syncing Django with the upstream updates of the argon2-cffi library.",
        "category": "Feature Request",
        "tags": [
            "Password Hasher",
            "Argon2id",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13077",
        "summary": "The issue is about the 'django-admin runserver' command frequently failing on Windows. The user has provided a workaround but is unsure whether the problem lies with Django or other components.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Windows",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13085",
        "summary": "The issue is about the 'django-admin compilemessages' command running needlessly on unchanged .po files. The user suggests a modification to the command to only invoke msgfmt when it would do anything useful.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Compilemessages",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12936",
        "summary": "The issue is about the improper functioning of Subquery.__eq__() for resolved subqueries. All resolved subqueries are considered equal, which is a regression.",
        "category": "Bug",
        "tags": [
            "Subquery",
            "Database",
            "Regression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12951",
        "summary": "The issue is about the inability to provide an Exists expression to When alongside keyword arguments like you can with filter. The user suggests modifying When's init method to allow similar input as filter.",
        "category": "Feature Request",
        "tags": [
            "Exists",
            "When",
            "Filter",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12953",
        "summary": "The issue is about the need to check that CheckConstraint.check and UniqueConstraint.condition don't span joins. The user points out that not everyone is aware that database level constraint cannot span across tables.",
        "category": "Bug",
        "tags": [
            "CheckConstraint",
            "UniqueConstraint",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12957",
        "summary": "The issue is about the Geodjango js template not using `|safe` for float values, which can cause the js syntax to be ruined by the DECIMAL_SEPARATOR.",
        "category": "Bug",
        "tags": [
            "Geodjango",
            "JS Template",
            "Float Values",
            "DECIMAL_SEPARATOR"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12961",
        "summary": "The issue is about the crashing of order_by() with expressions on union() querysets. The user suggests that if this is the expected behaviour, then the raised exception could be more explicit.",
        "category": "Bug",
        "tags": [
            "order_by",
            "union",
            "querysets",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12965",
        "summary": "The issue is about a performance regression in Model.objects.all().delete() subquery usage. The user points out that the subquery is a blocker for using LOCK TABLES along with delete() and this change is a performance regression.",
        "category": "Bug",
        "tags": [
            "Model",
            "Objects",
            "Delete",
            "Subquery",
            "Performance Regression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13089",
        "summary": "The issue reports sporadic cache errors with the database backend. The error occurs when the cursor after running connection.ops.cache_key_culling_sql() command does not return any data, causing the subsequent cursor.fetchone()[0] to fail.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Backend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13097",
        "summary": "The issue reports that formsets with can_delete=True add a delete field to every form, including 'add' forms. This behavior is inconsistent with the expected behavior and that of the built-in admin.",
        "category": "Bug",
        "tags": [
            "Formsets",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13109",
        "summary": "The issue reports that ForeignKey.validate() should validate using the base manager instead of the default manager. The current behavior causes the form to never validate as True when a user selects an archived article.",
        "category": "Bug",
        "tags": [
            "Model Validation",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13111",
        "summary": "The issue reports that WeekArchiveView should add %V to the list of accepted week formatters. This would require changing the year format to %G, or simply ValueError in _date_from_string should mention the message passed from datetime.datetime.strptime.",
        "category": "Feature Request",
        "tags": [
            "Date Formatting",
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13112",
        "summary": "The issue reports that makemigrations crashes for ForeignKey with mixed-case app name. The error occurs when running 'python3 manage.py migrate' on Django 3.1b1.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13115",
        "summary": "The issue reports that UniqueConstraint should throw an error when deferrable is combined with parameters which require the usage of an explicit unique index through CREATE UNIQUE INDEX. This was missed when UniqueConstraint.include and UniqueConstraint.opclasses was added.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13118",
        "summary": "The issue reports that the SQL generated for negated F() expressions is incorrect. The ORM generates different SQL for two queries that semantically mean the same, leading to different results.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "ORM",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13121",
        "summary": "The issue reports that durations-only expressions do not work on SQLite and MySQL. An error is thrown when trying to annotate a DurationField with a timedelta.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "MySQL",
            "Models",
            "DurationField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13128",
        "summary": "The issue reports that temporal subtraction does not work without ExpressionWrapper. An error is thrown when trying to annotate a DateTimeField with a timedelta.",
        "category": "Bug",
        "tags": [
            "Database",
            "DateTimeField",
            "Models",
            "ExpressionWrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13145",
        "summary": "The issue is a feature request to add a 'depth' parameter to the timesince function to configure how many values are shown. The existing rule of values having to be adjacent to one another should still remain.",
        "category": "Feature Request",
        "tags": [
            "timesince",
            "Functionality",
            "Depth Parameter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13158",
        "summary": "The issue reports a bug where QuerySet.none() on combined queries returns all results. When a form is submitted empty, all objects matching the queryset are added.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Models",
            "Forms"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13162",
        "summary": "The issue is a feature request to improve the default name of merge migrations. The suggestion is to create the default filename by combining the files being merged.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Filenames",
            "Functionality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13165",
        "summary": "The issue is about a regression in Django 3.2 where ExpressionWrapper loses output_field for combined expression without an output_field. The user has provided a model and a query that throws an exception in Django 3.2 but works as expected in Django 3.0.8.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "Regression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13170",
        "summary": "The user is requesting a feature where FilteredRelation's condition supports nested relations. The current limitation of not supporting nested relations in FilteredRelation's condition has been encountered multiple times by the user.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Relations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13192",
        "summary": "The issue is about Django's inability to send emails with names longer than 75 characters due to a recent security update in Python. The user has provided a link to the Python update that causes this issue.",
        "category": "Bug",
        "tags": [
            "Email",
            "Python",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13195",
        "summary": "The user reports a warning message from Firefox about the 'SameSite' attribute of a cookie. The issue seems to be with the HttpResponseBase's delete_cookie method not setting the 'SameSite' setting on Set-Cookie headers. The user has provided a workaround that stops the warnings.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Cookies",
            "Browser Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13199",
        "summary": "This issue is identical to the previous one (django__django-13195). It's about a warning message from Firefox about the 'SameSite' attribute of a cookie. The issue seems to be with the HttpResponseBase's delete_cookie method not setting the 'SameSite' setting on Set-Cookie headers.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Cookies",
            "Browser Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13207",
        "summary": "The user is suggesting a feature to support custom collations in Django. The user has provided links to the mailing list discussion and PostgreSQL documentation about nondeterministic collations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Collation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13212",
        "summary": "The issue is about including the provided value in a custom error message in Django's built-in validators. This would allow for more specific error messages, such as '\u201cblah\u201d is not a valid email.'",
        "category": "Feature Request",
        "tags": [
            "Validators",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13218",
        "summary": "This issue is about allowing migrations directories without __init__.py files in Django. The __file__ check is no longer needed due to changes in migration file discovery and it prevents migrate from working on namespace packages.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Python 3",
            "Namespace Packages"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13220",
        "summary": "The issue is about allowing ValidationErrors that have identical messages to equal each other. This would make testing easier and more intuitive.",
        "category": "Feature Request",
        "tags": [
            "ValidationErrors",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13230",
        "summary": "This issue is about adding support for item_comments to the syndication framework in Django. This would allow item_comments to be defined directly without having to use item_extra_kwargs.",
        "category": "Feature Request",
        "tags": [
            "Syndication Framework",
            "Comments"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13233",
        "summary": "The issue is about the model attribute of image fields not pointing to the concrete model in Django 3.2. This makes model and field introspection harder than before.",
        "category": "Bug",
        "tags": [
            "Image Fields",
            "Model Introspection"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13236",
        "summary": "This issue is about RenameField with db_column being a noop in Django. This is because only the Django column changes, the database still has the same db_column.",
        "category": "Bug",
        "tags": [
            "RenameField",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13237",
        "summary": "The issue is about the undesirable and unexpected behavior of Django when changing a model field with the addition of db_column. The migration drops and recreates the same constraints even when nothing really changed.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13240",
        "summary": "The issue is about the ImproperlyConfigured error raised during settings initialization when SECRET_KEY is not provided. The user suggests that the error should be raised when the setting is accessed instead of during initialization.",
        "category": "Feature Request",
        "tags": [
            "Settings",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13250",
        "summary": "The issue is about the inability of SQLite to test containment of JSONField, especially for nested structures. The current implementation only works for basic examples.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13251",
        "summary": "The issue is about a TypeError raised when filtering on a model with a field named 'negate'. The user suggests that 'negate' is not documented as a reserved argument for .filter().",
        "category": "Bug",
        "tags": [
            "Models",
            "Filtering",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13265",
        "summary": "The issue is about a crash that occurs when AlterOrderWithRespectTo() with ForeignKey is used and '_order' is included in Index(). The user suggests that AlterOrderWithRespectTo should proceed before AddIndex of '_order'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "ForeignKey",
            "Index"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13267",
        "summary": "The issue is about a TypeError raised when trying to instantiate an abstract model with a foreign key. The user suggests that this might be an undocumented backwards-incompatible change.",
        "category": "Bug",
        "tags": [
            "Models",
            "Abstract Model",
            "ForeignKey",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13301",
        "summary": "The createsuperuser command in interactive mode suggests a default username that is validated against the default database, not the database passed to the command. This causes issues when using multiple databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "Command",
            "User Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13315",
        "summary": "Passing a Q object as limit_choices_to on a ForeignKey field involving a join can result in duplicate options in the form.",
        "category": "Bug",
        "tags": [
            "Form",
            "ForeignKey",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13321",
        "summary": "Decoding an invalid session data results in a crash. This issue was encountered after upgrading to Django 3.1 and seems to be related to old sessions.",
        "category": "Bug",
        "tags": [
            "Session",
            "Decoding",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13325",
        "summary": "Some operations in cache backends are not properly validated, which could potentially lead to data loss in the unvalidated delete() and delete_many() operations.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Validation",
            "Data Loss"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13341",
        "summary": "TemplateView pushes self.kwargs to the context, which is inconsistent with other views like ListView. This causes a crash when filtering.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "ListView",
            "Context"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13343",
        "summary": "A FileField with a callable storage parameter should not evaluate the callable during deconstruction. However, the current behavior is to inline the evaluated Storage into the deconstructed FileField.",
        "category": "Bug",
        "tags": [
            "FileField",
            "Storage",
            "Deconstruction"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13279",
        "summary": "The issue is about the inability to decode session data during the transition to Django 3.1 due to a change in the format for session data. The proposed solution is to use the legacy encode() when DEFAULT_HASHING_ALGORITHM == 'sha1'.",
        "category": "Bug",
        "tags": [
            "Session",
            "Data Decoding",
            "Transition",
            "Django 3.1"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13281",
        "summary": "The issue reports a change in behavior of Foreign Key (FK) fields when copying model instances during an upgrade from Django 1.11.x to 2.0/2.2. The problem is that the copied model instance does not retain the original FK field values.",
        "category": "Bug",
        "tags": [
            "Foreign Key",
            "Model Instance",
            "Upgrade",
            "Django 2.x"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13287",
        "summary": "The issue is about a crash that occurs when an app with default_app_config and without apps.py or with an empty apps.py. The error is an UnboundLocalError, indicating that a local variable 'app_config_name' is referenced before assignment.",
        "category": "Bug",
        "tags": [
            "App Configuration",
            "Crash",
            "apps.py",
            "default_app_config"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13295",
        "summary": "The issue is about a silent failure when saving a non-concrete field with update_fields. The problem is that the model is saved without saving the non-concrete field and no error is emitted.",
        "category": "Bug",
        "tags": [
            "Non-concrete Field",
            "Model Saving",
            "update_fields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13297",
        "summary": "The issue is about a crash that occurs when filtering SimpleLazyObjects returned by kwargs in TemplateView.get_context_data(). The problem is specific to Django 3.1 and does not occur in Django 3.0.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "get_context_data",
            "SimpleLazyObjects",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13300",
        "summary": "The issue is a feature request to use 'EXISTS(SELECT 1 ...)' for subqueries in Django's QuerySet calls. The requester suggests that this change could make queries easier to debug.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "Subqueries",
            "EXISTS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13344",
        "summary": "The first middleware in a Django 3.1 project with an async server receives a coroutine as its response parameter, while all other middlewares receive a django.http.response.HttpResponse object. This issue has caused problems in the django-cors-headers package.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "ASGI",
            "HttpResponse"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13346",
        "summary": "The __in operator does not work as expected on models.JSONField in MySQL, Oracle, and SQLite. The issue is that the __in operator does not return the same queryset as other filters.",
        "category": "Bug",
        "tags": [
            "Database",
            "JSONField",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13347",
        "summary": "SafeExceptionReporterFilter fails to sanitize settings if the keys of the dictionary are not strings. This issue arises when trying to apply the hidden_settings regex to the key before attempting to recurse into the value.",
        "category": "Bug",
        "tags": [
            "SafeExceptionReporterFilter",
            "Settings",
            "Sanitization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13350",
        "summary": "Temporary files do not get deleted when an upload request is canceled by the client. This issue occurs when the browser is closed before the upload is finished.",
        "category": "Bug",
        "tags": [
            "Temporary Files",
            "Upload Request"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13354",
        "summary": "The MigrationOptimizer mangles operation order if the app name contains uppercase letters. This issue occurs when creating a new project and an app with uppercase letters in the app name.",
        "category": "Bug",
        "tags": [
            "MigrationOptimizer",
            "App Name",
            "Uppercase Letters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13355",
        "summary": "The fix for ticket #30153 has unintended consequences on the performance of Media.__add__. If the number of Media objects added grows beyond a certain point, the performance of all subsequent Media.__add__ calls becomes terrible.",
        "category": "Bug",
        "tags": [
            "Media",
            "Performance",
            "Addition"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13363",
        "summary": "The issue is about the TruncDate and TruncTime functions in Django not correctly handling timezone information passed in as a parameter. The functions are supposed to use the passed in timezone info object, but they are instead using the return value from get_current_timezone_name() unconditionally.",
        "category": "Bug",
        "tags": [
            "Timezone",
            "Database",
            "Models",
            "Datetime"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13369",
        "summary": "The issue is about a FieldError exception that occurs when a query is executed. The error message suggests that the expression contains mixed types: IntegerField, AutoField and that the output_field must be set. This issue is identified as a regression bug as the query used to work in Django 3.1.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "FieldError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13371",
        "summary": "The issue is about the inability to pickle the namedtuple-s resulting from the new named parameter of QuerySet.values_list() released in Django 2.0. This is causing problems with the cacheops package.",
        "category": "Bug",
        "tags": [
            "Models",
            "QuerySet",
            "Pickle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13386",
        "summary": "The issue is about the max-age attribute of a cookie which is supposed to be an integer. The user suggests that the max_age parameter of set_cookie() should be converted to an integer to avoid problems with cookie parsers that don't handle decimals gracefully.",
        "category": "Feature Request",
        "tags": [
            "Cookies",
            "HTTP",
            "Conversion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13401",
        "summary": "The issue is about the equality comparison of fields in abstract models. When fields of two models inheriting from the same abstract model are compared, they are considered equal, which is not intuitive. The user suggests adjusting the __eq__, __hash__, and __lt__ methods to consider the model of the field.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Equality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13406",
        "summary": "The issue is about a crash that occurs when a queryset that combines values and annotate for a GROUP BY functionality is recreated from a pickled query. Instead of returning the result as a list of dicts, Django tries to create model instances from them, which fails due to the wrong data structure.",
        "category": "Bug",
        "tags": [
            "Models",
            "QuerySet",
            "Pickle",
            "Crash"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13410",
        "summary": "The posix version of locks in django/core/files/locks.py has a bug where it always returns False, even when the lock is successfully acquired. This is due to the fact that the cpython fcntl module returns None if successful, and raises an OSError to indicate failure.",
        "category": "Bug",
        "tags": [
            "Locks",
            "Posix",
            "fcntl"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13413",
        "summary": "The BooleanFieldListFilter does not respect field choices. The filter text is not modified to fit the choices parameter.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation",
            "BooleanFieldListFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13417",
        "summary": "The QuerySet.ordered property is incorrect for GROUP BY queries on models with Meta.ordering. The property remains truthy even if the resulting SQL query will not have an ORDER BY clause.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Meta.ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13426",
        "summary": "A TypeError exception occurs when performing a union operation on querysets with ordering. The error occurs when trying to iterate over a 'NoneType' object.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Union",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13431",
        "summary": "The QuerySet.aggregate() function mixes annotated fields names, causing an OperationalError. The error occurs because the SQL query generated by Django is incorrect.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Aggregate",
            "Annotation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13447",
        "summary": "The issue requests for the model class to be added to the app_list context in order to manipulate the app_list in a custom admin view. It also requests for the _build_app_dict method to be made public.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Model Class",
            "app_list"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13448",
        "summary": "The issue reports a crash when running tests with the 'TEST': {'MIGRATE': False} database setting in Django 3.1. The error is related to the 'django_admin_log' table not existing.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13449",
        "summary": "The issue reports a crash when using the Lag() function with a DecimalField on a SQLite database. The error is related to the SQL query syntax.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Lag Function"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13454",
        "summary": "The issue reports a crash when using the EmptyFieldListFilter with a GenericForeignKey and GenericRelation. The error is related to the 'empty_strings_allowed' attribute not existing for the 'GenericForeignKey' object.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "GenericForeignKey",
            "GenericRelation",
            "EmptyFieldListFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13458",
        "summary": "The issue reports incorrect error messaging when both min_num and max_num are equal and both validate_min and validate_max are set to true in Django Formset.",
        "category": "Bug",
        "tags": [
            "Formset",
            "Validation",
            "Error Messaging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13460",
        "summary": "The issue reports a string formatting error when passing floats as values in {% blocktrans %} tags. The error is related to gettext string formatting failing when a float is passed.",
        "category": "Bug",
        "tags": [
            "Template",
            "String Formatting",
            "blocktrans"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13466",
        "summary": "The issue reports that required mutually exclusive groups don't work with boolean arguments in management commands. The error is related to the 'ignored explicit argument' error when passing a boolean argument.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "Boolean Arguments",
            "Mutually Exclusive Groups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13528",
        "summary": "The issue is about incorrect separators when chaining floatformat to intcomma in some locales. The user is trying to convert a decimal to a float in a template, but it doesn't give the expected output.",
        "category": "Bug",
        "tags": [
            "Template",
            "Localization",
            "Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13530",
        "summary": "The issue is about using KeyTransform for JSONField which produces invalid SQL in various places. The user is using Postgres for DB and the issue is with the ordering attribute of ArrayAgg function.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "JSONField",
            "KeyTransform",
            "ArrayAgg"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13537",
        "summary": "The issue is about manage.py dbshell not respecting the database_options. The user is having encoding issues when running an utf8 database with utf8 as charset in database_options.",
        "category": "Bug",
        "tags": [
            "Database",
            "Encoding",
            "dbshell",
            "database_options"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13551",
        "summary": "The issue is about changing user's email which could invalidate password reset tokens. The user suggests that the password reset email's token should be rejected when the email address is changed.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "Email",
            "Password Reset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13553",
        "summary": "The issue is about QuerySet.order_by() crashing on union() queryset with a single non-empty query. The user is getting a database error when both querysets are ordered.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "order_by",
            "union"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13556",
        "summary": "The issue is about allowing null values while registering function on transaction on_commit. The user is getting a TypeError when trying to register None.",
        "category": "Bug",
        "tags": [
            "Database",
            "Transaction",
            "on_commit"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13484",
        "summary": "The issue is about a crash that occurs when a pickled query with FilteredRelation used in aggregation is recreated. The user is pickling query objects for later re-evaluation but encounters an error when trying to rerun a query that contains a FilteredRelation inside a filter.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "FilteredRelation",
            "Pickle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13490",
        "summary": "The issue is about an error that occurs when trying to retrieve a specific object from a QuerySet resulting from a difference operation. The user is unable to retrieve a specific object from the QuerySet resulting from q1.difference(q2).",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Difference Operation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13495",
        "summary": "The issue is about the TruncDay() function not taking tzinfo param into account when DateField() is used as output_field. The user is trying to use the TruncDay() function but finds that timezone conversion is missing from the generated SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "TruncDay Function",
            "Timezone",
            "DateField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13512",
        "summary": "The issue is about the Django admin not displaying unicode characters properly in JSONFields. When editing a JsonField which contains Chinese characters in Django admin, it appears in ASCII characters.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "JSONFields",
            "Unicode Characters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13513",
        "summary": "The issue is about the debug error view not respecting exc.__suppress_context__ (PEP 415). The user raises an exception in a view, but the debug error view still shows the RuntimeError even though the raise is from None.",
        "category": "Bug",
        "tags": [
            "Debug Error View",
            "Exception Handling",
            "PEP 415"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13516",
        "summary": "The issue is about the flush() function on self.stdout/stderr management commands not working as expected. The user notes that during a long migration, no relevant information is printed to stderr until the end.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "flush() Function",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13560",
        "summary": "The issue is about the ProtectedError/RestrictedError raised from Collector.collect containing iterators, which results in non-informative exception representation in Sentry.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13568",
        "summary": "The issue is about the system check for USERNAME_FIELD with total UniqueConstraints in the auth.E003 system. The user suggests extending the system check to check for the presence of USERNAME_FIELD in Model._meta.constraints.",
        "category": "Feature Request",
        "tags": [
            "System Check",
            "Models",
            "Authentication"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13569",
        "summary": "The issue is about the unexpected breaking of queryset aggregation when using order_by('?'). The user suggests a patch in the SQL compiler to fix the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13578",
        "summary": "The issue is about the ManagementForm exception in case of bad prefix being difficult to understand. The user suggests including form._errors in output for easier debugging.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13585",
        "summary": "The issue is about the incompatibility of password reset tokens due to the change in hashing between Django 3.0 and 3.1. The user suggests a fix to support tokens with older values.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "Password Reset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13589",
        "summary": "The issue is about unexpected data loss in bulk_create() when saving parent object after setting on child. The user suggests a fix to allow the main instance to 'reach into' its related objects and set the foreign key field.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Bulk Create"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13590",
        "summary": "Upgrading Django from 2.2 to 3.0 causes named tuples used as arguments to __range to error. This is due to a change in how Django resolves lookups and reconstitutes tuples. The issue is complex due to the need to understand the changes in Django's internal behavior between versions.",
        "category": "Bug",
        "tags": [
            "Upgrade",
            "Database",
            "Queryset Filters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13592",
        "summary": "ManyToManyField does not respect the PositiveBigIntegerField in m2m intermediate table. This leads to out of bound error when using large numbers for ids. The issue is related to how Django creates relation tables in PostgreSQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13606",
        "summary": "The current logic for excluding a multi-valued relationship can be hard for some query planners to optimize and tricky to get right due to how the IN operator treats NULL values. The suggestion is to use NOT EXISTS function instead of NOT IN.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQL",
            "Query Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13607",
        "summary": "BaseFormSet.is_valid() produces ValidationError when there is no management form. The issue is related to how Django handles form validation and the suggestion is to change the behavior of BaseFormSet.is_valid() to return False instead of raising an exception.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13615",
        "summary": "Add warning in makemessages command if the localecode with `l` flag is not correct. The suggestion is to normalize the directory name to something that would just work regardless of the variations in the locale code.",
        "category": "Feature Request",
        "tags": [
            "Localization",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13616",
        "summary": "Unclear error raised by makemessages when /locale does not exist under app directory. The issue is related to the error message produced by Django's makemessages command and the suggestion is to improve the error message to make it more informative.",
        "category": "Bug",
        "tags": [
            "Localization",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13617",
        "summary": "The issue reports incorrect results from complex queries after patch #31566 in Django 3.0.7. The problem seems to be related to the GROUP BY clause and the reevaluation of subqueries in the SELECT statement.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Subquery",
            "GROUP BY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13620",
        "summary": "The issue is about the lack of support for list arguments inside exclusive required groups in Django's command-line management utility. The user is unable to pass a list of integers as an argument to a command.",
        "category": "Feature Request",
        "tags": [
            "Command Line",
            "Arguments",
            "Management Utility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13658",
        "summary": "The issue reports that ManagementUtility in Django does not pass the already-computed 'prog' argument when instantiating CommandParser. This causes problems in environments where sys.argv[0] is incorrectly None.",
        "category": "Bug",
        "tags": [
            "ManagementUtility",
            "CommandParser",
            "sys.argv"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13660",
        "summary": "The issue is about the 'shell' command in Django crashing when passing Python code with functions using the '-c' option. The problem seems to be related to the usage of 'exec' without passing a dictionary containing a minimal set of globals.",
        "category": "Bug",
        "tags": [
            "Shell Command",
            "Python Code",
            "Functions",
            "exec"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13665",
        "summary": "The issue reports that the database creation backend in Django does not use the base_manager to serialize the database. This causes problems when a custom manager that filters out some records is used.",
        "category": "Bug",
        "tags": [
            "Database",
            "Serialization",
            "Custom Manager"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13667",
        "summary": "The issue is about the lack of optimization in Django's QuerySet.exists() method when used with .union().exists(). The user suggests a way to optimize the generated SQL for better performance.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "exists",
            "union",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13693",
        "summary": "The issue is about a crash that occurs when running 'django-admin runserver' on Windows with Python version less than 3.8. The error is due to the subprocess.Popen function expecting a string argument, but receiving a WindowsPath object instead.",
        "category": "Bug",
        "tags": [
            "Windows",
            "Python Compatibility",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13708",
        "summary": "This issue proposes the addition of a 'durable' flag to the transaction.atomic() function in Django. This flag would ensure that all database operations within the wrapped block have been committed at the end of the block.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Transactions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13710",
        "summary": "The issue is about the inconsistency in Django's handling of verbose_name_plural for Inline classes in admin views. The user proposes that verbose_name_plural for an Inline class should by default be based on the verbose_name for an Inline if that is specified.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13714",
        "summary": "The issue is about a misleading error message when applying migrations on an installation using spatialite backend where the path to the database file does not exist. The error message suggests that SQLite does not support JSONFields, which is not the actual problem.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13722",
        "summary": "This issue proposes a new feature that adds a method on InlineModelAdmin for providing initial data for the inline formset. The user suggests that this could be implemented to use GET parameters like get_changeform_initial_data.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Formsets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13741",
        "summary": "The issue is about the ReadOnlyPasswordHashField in the UserChangeForm. The user suggests that the 'disabled' property could be set to True by default on the ReadOnlyPasswordHashField to prevent accidental changes to the password value.",
        "category": "Feature Request",
        "tags": [
            "Forms",
            "User Authentication"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13670",
        "summary": "The issue is about the inconsistency in Django's dateformat function when handling years less than 1000. The 'y' format character does not print leading zeros, which is not consistent with Python's datetime module and PHP's handling of the same character.",
        "category": "Bug",
        "tags": [
            "Dateformat",
            "Datetime",
            "PHP",
            "Python"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13671",
        "summary": "The issue is about the behavior of Django's cache.get_or_set() function. The function does not cache a None result, which is not consistent with its docstring. The user suggests a modification to the function to cache None results.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Functionality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13682",
        "summary": "The issue is about the error messages when forgetting to call .as_view() on a Class-Based View (CBV) in Django. The error message is not clear and does not include any of the user's own code. The user suggests an improvement to the error message.",
        "category": "Bug",
        "tags": [
            "Error Messages",
            "Class-Based Views",
            "URLs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13684",
        "summary": "The issue is about the misleading error message when loading a database backend fails with ImportError in Django. The error message suggests that the backend is not available, while the actual issue is an ImportError within the backend itself.",
        "category": "Bug",
        "tags": [
            "Database",
            "Backend",
            "ImportError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13689",
        "summary": "The issue is about the behavior of Django when grouping on an ExpressionWrapper in an aggregation. The expression is omitted from the group by clause, which is not the expected behavior.",
        "category": "Bug",
        "tags": [
            "Aggregation",
            "Grouping",
            "ExpressionWrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13691",
        "summary": "The issue is about an error when performing a JSON path lookup in SQLite when the value is numeric. The user gets a JSON decode error, which does not occur with other data types or databases.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "JSON",
            "Path Lookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13743",
        "summary": "This issue is about long stack traces in the development server for Windows users. The issue suggests that ConnectionAbortedError should be treated as a broken pipe error in the development server to fix this problem.",
        "category": "Bug",
        "tags": [
            "Development Server",
            "Windows",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13744",
        "summary": "This issue suggests deprecating the MemcachedCache backend in Django 3.2 and removing it in Django 4.1 because python-memcached is not maintained anymore and it causes difficulties in fixing some issues.",
        "category": "Feature Request",
        "tags": [
            "Cache",
            "Deprecation",
            "Backend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13757",
        "summary": "This issue is about the incorrect behavior of __isnull=True on a KeyTransform in SQLite and Oracle. The issue suggests that the query should only match objects that do not have the key, but currently, it also matches objects that have the key with the value null.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Oracle",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13768",
        "summary": "This issue suggests logging exceptions handled in Signal.send_robust() because currently, Django doesn't have any log messages for exceptions raised in receivers.",
        "category": "Feature Request",
        "tags": [
            "Logging",
            "Signal",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13773",
        "summary": "This issue is about a crash in the squashmigrations optimizer when fields' names are swapped using a temporary name. The issue suggests that the root cause is that RenameField allows itself to optimize through other RenameField operations that reference old_name.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Optimizer",
            "Field Renaming"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13774",
        "summary": "This issue is about the prefetch_related_objects() function not working for reused model instances. The issue suggests that the function does not set the to_attr on all of the instances if the first instance in the list already has it set.",
        "category": "Bug",
        "tags": [
            "Model",
            "Prefetch",
            "Instance Reuse"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13786",
        "summary": "The squashmigrations command does not unset model options when optimizing CreateModel and AlterModelOptions. This issue is related to Django's database migrations functionality.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Model Options"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13791",
        "summary": "The parse_duration() function ignores the sign of a timedelta string if the input string only contains days. This issue is related to Django's date parsing functionality.",
        "category": "Bug",
        "tags": [
            "Date Parsing",
            "ISO 8601",
            "Timedelta"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13794",
        "summary": "The add filter is unable to concatenate strings with a lazy string. This issue is related to Django's template filters functionality.",
        "category": "Bug",
        "tags": [
            "Template Filters",
            "String Concatenation",
            "Lazy String"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13797",
        "summary": "The dumpdata command does not support fixtures compression, even though the loaddata command does. This issue is related to Django's data dumping functionality.",
        "category": "Feature Request",
        "tags": [
            "Data Dumping",
            "Fixtures Compression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13800",
        "summary": "Django uses an escape-character in cookie-Values which is not supported in the RFC 6265. This issue is related to Django's cookies handling functionality.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "RFC 6265"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13807",
        "summary": "The loaddata command crashes on SQLite when table names are SQL keywords. This issue is related to Django's data loading functionality.",
        "category": "Bug",
        "tags": [
            "Data Loading",
            "SQLite",
            "SQL Keywords"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13808",
        "summary": "The issue is about allowing PostgreSQL database connections to use PostgreSQL services, similar to MySQL's options files. The user suggests adding this feature to the DATABASES config in Django, which would make it easier to move between different environments without repeating the database name.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "PostgreSQL",
            "Configuration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13809",
        "summary": "The issue suggests adding a --skip-checks option to the runserver command in Django. This would make it consistent with other management commands performing system checks and would be beneficial for those who prefer to have checks enabled exclusively in CI/CD, rather than waiting for each project reload during development.",
        "category": "Feature Request",
        "tags": [
            "Command",
            "Runserver",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13810",
        "summary": "The issue reports a problem with MiddlewareNotUsed leaving undesired side effects when loading middleware in an ASGI context. The user experienced issues when working with ASGI, django-debug-toolbar, and their own middleware. The problem seems to be related to the handling of MiddlewareNotUsed in the Django core handlers.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "ASGI",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13814",
        "summary": "The issue reports that raising InvalidTemplateLibrary completely masks out the real exception in get_package_libraries, making it difficult to debug application issues. The user suggests not handling the exception in the first place since it only raises another type and the inner exception loses the stack trace.",
        "category": "Bug",
        "tags": [
            "Template",
            "Error Handling",
            "Debugging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13820",
        "summary": "The issue is a feature request to improve the specificity of the migration loader's check for and rejection of PEP-420 namespace packages. The user wants to make the existing check more compliant with Python's documented import API, which would remove one impediment to using Django in frozen Python environments that do not set __file__ on regular packages by default.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Loader",
            "Python Environment"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13821",
        "summary": "The issue suggests dropping support for SQLite versions older than 3.9.0 in Django. The user points out that indexes on expressions and the SQLITE_ENABLE_JSON1 compile-time option are supported on SQLite 3.9.0+.",
        "category": "Feature Request",
        "tags": [
            "SQLite",
            "Database",
            "Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13822",
        "summary": "Django raises an error during the creation of a database migration if two models with the same name refer to the same model in a ManyToManyField. This issue is particularly problematic in large projects with many apps that have models with the same name.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13824",
        "summary": "Django adds an unnecessary '/' prefix to the STATIC_URL setting when it is a URL. This issue is due to Django's URLValidator not recognizing the URL as valid.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Settings",
            "STATIC_URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13837",
        "summary": "Django's autoreload utility only detects if Python was launched as 'python -m django'. This issue aims to remove an impediment to creating Django-based command-line utilities that have their own '__main__' sub-module while overriding Django's built-in management commands.",
        "category": "Feature Request",
        "tags": [
            "Autoreload",
            "Command-line Utilities",
            "Management Commands"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13841",
        "summary": "Certain Django modules use '__file__' at the module level, which causes issues in 'frozen' Python environments that do not set all modules' '__file__' variable. This issue proposes to access '__file__' lazily rather than at the module level.",
        "category": "Bug",
        "tags": [
            "Python Environments",
            "__file__",
            "Module Level"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13884",
        "summary": "When changing the language and the current URL parameter includes a parameter value with an encoded '&', the redirect response from set_language unquotes the URL and produces an incorrect URL.",
        "category": "Bug",
        "tags": [
            "URL Params",
            "URL Encoding",
            "set_language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13886",
        "summary": "The current system checks do not cover invalid model fields in functional indexes. This issue proposes to add system checks for invalid model field names for functional indexes in Meta.indexes.",
        "category": "Feature Request",
        "tags": [
            "System Checks",
            "Model Fields",
            "Functional Indexes",
            "Meta.indexes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13992",
        "summary": "The issue is about the unexpected behavior of the delete() function when used with distinct() in Django's ORM. The user expected to delete distinct comments from each post but ended up deleting all comments.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Database",
            "Delete",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13995",
        "summary": "The user requests that properties decorated with @cached_property be included in the models section of the admindocs page, which currently they are not.",
        "category": "Feature Request",
        "tags": [
            "Admin Docs",
            "Models",
            "Cached Property"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14007",
        "summary": "The issue is about the from_db_value hook not being called for returning_fields on insert when using a subclass of BigAutoField. This results in a plain integer being returned instead of a wrapper class.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "BigAutoField",
            "from_db_value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14011",
        "summary": "The issue is about the reappearance of a bug where not all database connections are closed after each thread in LiveServerTestCase's ThreadedWSGIServer, leading to an OperationalError.",
        "category": "Bug",
        "tags": [
            "Database",
            "LiveServerTestCase",
            "ThreadedWSGIServer",
            "Connections"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14014",
        "summary": "The issue is about the introspection not returning column order for unique constraints on SQLite.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Introspection",
            "Unique Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14016",
        "summary": "The issue is about a TypeError that occurs when applying the | operator to a Q object that references a non-pickleable type of object such as dict_keys.",
        "category": "Bug",
        "tags": [
            "Q Object",
            "TypeError",
            "Pickle",
            "Operator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14017",
        "summary": "The issue reports a TypeError when using the & operator with Q(...) & Exists(...) in Django's ORM. The issue suggests that the & operator should be commutative on Q-Exists pairs, but it's not.",
        "category": "Bug",
        "tags": [
            "Database",
            "ORM",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14019",
        "summary": "The issue reports inconsistency in the __repr__ methods of Index, UniqueConstraint, ExclusionConstraint, and CheckConstraint in Django. The request is to make the formatting of these methods consistent.",
        "category": "Bug",
        "tags": [
            "Database",
            "Index",
            "Constraint",
            "Consistency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14026",
        "summary": "The issue reports that the default value for the Sum aggregation function in Django's ORM is NULL when there are no values to sum. The request is to change the default value to 0 for better sorting and comparison.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "ORM",
            "Aggregation",
            "Default Value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14030",
        "summary": "The issue reports that the login and logout views in Django's admin site are using the never_cache decorator without the method_decorator. The request is to use the method_decorator for these views.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Decorator",
            "Login",
            "Logout"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14031",
        "summary": "The issue reports that the autocomplete feature for inherited models in Django's admin site is broken due to a closed ticket #29138. The autocomplete works for the parent model but not for the inherited model.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Autocomplete",
            "Inherited Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14034",
        "summary": "The issue reports that the MultiValueField in Django forms ignores the required value of a sub field. The issue suggests that the form should return False when one of the sub fields is set as required but is passed an empty value.",
        "category": "Bug",
        "tags": [
            "Forms",
            "MultiValueField",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13915",
        "summary": "The issue is about dropping support for Python 3.6 and 3.7 in Django 3.2 LTS, which is supported until April 2024. The end of life for Python 3.6 is December 2021 and for Python 3.7 is June 2023.",
        "category": "Feature Request",
        "tags": [
            "Python Version",
            "Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13924",
        "summary": "The issue is about the changes introduced in c86a3d80a25acd1887319198ca21a84c451014ad to address #29721. The changes fail to account for the possibility of the schema editor accumulation of deferred SQL which is run at SchemaEditor.__exit__ time.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13925",
        "summary": "The issue is about models which inherit from other models and should inherit the primary key. However, in Django 3.2 alpha, when running make_migrations, an error message is received indicating that auto-created primary keys are being used when they should not be.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13933",
        "summary": "The issue is about ModelChoiceField not showing the value of the invalid choice when raising a validation error. This is in contrast with ChoiceField and others.",
        "category": "Bug",
        "tags": [
            "ModelChoiceField",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13952",
        "summary": "The issue is about the migrate command taking a --verbosity flag that is passed down to emit_pre_migrate_signal and emit_post_migrate_signal functions. However, these are not provided which stdout the output should be directed to.",
        "category": "Bug",
        "tags": [
            "Migrate",
            "Signals",
            "Stdout"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13964",
        "summary": "The issue is about a model with a foreign key relation to another model that has a non-auto CharField as its primary key. If the relation is initialized on the parent with an empty instance that does not yet specify its primary key, and the primary key is subsequently defined, the parent does not 'see' the primary key's change.",
        "category": "Bug",
        "tags": [
            "Models",
            "Foreign Key",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14151",
        "summary": "The issue is about Django's CsrfViewMiddleware assuming that the HTTP referer header is valid when checking it. It doesn't handle the case of urlparse() raising a ValueError for certain URLs.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "URL Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14155",
        "summary": "The issue is about the ResolverMatch.__repr__() not handling functools.partial() nicely. When a partial function is passed as the view, the __repr__ shows the func argument as functools.partial which isn't very helpful.",
        "category": "Bug",
        "tags": [
            "Functionality",
            "Partial Functions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14164",
        "summary": "The issue is about the to_locale function not being idempotent. This breaks using django.utils.translation.override with a locale code like pt_BR or zh_Hans.",
        "category": "Bug",
        "tags": [
            "Translation",
            "Locale"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14169",
        "summary": "The issue is about the extra dot in cloned test database file names on SQLite when using --parallel flag. The cloned file names are created with two dots instead of one.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Test"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14170",
        "summary": "The issue is about the query optimization in YearLookup breaking filtering by '__iso_year'. The optimization to use BETWEEN instead of the EXTRACT operation in YearLookup is also registered for the '__iso_year' lookup, which breaks the functionality.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query Optimization",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14179",
        "summary": "The issue is about handling request.get_host() raising DisallowedHost in CsrfViewMiddleware._origin_verified(). Currently, it doesn't handle request.get_host() raising DisallowedHost.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "Host Verification"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14043",
        "summary": "The issue is about the dbshell management commands that carry the risk of leaking passwords through process information. The user proposes a solution to generate a temporary file for PostgreSQL and MySQL to prevent password leakage.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Security",
            "PostgreSQL",
            "MySQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14053",
        "summary": "The issue is about the HashedFilesMixin's post_process() function yielding the same original filename multiple times back to collectstatic's collect(). This causes incorrect stats and duplicate work.",
        "category": "Bug",
        "tags": [
            "File Handling",
            "HashedFilesMixin",
            "collectstatic"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14056",
        "summary": "The issue is about the collectstatic command failing when the STATICFILES_DIRS setting contains references to directories which do not exist. The user proposes to log a warning instead of stopping the whole command.",
        "category": "Feature Request",
        "tags": [
            "collectstatic",
            "File Handling",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14059",
        "summary": "The issue is about the ability to create a model instance with conflicting args and kwargs value for the same field. The user provides a test case to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Model",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14071",
        "summary": "The issue is about the raw_id_field check admin.E002 not catching .attname mis-references. The user suggests a solution to check field.name == field_name on field retrieval success.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Validation",
            "raw_id_fields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14077",
        "summary": "The issue is about QuerySet.values()/values_list() with JSONField returning integers instead of booleans on SQLite. The user provides a test case to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14089",
        "summary": "The issue is about the inability to call the reversed() function on an OrderedSet in Django. The user suggests adding a __reversed__() method to OrderedSet to make it reversible.",
        "category": "Feature Request",
        "tags": [
            "OrderedSet",
            "Reversible"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14109",
        "summary": "The issue is about changing the automatic migration naming from date-based to operation-based. The user suggests that migrations should always be named based on the operations they contain, rather than the current date.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Naming"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14122",
        "summary": "The issue is about the improper handling of Meta.ordering fields in the GROUP BY clause, leading to incorrect aggregation. The user suggests that the issue was not properly fixed in a previous commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "Meta.ordering",
            "GROUP BY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14124",
        "summary": "The issue is about a SystemCheckError that occurs when handler500 is set as a Class-Based view. The user suggests a fix in the _check_custom_error_handlers function to check if the handlers are function-based or class-based.",
        "category": "Bug",
        "tags": [
            "Class-Based View",
            "handler500",
            "SystemCheckError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14140",
        "summary": "The issue is about a crash that occurs when combining Q() objects with boolean expressions. The user suggests removing the special case for single-child Q objects during deconstruction.",
        "category": "Bug",
        "tags": [
            "Q Objects",
            "Boolean Expressions",
            "Deconstruction"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14149",
        "summary": "The issue is about the need to validate the type of ALLOWED_HOSTS. The user suggests adding a new system check to notify the developer about possible improper configuration if ALLOWED_HOSTS is initialized with a string.",
        "category": "Feature Request",
        "tags": [
            "ALLOWED_HOSTS",
            "Validation",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14271",
        "summary": "The issue reports a failure in Django 3.2 when trying to combine two querysets in a subquery. The error message indicates that there is no such column: V0.user_id.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14282",
        "summary": "The issue reports that the 'makemigrations' management command cannot be run without a SECRET_KEY. The user believes this issue was intended to be fixed in issue #29324.",
        "category": "Bug",
        "tags": [
            "Makemigrations",
            "SECRET_KEY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14291",
        "summary": "The issue reports that the caches.W002 check does not support tuples in STATICFILES_DIRS. The check fails with a TypeError when a STATICFILES_DIRS entry is provided as a tuple.",
        "category": "Bug",
        "tags": [
            "Caches",
            "STATICFILES_DIRS",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14309",
        "summary": "The issue reports that combining an empty Q object with a negated Exists lookup un-negates the Exists lookup. The user noticed this issue while trying to work around issue #32651/ #32548.",
        "category": "Bug",
        "tags": [
            "Q object",
            "Exists lookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14311",
        "summary": "The issue reports that autoreloading of 'python -m custom_module runserver' is not allowed. The user believes that the original fix only attempted to deal with -m foo.bar where bar is a package and __main__.py exists under foo/bar.",
        "category": "Bug",
        "tags": [
            "Autoreloading",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14313",
        "summary": "The issue reports that deleting objects after searching related many to many field crashes the admin page. The error message indicates that delete() cannot be called after .distinct().",
        "category": "Bug",
        "tags": [
            "Admin page",
            "Delete",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14182",
        "summary": "The issue is about Django's Round function which currently only supports rounding to the nearest integer. The user suggests adding support for a precision argument to the Round function, as all backends natively supported by Django support a second argument to Round.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Math Functions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14199",
        "summary": "The issue reports a crash when trying to annotate anything to a decimal field in SQLite. Django passes a string to create_decimal_from_float function which causes the crash.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Annotation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14238",
        "summary": "The issue is about Django crashing when setting DEFAULT_AUTO_FIELD to a subclass of BigAutoField or SmallAutoField. The error message suggests that the primary key referred by DEFAULT_AUTO_FIELD must subclass AutoField.",
        "category": "Bug",
        "tags": [
            "Database",
            "AutoField",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14241",
        "summary": "The issue reports a crash when using QuerySet.values() or values_list() on combined querysets ordered by unannotated columns. The problem seems to be related to a change in Django 3.2.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Union",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14266",
        "summary": "The issue reports a crash in CookieStorage for contrib.messages after upgrading to Django 3.2. The crash occurs when trying to decode a previously stored cookie.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "Messages",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14267",
        "summary": "The issue reports a crash when combining Q() objects with boolean expressions. The problem seems to be related to how Q objects with 1 child are treated differently during deconstruct.",
        "category": "Bug",
        "tags": [
            "Database",
            "Q Objects",
            "Boolean Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14315",
        "summary": "The PostgreSQL client returns an empty dictionary instead of None for the environment, causing os.environ to not be used and an empty environment to be passed to subprocess. This bug was introduced in a specific commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL",
            "Environment Variables"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14324",
        "summary": "The migration autodetector no longer adds a model name to the related_name attribute for self-referential ManyToManyField, causing a regression.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14334",
        "summary": "The LocaleMiddleware is not properly recognizing 'zh-Hant-HK' from the accept-language header if both 'zh-hans' and 'zh-hant' are in settings.LANGUAGES, choosing the first one instead of the second.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Localization",
            "Language Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14336",
        "summary": "Django uses two different cases when generating aliases for subqueries, which could cause failures on databases with case sensitive column names.",
        "category": "Bug",
        "tags": [
            "Database",
            "Subqueries",
            "Case Sensitivity"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14341",
        "summary": "The database cache.delete uses the cursor after it is closed, which is against the DB API 2.0 spec that states the cursor will be unusable from that point forward.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Cursor"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14349",
        "summary": "URLValidator tests are failing on Python versions patched for bpo-43882 due to changes in URL splitting behavior. Django rejects URLs based on the split URL components, but the patch strips all instances of LF, CR, and tab characters before splitting.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Python Version",
            "Test Failure"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14404",
        "summary": "The catch_all_view function does not support FORCE_SCRIPT_NAME, resulting in incorrect redirects. A patch has been proposed.",
        "category": "Bug",
        "tags": [
            "Redirect",
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14407",
        "summary": "Changes in Django 3.2 cause the development server to reload on template file changes, which can disrupt template authoring. Reverting to Django 3.1 fixes the issue.",
        "category": "Bug",
        "tags": [
            "Dev Server",
            "Template",
            "Autoreload"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14411",
        "summary": "In the admin console, the label for the ReadOnlyPasswordHashWidget points to a non-labelable element, which is incorrect as the widget just renders text, not an input.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Widget",
            "Label"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14416",
        "summary": "In a multi-lingual site using LocaleMiddleware, redirects adding a language code to a path can be inappropriately cached by HTTP caches, causing an incorrect language to be displayed.",
        "category": "Bug",
        "tags": [
            "LocaleMiddleware",
            "HTTP Cache",
            "Redirect",
            "Multilingual"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14430",
        "summary": "When using an empty list with the __in= operator, an EmptyResultSet is returned, preventing an Aggregate Coalesce from working properly.",
        "category": "Bug",
        "tags": [
            "Database",
            "Aggregate",
            "Coalesce",
            "EmptyResultSet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14434",
        "summary": "The statement created by _create_unique_sql makes references_column always false because an instance of Table is passed as an argument to Columns when a string is expected.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Table",
            "Columns"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14351",
        "summary": "The issue reports a difference in how Q object aliases are set up when OR'd. This results in a 'subquery must return only one column' error in Django 3.2, which was not present in Django 2.2.5.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Q object",
            "Aliases"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14368",
        "summary": "The issue reports that Django's dateparse.parse_datetime does not correctly parse ISO-8601 datetime strings that contain whitespace characters between the time strings and timezone strings. The user suggests Django should depend on python-dateutil for datetime string parsing or inline python-dateutils' parsing functions.",
        "category": "Bug",
        "tags": [
            "Datetime",
            "Parsing",
            "ISO-8601",
            "dateparse"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14372",
        "summary": "The issue reports that saving a FileField raises a SuspiciousFileOperation exception in Django 3.2.1 due to a change in Django's requirements for the FieldFile.save method. The user suggests a fix in a PR.",
        "category": "Bug",
        "tags": [
            "FileField",
            "SuspiciousFileOperation",
            "FieldFile.save"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14373",
        "summary": "The issue reports that the Y specifier for django.utils.dateformat.DateFormat does not return a four-digit year padded with zeros for years less than 1000.",
        "category": "Bug",
        "tags": [
            "DateFormat",
            "Year",
            "Padding"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14374",
        "summary": "The issue suggests updating the usage of datetime.now() and datetime.utcnow() in Django to the modern recommended approach of using datetime.now(timezone.utc).",
        "category": "Feature Request",
        "tags": [
            "Datetime",
            "Update",
            "now()",
            "utcnow()"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14376",
        "summary": "The issue reports that Django's MySQL backend uses deprecated 'db' and 'passwd' kwargs, which have been marked as deprecated in mysqlclient. The user suggests updating to use 'database' and 'password' respectively.",
        "category": "Bug",
        "tags": [
            "MySQL",
            "Backend",
            "Deprecated",
            "kwargs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14382",
        "summary": "The issue is about an error that occurs when a trailing slash is appended to the directory name while using the django-admin startapp command. The error is caused by the basename() function in django/core/management/templates.py, which does not consider trailing slashes. The proposed solution is to remove potential trailing slashes.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Command Line Interface"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14385",
        "summary": "The issue is about the simplify_regex function, which only removes some metacharacters from regex patterns. The user provides examples of input patterns and their expected and actual outputs.",
        "category": "Bug",
        "tags": [
            "Regex",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14387",
        "summary": "The issue is about incorrect SQL generation when filtering OR-combined queries. The user provides a detailed example of a model and a function that returns a queryset by combining 3 sets of busses using the '|' OR operator. The issue arises when the OR'd queryset is further filtered, resulting in unpredictable results.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14395",
        "summary": "The issue is about the CacheHandler class initializing unused caches. The user points out a change in the logic of the 'all' method from the CacheHandler class that leads to unnecessary mass initialization of custom diskcache-classes, causing io-lags.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14396",
        "summary": "The user suggests changing the default of Sitemap.protocol to https, with a clear deprecation timeline.",
        "category": "Feature Request",
        "tags": [
            "Sitemap",
            "HTTPS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14399",
        "summary": "The issue is about the lack of documentation on serving static files with hypercorn. The user suggests integrating whitenoise into the Django docs to address this issue.",
        "category": "Documentation",
        "tags": [
            "Static Files",
            "Hypercorn",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14441",
        "summary": "The issue reports a crash when the get_image_dimensions() function is passed a non-existing file or path.",
        "category": "Bug",
        "tags": [
            "Image Processing",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14444",
        "summary": "The issue reports a warning when creating a UniqueConstraint on SQLite, stating that a constraint won't be created even though it is.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14447",
        "summary": "The issue reports a performance penalty due to the database cache counting the DB size twice for every cache update to determine if culling is needed.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14451",
        "summary": "The issue requests for support for self-closing tags in syndication feeds, which is currently not supported by Django.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Syndication Feeds"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14453",
        "summary": "The issue reports a misleading error message when 'urlpatterns' is misspelled in a 'urls' module.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14463",
        "summary": "The issue requests for the ability to define comments in table/columns, which would be valuable for database administrators, data analysts, and others.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14471",
        "summary": "The issue is about the CSRF cookie token having the wrong format, which leads to unnecessary work in the CsrfViewMiddleware.process_view() function. The suggestion is to reject the request outright if the CSRF cookie has the wrong format, similar to how it's done if the token has the wrong format.",
        "category": "Bug",
        "tags": [
            "CSRF",
            "Middleware",
            "Token Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14480",
        "summary": "The issue proposes adding XOR support to Q queries in Django. XOR is available in Postgresql, MySQL, SequelServer, and Oracle but not in sqlite.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Query",
            "XOR"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14493",
        "summary": "The issue is about a crash that occurs when max_post_process_passes is set to 0 in a custom class derived from ManifestStaticFilesStorage. The error is due to the 'substitutions' variable being referenced before assignment.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "Storage",
            "Post Process"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14495",
        "summary": "The issue is about an internal confusion in Django regarding whether replaced migrations exist or not. The problem arises when trying to migrate backward to a replaced migration, resulting in a KeyError.",
        "category": "Bug",
        "tags": [
            "Migration",
            "KeyError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14500",
        "summary": "The issue is about a squashed migration not being marked as unapplied when unapplying it and the replaced migration files are still around.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Squashed Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14508",
        "summary": "The issue is about overwriting a property with a field during model inheritance, which results in an AttributeError. The suggestion is to provide a warning during model's init that could be more precise about why the attribute couldn't be set.",
        "category": "Bug",
        "tags": [
            "Model",
            "Inheritance",
            "AttributeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14513",
        "summary": "The issue is about the discrepancy between the output of showmigrations and the actual recorded applied state of squashed migrations. The current output of showmigrations indicates that the related squashed migration has been applied even if it has not been recorded by the migration recorder.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14518",
        "summary": "The issue is about enhancing the error messages in CsrfViewMiddleware when it encounters a bad CSRF token. The suggestion is to include in the error message whether the token was obtained from POST data or a custom header.",
        "category": "Feature Request",
        "tags": [
            "Middleware",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14534",
        "summary": "The issue is about the BoundWidget.id_for_label method ignoring the id set by ChoiceWidget.options. The current implementation of BoundWidget.id_for_label does not consider the id available through self.data['attrs']['id'].",
        "category": "Bug",
        "tags": [
            "Widgets",
            "Form"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14539",
        "summary": "The issue is about the urlize function not handling HTML escaped string and trailing punctuation correctly. The current implementation of urlize does not produce the expected output for certain inputs.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14558",
        "summary": "The issue is about the JSONField.bound_data method raising a TypeError when data is None. When a bound form with no value provided for the JSONField is rendered, it currently crashes.",
        "category": "Bug",
        "tags": [
            "Form",
            "JSON"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14559",
        "summary": "The issue is about the bulk_update method not returning the number of rows matched. The current implementation of bulk_update returns None, unlike update, which returns the number of rows matched.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Update"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14634",
        "summary": "The issue requests for a mixin to be added that would display a success message upon successful deletion of an object.",
        "category": "Feature Request",
        "tags": [
            "Mixin",
            "Object Deletion",
            "Success Message"
        ]
    },
    {
        "instance_id": "django__django-14641",
        "summary": "The issue suggests moving the special-case logic in BoundField.initial() to BaseForm.get_initial_for_field(). This would allow for better handling of time and datetime objects.",
        "category": "Bug",
        "tags": [
            "BoundField",
            "BaseForm",
            "Datetime"
        ]
    },
    {
        "instance_id": "django__django-14645",
        "summary": "The issue reports a decimal.InvalidOperation error when a 'NaN' value is passed to a form with a DecimalField and max_value argument.",
        "category": "Bug",
        "tags": [
            "DecimalField",
            "Form",
            "InvalidOperation Error"
        ]
    },
    {
        "instance_id": "django__django-14664",
        "summary": "The issue reports that ResolverMatch with some views is not pickleable, causing problems when using the django.test.client.Client with multiprocessing.",
        "category": "Bug",
        "tags": [
            "ResolverMatch",
            "Pickle",
            "Multiprocessing"
        ]
    },
    {
        "instance_id": "django__django-14667",
        "summary": "The issue reports that QuerySet.defer() doesn't clear deferred field when chaining with only(), causing unexpected fields to be selected in the generated SQL query.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "SQL",
            "Defer",
            "Only"
        ]
    },
    {
        "instance_id": "django__django-14672",
        "summary": "The issue reports a missing call to make_hashable on through_fields in ManyToManyRel, causing a TypeError when checking proxy models.",
        "category": "Bug",
        "tags": [
            "ManyToManyRel",
            "Proxy Models",
            "TypeError"
        ]
    },
    {
        "instance_id": "django__django-14580",
        "summary": "The issue reports a bug in Django's latest release 3.2.4 where the generated migration file is missing an import statement, causing a NameError. The problem seems to be related to the module django.db.migrations.writer.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Models",
            "Import Statement"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14584",
        "summary": "The issue suggests that the logging output of django.db.backends should include the database alias, which is essential when working with database routing.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Logging",
            "Database Routing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14599",
        "summary": "The issue reports a problem with the logic inside CsrfViewMiddleware.process_response(), where the csrf_cookie_needs_reset and csrf_cookie_set can behave incorrectly in certain circumstances.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "CSRF Protection",
            "Cookies"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14602",
        "summary": "The issue suggests tightening up the regular expression used by parse_time to accept fewer 'invalid' options. The current regex allows for some variations which it arguably shouldn't.",
        "category": "Bug",
        "tags": [
            "Time Parsing",
            "Regular Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14608",
        "summary": "The issue suggests adding a 'nonform' CSS class for non form errors in FormSets, similar to how forms add the nonfield CSS class for non field errors in ErrorList instances.",
        "category": "Feature Request",
        "tags": [
            "FormSets",
            "CSS",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14631",
        "summary": "The issue reports that BaseForm's _clean_fields() and changed_data should access values via BoundField for consistency and to reduce the number of code paths. The current code can return different values in certain cases.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Data Access",
            "BoundField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14681",
        "summary": "The issue reports a misleading CSRF failure error message when there is a problem with file storage. The error message is not indicative of the actual problem, which is an incorrect media storage setup.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "File Upload",
            "Storage",
            "CSRF"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14717",
        "summary": "The issue reports that three of the _check_fix_default_value() method definitions in django/db/models/fields/__init__.py can be simplified. The timezone.now() function is called even when the return value isn't needed or won't be used.",
        "category": "Feature Request",
        "tags": [
            "Optimization",
            "Models",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14722",
        "summary": "The issue reports a bug when moving a unique constraint from unique_together to Field.unique, which generates an invalid migration. The error occurs when applying the migrations.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "Unique Constraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14725",
        "summary": "The issue reports that model formsets don't provide a way to create an 'edit only' view of objects. Users try to use extra=0 to accomplish this, but that's not reliable as extra is merely meant for the extra number of forms to display.",
        "category": "Feature Request",
        "tags": [
            "Formsets",
            "Models",
            "Object Creation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14727",
        "summary": "The issue reports a problem where naming an incompletely applied squashed migration as a migration target fails with a bare NodeNotFoundError. This is confusing to the user and a warning should be raised.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14730",
        "summary": "The issue reports that in ManyToManyField, if the symmetrical argument is passed, or if it's a self-referential ManyToMany relationship, the related field on the target model is not created. If a developer passes in the related_name not understanding this fact, they may be confused. Thus, it is proposed to raise an error when the user defines a ManyToManyField in this condition.",
        "category": "Feature Request",
        "tags": [
            "Models",
            "ManyToManyField",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14779",
        "summary": "The issue is about an unhelpful IndexError thrown when a custom tag with missing context param and no other params is used. The error occurs when the checking code tries to access params[0].",
        "category": "Bug",
        "tags": [
            "Custom Tags",
            "TemplateSyntaxError",
            "IndexError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14785",
        "summary": "The issue reports that NaN values can be stored in a DecimalField using sqlite3, but cannot be retrieved. Attempts to retrieve such values result in a TypeError.",
        "category": "Bug",
        "tags": [
            "Database",
            "DecimalField",
            "NaN",
            "SQLite3"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14787",
        "summary": "The issue is about the method_decorator() not preserving wrapper assignments. The function passed to the decorator is a partial object and lacks expected function attributes like __name__, __module__, etc.",
        "category": "Bug",
        "tags": [
            "Method Decorator",
            "Wrapper Assignments",
            "Partial Object"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14792",
        "summary": "The issue reports a different behavior in Django 3.2 when using a time zone of 'Etc/GMT-10' for a Trunc class tzinfo. The problem seems to be due to a change in the return value of timezone._get_timezone_name() that's called by the TimezoneMixin.",
        "category": "Bug",
        "tags": [
            "Timezone",
            "Trunc Class",
            "TimezoneMixin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14802",
        "summary": "The issue suggests adding a helper function to make and validate cache keys to avoid repetitiveness and ensure consistent calling of .validate_key() after .make_key().",
        "category": "Feature Request",
        "tags": [
            "Cache Backend",
            "Helper Function",
            "Key Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14805",
        "summary": "The issue reports that the --noinput option to makemigrations also means 'no output'. The request is for some kind of output for scripting purposes, even when the --noinput option is used.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Noinput Option",
            "Scripting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14733",
        "summary": "The issue is a feature request to introduce deletion_widget and get_deletion_widget() in Django 3.0, similar to ordering_widget and get_ordering_widget(). This would allow easy overriding of the DELETE field in formsets that are updated in the frontend.",
        "category": "Feature Request",
        "tags": [
            "Formsets",
            "Widgets",
            "Frontend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14751",
        "summary": "The issue is a feature request to make the makemigrations management command more script-friendly. The user wants to run makemigrations in a Docker container, find out what files were added, and then copy those files to their development machine for source control.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Scripting",
            "Docker",
            "Source Control"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14752",
        "summary": "The issue is a feature request to refactor AutocompleteJsonView to support extra fields in autocomplete response. The user wants to add new attributes to autocomplete field results without having to fully override the AutocompleteJsonView.get() method.",
        "category": "Feature Request",
        "tags": [
            "Autocomplete",
            "Admin",
            "Refactoring"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14762",
        "summary": "The issue is a bug where prefetch_related called for GenericForeignKey sets content_type_id and object_id to None, if the foreign object doesn't exist. This behaviour is not documented and the user suggests that prefetch_related shouldn't touch original values of object_id and content_type_id and only set content_object to None.",
        "category": "Bug",
        "tags": [
            "GenericForeignKey",
            "Database",
            "Prefetch_related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14765",
        "summary": "The issue is a feature request to allow ProjectState.__init__() to assume its real_apps argument is a set. The user suggests that instead of checking that real_apps is a set and converting it to a set if not, it can just assert that it's a set when non-None.",
        "category": "Feature Request",
        "tags": [
            "ProjectState",
            "Initialization",
            "Set"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14771",
        "summary": "The issue is a feature request to allow the auto-reloader to pass -X options for cpython implementation. The user wants to be able to use -X utf8 option with manage.py runserver command.",
        "category": "Feature Request",
        "tags": [
            "Auto-reloader",
            "CPython",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14812",
        "summary": "The issue is related to the Django admin interface. When a proxy model is used with InlineModelAdmin for a proxy superclass reference, it results in an admin.E202 error. The error is due to the fact that the result for SpecialJournalist._meta.get_parent_list() does not include Journalist.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "Models",
            "Proxy Models",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14832",
        "summary": "The issue is related to the floatformat template filter. The filter is not independent of USE_L10N and does not allow forcing unlocalized format. The problem is due to the use of formats.number_format() without its use_l10n parameter.",
        "category": "Bug",
        "tags": [
            "Template Filters",
            "Localization",
            "Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14855",
        "summary": "The issue is related to the Django admin interface. When a model containing a ForeignKey field is viewed or edited in a custom Admin Site, and that ForeignKey field is listed in readonly_fields, the URL generated for the link is incorrect.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "URL Generation",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14861",
        "summary": "The issue is related to the Django admin interface. When changing ModelAdmin inlines based on an object's field, it breaks when changing the object and new inlines should appear. The problem is due to a validation error in the new ChildInline that didn't exist before saving.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "ModelAdmin",
            "Inlines"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14871",
        "summary": "The issue is related to the Select2 widget. When using the setting LANGUAGE_CODE=\"pt-BR\", the translation of select2 is not applied, the static file i18n is not found. This is due to the fact that some languages are converted to lowercase.",
        "category": "Bug",
        "tags": [
            "Widgets",
            "Localization",
            "Select2"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14878",
        "summary": "The issue is related to the SQLite3 database. While creating models with \"inspectdb\", it was discovered that PrimaryKeys, datatype double, and datatype unsigned int are not detected properly.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite3",
            "Models",
            "inspectdb"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14935",
        "summary": "The issue reports that the migration calls the callable on properties for ModelFields only once, resulting in the same 'wlan_password' for every 'Buchung'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "ModelFields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14954",
        "summary": "The issue reports that the 'createsuperuser' command doesn't work in non-interactive mode if a ManyToManyField is in REQUIRED_FIELDS.",
        "category": "Bug",
        "tags": [
            "Database",
            "Command",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14960",
        "summary": "The issue reports that the 'createsuperuser' command does not validate REQUIRED_FIELDS values in interactive mode when passed by command-line.",
        "category": "Bug",
        "tags": [
            "Database",
            "Command",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14969",
        "summary": "The issue reports that an error should be raised if a string is passed into 'has_perms()' instead of a list.",
        "category": "Feature Request",
        "tags": [
            "Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14983",
        "summary": "The issue reports that 'makemigrations' generates a wrongly numbered migration file if squashed migrations are in place.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14996",
        "summary": "The issue reports that renaming a field and setting the prior implicit field name as the 'db_column' to avoid db operations creates a migration emitting unnecessary SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14880",
        "summary": "The issue is about improving error messages for reverse accessor clashes in Django. The current error message does not specify the clashing name, which can make debugging difficult. The user has proposed a patch but it impacts some unit tests.",
        "category": "Bug",
        "tags": [
            "Error Messages",
            "Debugging",
            "Reverse Accessor Clashes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14890",
        "summary": "The issue reports that '&' and '|' operators are ignored after QuerySet.union(), intersection(), and difference() methods. The user suggests that these operators should raise an exception if they cannot be applied after combinator functions.",
        "category": "Bug",
        "tags": [
            "Operators",
            "QuerySet",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14894",
        "summary": "The issue is about incorrect annotation value when doing a subquery with an empty queryset. The user has provided a detailed example to illustrate the problem. The issue seems to be related to how Django's ORM generates annotation/subqueries.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Annotation",
            "Subquery",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14915",
        "summary": "The issue reports that 'ModelChoiceIteratorValue' is not hashable after migrating from Django 3.0 to Django 3.1. The user has provided an example where adding custom data-* attributes to the select widget options breaks due to this issue.",
        "category": "Bug",
        "tags": [
            "Migration",
            "ModelChoiceIteratorValue",
            "Hashable"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14916",
        "summary": "The issue is about investigating the feasibility of improving WhereNode clone performance in Django. The user has provided a detailed analysis of the current performance and proposed changes to improve it.",
        "category": "Feature Request",
        "tags": [
            "Performance",
            "WhereNode",
            "Clone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14919",
        "summary": "The issue is about not ignoring transaction durability errors within TestCase in Django. The user has noticed a discrepancy in how durable atomic blocks are handled in TransactionTestCase vs TestCase and proposed a solution to address this.",
        "category": "Bug",
        "tags": [
            "TestCase",
            "Transaction Durability",
            "Atomic Blocks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15038",
        "summary": "The issue is about the 'squashmigrations' command in Django. When using the '--squashed-name' option, it can overwrite existing migration files, leading to inconsistencies between the code and the database. The issue also mentions a potential CircularDependencyError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15044",
        "summary": "The issue reports that CacheMiddleware and FetchFromCacheMiddleware are not thread safe. The problem was discovered after production errors with pylibmc and uwsgi threaded. The issue includes a traceback of the error.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Threading",
            "Cache"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15052",
        "summary": "The issue is about a crash that occurs when an aggregate is filtered by an Exists subquery. The problem is demonstrated with a traceback and a patch is suggested to fix the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Aggregation",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15061",
        "summary": "The issue suggests removing the 'for = ...' from MultiWidget's <label>. The current implementation generates an id_for_label like f'{id_}0', which the reporter believes is nonsensical.",
        "category": "Feature Request",
        "tags": [
            "Widgets",
            "HTML"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15062",
        "summary": "The issue reports that some comparisons against DecimalField annotations behave unexpectedly on SQLite, particularly when wrapping a DecimalField value in a Case/When or ExpressionWrapper. The reporter suspects inconsistencies in type conversions.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15087",
        "summary": "The issue suggests that SQLite schema introspection should use PRAGMA instead of parsing to retrieve foreign keys. The current implementation uses a complex combination of regexes to extract foreign key constraints from DDL.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQLite",
            "Schema Introspection"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14997",
        "summary": "In Django 4.0a1, remaking a table with a unique constraint crashes on SQLite. The issue arises when running migrations on a model with a unique constraint.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Migrations",
            "Models",
            "Unique Constraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14999",
        "summary": "A RenameModel operation that already has db_table defined must be a noop. In Postgres, it drops and recreates foreign key constraints. In sqlite it recreates the table (as expected for a table renaming).",
        "category": "Bug",
        "tags": [
            "Database",
            "Postgres",
            "SQLite",
            "RenameModel",
            "db_table"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15018",
        "summary": "The call_command() function fails when required mutually exclusive arguments use the same 'dest'. This issue arises in a command which accepts two different ways to specify a time -- either as a timestamp or as a duration in the future.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "call_command",
            "Arguments"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15022",
        "summary": "Unnecessary joins in admin changelist query. The issue arises when searching for clients in admin by a search query containing several words (>3), which leads to additional JOIN in final SQL query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Admin Console",
            "SQL",
            "JOIN"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15031",
        "summary": "Django admin allows filtering using the field lookups such as 'in', but it is impossible to include a value that contains a comma. The function that splits the string is prepare_lookup_value.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Filtering",
            "Field Lookups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15037",
        "summary": "Foreign key to a specific field is not handled in inspectdb. The generated model for the table will have the other_id be a FK to foo and not foo(other_id).",
        "category": "Bug",
        "tags": [
            "Database",
            "Foreign Key",
            "inspectdb"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15127",
        "summary": "The issue is about the Django's message framework not updating new message tags created using @override_settings in tests. This results in the level_tag property returning an empty string instead of the new tags.",
        "category": "Bug",
        "tags": [
            "Testing",
            "Messages",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15128",
        "summary": "The issue is about an AssertionError raised when using the Query.change_aliases method in Django. The problem occurs during an OR operation of two QuerySets, where the keys and values of the change_map intersect, causing the AssertionError.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15135",
        "summary": "The issue is about unexpected data loss when saving a parent object after setting on a child in Django's bulk_update() method. The problem is that the ID of the child model is not re-copied to the child_id field that is actually being written to the database.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Bulk Update"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15136",
        "summary": "The issue is about the size of the admin foreign key raw inputs being too small when referring to a UUID field in Django.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "UUID",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15139",
        "summary": "The issue is about the potential security risks of the PickleSerializer in Django. The suggestion is to deprecate PickleSerializer and move it into a third party package to discourage its use.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Serialization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15154",
        "summary": "The issue is about the failure of Django's uniqueness detection for models with functional unique constraints. The problem occurs when creating a new object from the Django Administration site, but not when creating an object with code.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Models",
            "Uniqueness"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15098",
        "summary": "The issue is about the i18n_patterns not supporting language locale containing both script and region. The user expects the response of http://localhost:8000/en-latn-us/ and http://localhost:8000/en-Latn-US/ to be 200 U! but it returns 404 not found.",
        "category": "Bug",
        "tags": [
            "Internationalisation",
            "URL Validation",
            "Middleware"
        ]
    },
    {
        "instance_id": "django__django-15102",
        "summary": "The issue is about the startproject command not honoring the user's umask. The user expects the permissions of the created files to respect the umask, but they do not.",
        "category": "Bug",
        "tags": [
            "Command",
            "File Permissions"
        ]
    },
    {
        "instance_id": "django__django-15103",
        "summary": "The issue is about making the element_id argument of json_script optional. The user has a use-case where they don't need an id for the script and suggests making the id optional.",
        "category": "Feature Request",
        "tags": [
            "JSON",
            "Script"
        ]
    },
    {
        "instance_id": "django__django-15104",
        "summary": "The issue is about a KeyError with migration autodetector and ForeignKey field with hardcoded reference. The user suggests changing the code to handle the case where the 'to' key is not present in the deconstructed kwargs.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "ForeignKey"
        ]
    },
    {
        "instance_id": "django__django-15108",
        "summary": "The issue is about allowing the use of descending string syntax in Window(order_by). The user suggests reusing the logic in OrderableAggMixin.__init__ in Window.__init__ for consistency.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Ordering"
        ]
    },
    {
        "instance_id": "django__django-15111",
        "summary": "The issue is about django-admin start[project|app] not sending proper user agent header when HTTP(S) url is sent. The user suggests setting the 'User Agent' header to Django/DJANGO_VERSION.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "User Agent",
            "django-admin"
        ]
    },
    {
        "instance_id": "django__django-15161",
        "summary": "The issue is about simplifying the deconstruction of expressions in Django. The F() function was previously deconstructed to django.db.models.expressions.F() but was changed to django.db.models.F() to simplify generated migration code. The same technique can be applied to other expressions.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15166",
        "summary": "The issue is about the DatabaseCache backend not quoting all fields in queries. This is a problem for Snowflake, which requires all fields to be quoted. A patch has been attached that works with stable/3.2.x.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Queries"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15180",
        "summary": "The issue is about the path() and re_path() functions not raising a TypeError when kwargs is not a dict. This can lead to confusing error messages. The issue suggests adding a type-guard or a system check to raise a friendly message.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15199",
        "summary": "The issue is about deprecating the name argument of the cached_property function. Django 2.2 is the last version to support Python 3.5 where the name argument is required. The issue suggests deprecating the name argument in Django 4.0.",
        "category": "Feature Request",
        "tags": [
            "Python 3.5",
            "Django 4.0",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15202",
        "summary": "The issue is about the URLField throwing a ValueError instead of a ValidationError on clean. The issue provides an example where forms.URLField().clean('////]@N.AN') results in a ValueError.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15204",
        "summary": "The issue is about the Durationfield.clean function failing to handle broken data. The issue provides an example where the input string 'P3(3D' results in a ValueError.",
        "category": "Bug",
        "tags": [
            "Data Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15206",
        "summary": "The cache decorators cache_control, never_cache and sensitive_post_parameters no longer work with Django REST framework because they strictly check for an HttpRequest instance.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Decorators",
            "Django REST framework",
            "HttpRequest"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15213",
        "summary": "The ExpressionWrapper for ~Q(pk__in=[]) crashes. It works fine for ExpressionWrapper(Q(pk__in=[])) but not for ExpressionWrapper(~Q(pk__in=[])).",
        "category": "Bug",
        "tags": [
            "ExpressionWrapper",
            "Database",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15240",
        "summary": "The django_migrations table contains old migrations that no longer exist due to the introduction of squashmigrations. This can cause issues if naming duplication occurs. The proposal is to truncate the django_migrations table so that it includes only migrations that actually exist in the Django project.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "Squashmigrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15248",
        "summary": "The request is to add the ability to know where an object was deleted from to pre/post delete signals. This would allow signal listeners to understand why an object is being deleted.",
        "category": "Feature Request",
        "tags": [
            "Signals",
            "Object Deletion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15252",
        "summary": "In a multi-db setup, the MigrationRecorder does not obey db_router allow_migrate rules. The issue is that the migrate command is called against each connection when the test databases are created, which tries to apply migrations and record that a migration has been applied.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Multi-db setup",
            "db_router"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15268",
        "summary": "The issue is that multiple AlterFooTogether operations are not optimized into one. The proposal is to optimize these operations so that we don't do two operations on each constraint, but only one.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "AlterFooTogether"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15315",
        "summary": "The issue is about the Field.__hash__ changing its value when a field is assigned to a model class. This causes an AssertionError when a field is put in a dict before it's assigned to a model class.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Hash"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15316",
        "summary": "The issue is about the simplify_regex() function not handling non-capturing groups correctly. This was discovered while using Django REST Framework's Schema generator.",
        "category": "Bug",
        "tags": [
            "Regex",
            "Non-Capturing Groups",
            "Schema Generator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15318",
        "summary": "The issue is about the inconsistent behavior when querying unsaved reverse relations. The behavior differs for many-to-many fields and reverse foreign key fields.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Foreign Key",
            "Many-to-Many"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15320",
        "summary": "The issue is about the Subquery.as_sql() method returning incorrect SQL. The method removes the first and last symbols instead of absent brackets.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15324",
        "summary": "The issue is about Django crashing when a file with a null byte in its extension is uploaded. Django attempts to create a tempfile with the same extension, which results in a ValueError.",
        "category": "Bug",
        "tags": [
            "File Upload",
            "Tempfile",
            "Null Byte"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15334",
        "summary": "The issue is about the prefetch_related calls being ignored when using Queryset.iterator. The user suggests that it would be helpful to prefetch related for each chunk.",
        "category": "Feature Request",
        "tags": [
            "Queryset",
            "Iterator",
            "Prefetch Related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15272",
        "summary": "The issue is about adding a management command to optimize a migration. The migration optimizer has trouble reducing operations, so the user often needs to edit squashed migrations and re-run it through the optimizer. The proposed solution is a management command, optimizemigration, that speeds up this process.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Optimization",
            "Management Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15277",
        "summary": "The issue is about a micro-optimization for Value._resolve_output_field by modifying CharField.__init__. The current CharField expects that self.max_length is always a non-null value of sensible data, which causes issues. The proposed solution is to change the CharField.__init__ to check if self.max_length is not None before appending validators.MaxLengthValidator(self.max_length).",
        "category": "Bug",
        "tags": [
            "Optimization",
            "CharField",
            "Validators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15278",
        "summary": "The issue is about a crash that occurs when adding a nullable OneToOneField on SQLite. The error is new and has cropped up between building django-oauth-toolkit between Django 4.0 and the main branch for migrations.AddField of a OneToOneField.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "OneToOneField",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15280",
        "summary": "The issue is about incorrect deferred fields when following prefetches back to the 'parent' object. The problem is that Django is correctly evaluating the set of deferred fields when executing the 'inner' User queryset, but the instances are inheriting the set of fields they 'think' have been deferred from the outer User queryset, causing a database query to be executed when the attribute is accessed.",
        "category": "Bug",
        "tags": [
            "Deferred Fields",
            "Prefetches",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15292",
        "summary": "The issue is about the technical 404 debug page reporting incorrect view name for Class Based Views (CBVs). The problem is a regression that causes the debug page to report the view name as 'view_tests.views.<class 'view_tests.views.Http404View'>' instead of 'view_tests.views.Http404View'.",
        "category": "Bug",
        "tags": [
            "404 Debug Page",
            "Class Based Views",
            "View Name"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15297",
        "summary": "The issue is about the ResolverMatch repr being incorrect for Class Based Views (CBVs). The problem is that the _func_path has become urlpatterns_reverse.views.view due to changes in 4.0, which means the detection of class based views in ResolverMatch no longer works correctly. The proposed solution is to make ResolverMatch CBV aware again by embedding detection of view_class therein.",
        "category": "Bug",
        "tags": [
            "ResolverMatch",
            "Class Based Views",
            "URL Patterns"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15342",
        "summary": "The migration autodetector crashes on models with a field named _order but not using order_with_respect_to. This issue is caused by a function introduced in a recent commit that automatically converts the field name _order to the one defined in options['order_with_respect_to'], which fails if the model has a field _order but isn't using Meta.order_with_respect_to.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15347",
        "summary": "The Messages framework incorrectly serializes/deserializes extra_tags when it's an empty string. This is because MessageEncoder checks for the truthiness of extra_tags rather than checking it is not None.",
        "category": "Bug",
        "tags": [
            "Messages Framework",
            "Serialization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15352",
        "summary": "The session ID should be cleansed when reporting errors, just like other credentials. This issue has been identified in multiple public bug reports and could potentially be exploited by automatically searching for such requests and hijacking the associated accounts.",
        "category": "Bug",
        "tags": [
            "Error Reporting",
            "Session ID",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15368",
        "summary": "The bulk_update() function does not work with plain F('...') expressions. The issue is that the created SQL contains the string representation of F(), instead of resolving to the column name.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15370",
        "summary": "The proposal is to introduce an empty __slots__ protocol for SafeString & SafeData. This would avoid the creation of a __dict__ on the instance, which mirrors the str() behaviour, and save memory.",
        "category": "Feature Request",
        "tags": [
            "Performance",
            "Memory Management"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15375",
        "summary": "The aggregate() function with 'default' after annotate() crashes. This issue was reproduced on a PostgreSQL project and with SQLite. The issue is that the generated SQL is incorrect when the aggregate classes\u2019 default argument is used.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15380",
        "summary": "The issue reports a crash in the migration autodetector when renaming a model and field in a single step. The error occurs during the execution of the 'makemigrations' command.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15382",
        "summary": "The issue reports a problem with the filter on exists-subquery with an empty queryset. The WHERE block is missing completely in the query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Filter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15388",
        "summary": "The issue reports a failure in the Dev Server to restart after adding BASE_DIR to TEMPLATES[0]['DIRS'] in settings. This prevents the dev server from restarting no matter where changes are made.",
        "category": "Bug",
        "tags": [
            "Dev Server",
            "Settings",
            "TEMPLATES"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15400",
        "summary": "The issue reports that SimpleLazyObject doesn't implement __radd__. This is causing problems as there are a number of magic methods it doesn't implement, compared to a complete proxy implementation.",
        "category": "Bug",
        "tags": [
            "SimpleLazyObject",
            "Magic Methods",
            "__radd__"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15401",
        "summary": "The issue suggests deprecating the passing of unsaved objects to related filters. The behavior of this action has changed between Django versions and is not documented.",
        "category": "Feature Request",
        "tags": [
            "Filter",
            "Unsaved Objects",
            "Related Filters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15413",
        "summary": "The issue reports a bug in log messages that contradicts the guide in a warning in the docs. The test for 'Synchronous middleware ... adapted' is instead testing an async middleware over a sync method.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Logging",
            "Async"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15414",
        "summary": "The issue is about the QuerySet.bulk_update() method not performing atomic writes against routed db_for_write. The problem arises because bulk_update doesn't set self._for_write = True before accessing self.db, which results in db_for_read, including the transaction.atomic block creation.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Atomic Writes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15421",
        "summary": "This issue is about the parallel test runner not working with Windows/macOS `spawn` process start method. The problem arises with Python 3.8 on MacOS, which has changed the default start method for the multiprocessing module from fork to spawn. This causes worker processes to fail with django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.",
        "category": "Bug",
        "tags": [
            "Testing",
            "Multiprocessing",
            "Parallel Test Runner"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15423",
        "summary": "The issue is about LazyObject defining magic methods (__getitem__, __iter__) which may be missing from the wrapped object. This leads to TypeErrors when trying to access these methods on the wrapped object.",
        "category": "Bug",
        "tags": [
            "LazyObject",
            "Magic Methods"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15433",
        "summary": "The issue is about the ManyToManyField to lowercased swappable setting causing the generation of infinite migrations. The problem arises when a custom user model that extends AbstractUser is created and a ManyToManyField that references this custom User model is added.",
        "category": "Bug",
        "tags": [
            "Database",
            "ManyToManyField",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15438",
        "summary": "The issue is about the fallback to a more generic language variant for Select2 translations. The problem arises when using a specific regional language setting (e.g., LANGUAGE_CODE=\"de-ch\"), the autocomplete_field widget will be in English as select2 does not provide the specific regional translation for \"de-ch\".",
        "category": "Feature Request",
        "tags": [
            "Internationalization",
            "Select2",
            "Translations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15442",
        "summary": "The issue is about django.utils.safestring.mark_safe forcing the evaluation of lazy objects. The problem arises because mark_safe will force the evaluation of the lazy string provided by ugettext_lazy when it's called.",
        "category": "Bug",
        "tags": [
            "Lazy Objects",
            "String Evaluation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15467",
        "summary": "The issue is about the ModelAdmin class in Django. When a 'radio_fields' is defined, the 'empty_label' is overridden by a 'default_empty_label'. The user wants to set their own 'empty_label'. A solution is proposed in the issue description.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Forms",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15474",
        "summary": "The issue is related to the ContentType migration in Django. When the migration is rolled back to its initial state on a non-default database, all ContentType rows in the database become null instead of their intended value.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "ContentType"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15481",
        "summary": "The issue is about the 'set_cookie' and 'set_signed_cookie' methods in Django. These methods do not accept a timedelta object for the 'max_age' argument, unlike the 'get_signed_cookie' method. The user suggests that these methods should also accept timedelta objects.",
        "category": "Feature Request",
        "tags": [
            "Cookies",
            "HTTP Response"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15483",
        "summary": "The issue is a feature request for a new AppAdmin class in Django. This class would allow for customizing the app listing in the admin index. The issue includes a discussion about the proposed feature and an example syntax.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "AppAdmin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15491",
        "summary": "The issue is about the built-in 'csrf_failure' view in Django. When Django detects a wrong CSRF token, it shows an error using this view. However, if the template is written using UTF-8, it is rendered incorrectly. The user suggests a fix for this issue.",
        "category": "Bug",
        "tags": [
            "CSRF",
            "Views",
            "Charset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15492",
        "summary": "The issue is a feature request for a new method in the RemoteUserBackend class in Django. This method, called 'synchronize_user', would allow for synchronizing changes from the remote system back into the Django user records whenever authentication happens.",
        "category": "Feature Request",
        "tags": [
            "Authentication",
            "RemoteUserBackend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15497",
        "summary": "Django currently expects only one value for the x-forwarded-proto header, but when deployed behind multiple proxies, the protocol is sometimes listed as a comma-separated list. The issue suggests Django should parse this as a list of values and set the protocol accordingly.",
        "category": "Feature Request",
        "tags": [
            "Proxy",
            "Header",
            "Protocol"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15498",
        "summary": "An empty string used to be ignored for the If-Modified-Since header, but now it raises an exception. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Header",
            "Exception"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15499",
        "summary": "During migration optimization, CreateModel + AlterModelOptions is reduced to just CreateModel, with the model options. The issue suggests that CreateModel + AlterModelManagers can also be reduced to just CreateModel.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Optimization",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15503",
        "summary": "When using models.JSONField() has_key lookup with numerical keys on SQLite database it fails to find the keys. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField",
            "Lookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15521",
        "summary": "There is a mismatch on the DjangoTranslation folder and the makemessages command for the value nl-nl-x-informal. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Translation",
            "Command",
            "Locale"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15525",
        "summary": "Loading data from a fixture works in the default database, but when using a second database, an exception is raised. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Database",
            "Fixture",
            "Serialization",
            "Natural Keys"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15526",
        "summary": "The 'view_on_site' redirect does not work for custom admin sites. This is due to the reverse call in get_view_on_site_url not resolving with the current (possibly custom) admin site. This issue is a bug and a patch has already been provided.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15554",
        "summary": "When using multiple FilteredRelation with different filters but for the same relation, the second FilteredRelation is ignored. This issue is asking whether this is the intended behavior or if it should be possible to use multiple FilteredRelation for the same relation.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15560",
        "summary": "The 'createsuperuser' command does not validate usernames that use a UniqueConstraint. This results in an IntegrityError when trying to create a user with a username that already exists. This issue is a bug.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15561",
        "summary": "The AlterField operation generates SQL even for seemingly db-transparent changes like adding choices on SQLite. This issue is a bug as the same migration generates no SQL on other databases like Postgres.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15563",
        "summary": "Queryset update behaves incorrectly when queryset class inherits multiple classes. The update happens not on the child class but on other parent class instances. This issue is a bug.",
        "category": "Bug",
        "tags": [
            "Database",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15569",
        "summary": "The '_unregister_lookup' method in RegisterLookupMixin does not clear the lookup cache. This issue is a bug and a PR has already been generated.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15572",
        "summary": "Django versions > 3.2.3 have changed the way template directories are handled, causing autoreload to break when an invalid value is in TEMPLATESDIRS. This is due to the normalization of the empty string into the root of the project, causing template_changed() to always return True and preventing autoreload when the app code changes.",
        "category": "Bug",
        "tags": [
            "Autoreload",
            "Templates",
            "Pathlib"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15576",
        "summary": "The fix for bug #18414 introduced an inefficiency in .exists() on distinct querysets, causing all distinct querysets to select all their fields. The issue suggests that fields should be left on the queryset only under certain conditions.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Database",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15586",
        "summary": "Following changes to allow auto-reloading cached templates, there was a discussion to enable the cached template loader by default even in development. This would require users who do not want this feature to specify loaders.",
        "category": "Feature Request",
        "tags": [
            "Templates",
            "Caching",
            "Development"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15607",
        "summary": "There is an unnecessary redirect in LogoutView when the next parameter contains an 'unsafe' URL. The expected result is to be logged out and redirected to LOGOUT_REDIRECT_URL, but there is an intermediary, useless redirect.",
        "category": "Bug",
        "tags": [
            "LogoutView",
            "Redirect",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15613",
        "summary": "There is inconsistent and unexpected handling of assigning an unsaved model to a Generic Foreign Key. The issue suggests modifying Model.save() or Model._prepare_related_fields_for_save() to perform verification check for GFK fields and modifying GenericForeignKey.get() to handle the case of pk_val = None.",
        "category": "Bug",
        "tags": [
            "Models",
            "Generic Foreign Key",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15620",
        "summary": "When a field migration is a no-op, the operation description is output in SQL, but nothing else. This can be confusing as to which operations are no-ops. The issue suggests outputting an extra SQL comment when there are deliberately no statements to execute for a given migration operation.",
        "category": "Feature Request",
        "tags": [
            "SQL",
            "Migration",
            "No-op"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15629",
        "summary": "The issue is about the use of db_collation with a primary key that also has referenced foreign keys in other models causing foreign key constraint errors in MySQL. The problem arises because the collation of the primary key must match the collation of the foreign key, otherwise an error will occur.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "MySQL",
            "Foreign Key",
            "Collation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15630",
        "summary": "The issue is about the interaction between exists() and group by in Django. The problem is that get_group_by() pushes a hardcoded value to the GROUP BY clause which can be invalid outside of PostgreSQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "PostgreSQL",
            "Group By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15643",
        "summary": "The issue is about Django migrations dropping explicit primary key defined on a model when it's altered on SQLite.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQLite",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15648",
        "summary": "The issue is about the inability to apply a decorator on a method which is called by __get_dynamic_attr in Django's views.Feed methods. This results in a TypeError.",
        "category": "Bug",
        "tags": [
            "Views",
            "Decorators",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15651",
        "summary": "The issue is about the need to implement RenameIndex in a backwards compatible way in order to eventually deprecate index_together. The problem is dealing with old projects that have unnamed indexes.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "Indexes",
            "Backwards Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15666",
        "summary": "The issue is about the failure when using Query Expression in ordering of a related object. The compiler tries to use the related model, but the item can be an OrderBy object, thus the failure.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query Expression",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15741",
        "summary": "The issue is about a regression caused by a commit that results in a TypeError when the date template filter receives a lazy string.",
        "category": "Bug",
        "tags": [
            "Date Template Filter",
            "Lazy String",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15742",
        "summary": "The issue is about the blocktranslate tag escaping variables and storing the result as a string, leading to double escaping and breaking the display on the final page.",
        "category": "Bug",
        "tags": [
            "Blocktranslate",
            "Variable Escaping",
            "String"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15744",
        "summary": "The issue is about the ASGI handler closing the request body prematurely, leading to an I/O operation on a closed file error when accessing request.body in a view.",
        "category": "Bug",
        "tags": [
            "ASGI Handler",
            "Request Body",
            "I/O Operation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15747",
        "summary": "The issue is about a FieldError being raised when trying to perform a custom action on data in the admin interface that is sorted by an annotated field.",
        "category": "Bug",
        "tags": [
            "FieldError",
            "Admin Interface",
            "Annotated Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15752",
        "summary": "The issue is about deprecating the make_random_password() function as it is unused.",
        "category": "Feature Request",
        "tags": [
            "Deprecation",
            "make_random_password()"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15766",
        "summary": "The issue is about the lack of robust on_commit handlers in Django, which can lead to some handlers not executing if a previous handler raises an exception.",
        "category": "Feature Request",
        "tags": [
            "on_commit Handlers",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15669",
        "summary": "The issue is a feature request for an --update flag for the makemigrations management command in Django, similar to the one in South. This flag would allow developers to refine the latest migration, which is useful for iterative development.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15671",
        "summary": "The issue is a feature request to allow overriding FormSet's error messages for too few and too many forms. The user suggests moving the messages to default_error_messages to enable overriding them via the error_messages argument when instantiating the FormSet.",
        "category": "Feature Request",
        "tags": [
            "FormSet",
            "Error Messages",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15678",
        "summary": "The issue is a proposal to deprecate CryptPasswordHasher in Django 4.1 and remove it in Django 5.0. The CryptPasswordHasher is almost undocumented, not recommended, and only supported on UNIX. Moreover, the crypt module was deprecated in Python 3.11.",
        "category": "Other",
        "tags": [
            "CryptPasswordHasher",
            "Deprecation",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15682",
        "summary": "The issue is a proposal to deprecate passing False to OrderBy's nulls_first and nulls_last. The user suggests that they should default to None, let the DB decide when both are None and when one is not None do the ordering that implies.",
        "category": "Other",
        "tags": [
            "OrderBy",
            "Database",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15689",
        "summary": "The issue is a bug report about the APPEND_SLASH setting adding significant latency to all requests not ending in /. The user suggests that this was an oversight in a previous commit and provides a test project to demonstrate the overhead.",
        "category": "Bug",
        "tags": [
            "APPEND_SLASH",
            "Performance",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15695",
        "summary": "The issue is a bug report about RenameIndex() crashing when an unnamed index for unique_together is moving backward and forward. The user suggests that RenameIndex() should restore the old auto-generated name when an unnamed index for unique_together is moving backward.",
        "category": "Bug",
        "tags": [
            "RenameIndex",
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15698",
        "summary": "The issue is about a template crash when calling methods for built-in types. The problem occurs when a non-existent variable is passed to a second template and its method is called. The issue was found during an upgrade from Django 2.2 to 3.2.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Built-in Types",
            "Method Call"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15703",
        "summary": "The issue suggests deprecating the use of Model.Meta.index_together in favor of Model.Meta.indexes, as the latter can perform all the functions of the former.",
        "category": "Feature Request",
        "tags": [
            "Model",
            "Meta",
            "index_together",
            "indexes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15731",
        "summary": "The issue reports that inspect.signature returns incorrect signature information when used on queryset methods. The problem is due to the code not copying complete metadata. The proposed solution is to use functools.wraps instead of manually assigning name and docstring.",
        "category": "Bug",
        "tags": [
            "inspect.signature",
            "QuerySet",
            "Metadata"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15732",
        "summary": "The issue is about an inability to drop a unique_together constraint on a model's primary key by a migration. The problem arises when there are two unique constraints on the column - the primary key and the unique_together constraint.",
        "category": "Bug",
        "tags": [
            "unique_together",
            "Constraint",
            "Migration",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15737",
        "summary": "The issue is about an unnecessary clear of cached reference in ORM models. The problem occurs when a child object's ForeignKeyDeferredAttribute changes value from None to the parent's ID, causing the child's internal cache containing the reference to 'parent' to be cleared.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Cache",
            "ForeignKeyDeferredAttribute"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15738",
        "summary": "The issue is about a problem with model migration when changing a field from foreign key to many-to-many and deleting unique together. The problem results in an error when trying to perform migrations.",
        "category": "Bug",
        "tags": [
            "Model",
            "Migration",
            "ForeignKey",
            "ManyToMany",
            "unique_together"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15819",
        "summary": "The issue is about the 'inspectdb' command not generating 'related_name' for relations to the same entities, causing a clash between reverse accessors. The user suggests auto-generating 'related_name' for all fields in a model if the related Model was used for the same table.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "inspectdb",
            "Relations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15828",
        "summary": "The issue reports that the 'BaseConstraint.deconstruct()' and '__eq__' operators do not take 'violation_error_message' into account. This is a regression in a specific commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "BaseConstraint",
            "Operators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15851",
        "summary": "The issue is about the 'dbshell' command in PostgreSQL where additional parameters should be passed before the database name. The current order causes warnings and ignores extra command-line arguments.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL",
            "dbshell",
            "Command-line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15863",
        "summary": "The issue reports that the 'floatformat' template filter drops precision when used for Decimal numbers. The problem is traced to incorrect conversion to Decimal within the 'floatformat' implementation.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "Decimal",
            "Precision"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15869",
        "summary": "The issue suggests deprecating the 'length_is' template filter in favor of 'length'. The 'length_is' filter is considered a vestige from the days of the '{% ifequal %}' and '{% ifnotequal %}' tags and is less flexible than using 'length' with the '{% if %}' template tag.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Filter",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15902",
        "summary": "The issue is about a deprecation warning for 'default.html' being raised for ManagementForm's, even when forms are never rendered with the '{{ form }}' expression. The user suggests special-casing this to avoid producing the warning for the management forms.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Deprecation Warning",
            "ManagementForm"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15774",
        "summary": "Django is detecting HTTP Accept-Language headers in a case-sensitive manner, which is not in line with the standards set by w3c, rfc2616, and bcp47. This results in inconsistent language display across different browsers. The issue suggests a fix in the code and documentation.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Language Detection",
            "Headers"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15781",
        "summary": "The issue is about the formatting of help output in Django's management command. The current output does not match the expected format, specifically in terms of line breaks and indentation.",
        "category": "Bug",
        "tags": [
            "Management Command",
            "Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15789",
        "summary": "The issue is about the inability to customize the JSON encoding of values output to the template layer using django.utils.html.json_script. The user suggests adding the ability to pass a custom encoder class. Additionally, the user notes that django.utils.html.json_script is not documented.",
        "category": "Feature Request",
        "tags": [
            "JSON",
            "Encoding",
            "Template Layer"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15790",
        "summary": "The issue is about a potential problem with the check_for_template_tags_with_the_same_name function when a template tag library is added into TEMPLATES['OPTIONS']['libraries']. The user is getting an error indicating that 'my_tags' is used for multiple template tag modules.",
        "category": "Bug",
        "tags": [
            "Template Tags",
            "Libraries"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15799",
        "summary": "The issue is about the SelectMultiple widget in ModelAdminForm displaying help text even when allow_multiple_selected is set to False. The user suggests that the help_text rendering should check the allow_multiple_selected attribute.",
        "category": "Bug",
        "tags": [
            "ModelAdminForm",
            "Widgets",
            "SelectMultiple"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15814",
        "summary": "The issue is about a crash that occurs when optimizing a query using select_related() and only() methods from a proxy model. The user suggests a fix in the django/db/models/sql/query.py file.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Proxy Models",
            "select_related",
            "only"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15987",
        "summary": "The issue is about the duplicate check in loaddata not detecting duplicates when FIXTURE_DIRS contains Path instances.",
        "category": "Bug",
        "tags": [
            "Database",
            "Path",
            "Loaddata",
            "Duplicates"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15993",
        "summary": "The issue is about the RenameModel operation that already has db_table defined. It should be a noop, but in Postgres, it drops and recreates foreign key constraints, and in sqlite it recreates the table.",
        "category": "Bug",
        "tags": [
            "Database",
            "RenameModel",
            "db_table",
            "Postgres",
            "SQLite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15995",
        "summary": "The issue is about Django requiring an instance pk to instantiate a related manager. The user suggests that this check is too aggressive and should allow the __init__ to succeed even if the instance has no pk.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Primary Key",
            "Related Manager"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15996",
        "summary": "The issue is about the lack of support for serialization of combination of Enum flags. The EnumSerializer aims to work with the .name of the item, but if there is no single item for the given value, then there is no such name.",
        "category": "Feature Request",
        "tags": [
            "Serialization",
            "Enum Flags",
            "EnumSerializer"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16002",
        "summary": "The issue is about the inability to retrieve 'NaN' from DecimalField after it has been stored. The 'NaN' value skips the validation in DecimalField.to_python, because it is not None, and is not instance of float.",
        "category": "Bug",
        "tags": [
            "Database",
            "DecimalField",
            "NaN",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16027",
        "summary": "The issue is about the timesince function returning wrong results for 11 months + several weeks. The user suggests that the number of days in a month should be changed to 30.4 (the average) for more than 2 months.",
        "category": "Bug",
        "tags": [
            "Time",
            "timesince",
            "Date Calculation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15916",
        "summary": "The issue is about the function django.forms.modelform_factory not using the formfield_callback specified in the Meta attribute of the base form provided. The expected behavior is that the FactoryForm uses the formfield_callback specified in the Meta attribute of MyForm and that therefore the fields would be required in both the FactoryForm and MyForm.",
        "category": "Bug",
        "tags": [
            "Forms",
            "ModelForm",
            "Callback"
        ]
    },
    {
        "instance_id": "django__django-15925",
        "summary": "The issue is about the RemoveField operation on indexed fields causing crashes on SQLite 3.35.5+ when Django version is bumped from 4.0.7 to 4.1. The error occurs during database migrations in the testing stage of the CI/CD pipeline.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Migrations",
            "RemoveField"
        ]
    },
    {
        "instance_id": "django__django-15930",
        "summary": "The issue is about the Case() function crashing when used with ~Q(pk__in=[]). The error is a syntax error and the expected behavior is to annotate all rows with the value True since they all match.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Case",
            "Q objects"
        ]
    },
    {
        "instance_id": "django__django-15957",
        "summary": "The issue is about Prefetch() objects not working with sliced querysets. The error is an AssertionError stating that a query cannot be filtered once a slice has been taken.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Prefetch",
            "Slicing"
        ]
    },
    {
        "instance_id": "django__django-15969",
        "summary": "The issue is about performance problems encountered when using on_delete=models.SET_NULL on large tables. The problem is that the SQL queries timeout, causing jobs to fail.",
        "category": "Bug",
        "tags": [
            "Database",
            "Performance",
            "on_delete",
            "SET_NULL"
        ]
    },
    {
        "instance_id": "django__django-15973",
        "summary": "The issue is about an AttributeError encountered when defining the 'through' model in a many-to-many field in another app during migration. The error is 'str' object has no attribute '_meta'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "ManyToManyField",
            "through"
        ]
    },
    {
        "instance_id": "django__django-16070",
        "summary": "The issue is about the QuerySet.order_by() function in Django. It silently skips non-existing fields on related fields with Meta.ordering, which is undesirable. The user expects an error to be thrown when a non-existing field is used in the order_by function.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Models",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16072",
        "summary": "The issue is about the update_or_create function in Django. The user suggests that this function should only update the fields in default on update, not all fields. This could potentially improve efficiency and reduce unnecessary database operations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Update",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16076",
        "summary": "The issue is about the inability to register lookups on relation fields in Django. The user is trying to perform a lookup on a ForeignKey field with a specific condition, but encounters an error. The user suggests that Django should support registering lookups on relation fields.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Lookups",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16082",
        "summary": "The issue is about the MOD operator in Django. When used in a query with different types (Decimal and Integer), it doesn't resolve the result to a Decimal type, unlike other mathematical operators.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "MOD Operator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16092",
        "summary": "The issue is about adding a Field.db_default for defining database defaults in Django. The user suggests applying a specific diff to django/core/mamagement.py to achieve this.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Fields",
            "Defaults"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16100",
        "summary": "The issue is about the lack of transaction handling in the changelist_view in Django admin. The user suggests that since the view may change data in the database, it should be wrapped in a transaction to prevent unexpected states in case of errors.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Admin",
            "Transaction",
            "Changelist"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16111",
        "summary": "The issue is about adding support for microseconds to the Now() function on MySQL and SQLite databases.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "MySQL",
            "SQLite",
            "Time"
        ]
    },
    {
        "instance_id": "django__django-16116",
        "summary": "The issue is about the inconsistency in the behavior of the --check flag in the makemigrations command compared to other commands like migrate and optimizemigration.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Command Line Interface"
        ]
    },
    {
        "instance_id": "django__django-16117",
        "summary": "The issue is about Django not detecting a newly generated migration file due to the name of the file. The name contains several dots, which causes Django's migrate/showmigrations commands to not find the file.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "File Naming",
            "Database"
        ]
    },
    {
        "instance_id": "django__django-16120",
        "summary": "The issue is about the migrate --check command still emitting signals even if the database is up-to-date.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Signals"
        ]
    },
    {
        "instance_id": "django__django-16136",
        "summary": "The issue is about an error that occurs when a GET request is made to a View subclass that only has an async 'post' method. The error message states that the HttpResponseNotAllowed object can't be used in an 'await' expression.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Async",
            "Views"
        ]
    },
    {
        "instance_id": "django__django-16139",
        "summary": "The issue is about a broken link to the PasswordResetForm when accessing the UserAdmin via another model's Admin that has a reference to User with the to_field set.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "URL Validation",
            "User Model"
        ]
    },
    {
        "instance_id": "django__django-16032",
        "summary": "The issue is about a bug in Django's QuerySet.alias() method. When used after annotate(), it doesn't clear selected fields on the RHS with __in. This results in an OperationalError: sub-select returns 10 columns - expected 1.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "alias",
            "annotate",
            "__in"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16037",
        "summary": "The issue reports a crash when using QuerySet.annotate() with subquery and aggregation after updating an app from Django 4.0 to 4.1.1. The crash occurs with both SQLite and PostgreSQL databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "annotate",
            "Subquery",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16041",
        "summary": "The issue is about a KeyError that occurs when rendering a template that uses a formset's empty_form, when explicitly setting form_kwargs = {'empty_permitted':True} or form_kwargs = {'empty_permitted':False}.",
        "category": "Bug",
        "tags": [
            "Formset",
            "Rendering",
            "empty_form",
            "form_kwargs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16046",
        "summary": "The issue reports a bug in numberformat.py where an 'IndexError: string index out of range' is raised when it encounters a number field that's null when formatting for the admin list_display.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "numberformat.py",
            "IndexError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16053",
        "summary": "The issue is about the string representation of ContentType and Permission models in Django. The __str__ function mixes the model\u2019s app_label (which is not localized) with the model\u2019s verbose_name (which is localized), resulting in strings that are partly in English and partly in a different language.",
        "category": "Bug",
        "tags": [
            "Localization",
            "ContentType",
            "Permission",
            "__str__"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16067",
        "summary": "The issue reports a bug in Django's DecimalValidator. It fails to validate 0 in scientific notation (0E+1 or 0E+2). This was introduced in Django 2.0.13 and was not present in 1.11.29.",
        "category": "Bug",
        "tags": [
            "Validation",
            "DecimalValidator",
            "Scientific Notation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16142",
        "summary": "The issue is about the get_language_from_request function in Django. The user suggests that this function should not fall back to the default language set in settings.LANGUAGE_CODE, but rather return None if no language is found in the request. This would allow middleware to handle the fallback to the default language.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Language",
            "Request Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16143",
        "summary": "The user is having trouble tracking down the cause of a TransactionManagementError. The error message does not provide enough information about why the transaction needs to be rolled back. The user suggests that Django should keep track of why a rollback is needed and provide this information in the error message.",
        "category": "Bug",
        "tags": [
            "Database",
            "Transactions",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16145",
        "summary": "The user reports an inconsistency between the Django tutorial and the actual output of the runserver command. When running the server with '0:8000', the output link is 'http://0:8000/', which is not usable in a browser. The user suggests that the output should be 'http://0.0.0.0:8000/' to match the tutorial and be usable.",
        "category": "Bug",
        "tags": [
            "Runserver",
            "Tutorial",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16208",
        "summary": "The user is debugging database calls and notices that while the BEGIN SQL calls are logged, there is no way to see when a transaction is committed or rolled back. The user suggests that Django should also log commits and rollbacks.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Transactions",
            "Logging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16229",
        "summary": "The user reports a problem with ModelForm fields with callable defaults. When creating an object via the admin, if an inline contains an ArrayField in error, the validation is bypassed if the form is submitted a second time without modification. The user suggests forcing show_hidden_initial=False on the field to fix the issue.",
        "category": "Bug",
        "tags": [
            "Admin",
            "ModelForm",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16254",
        "summary": "The user reports a regression in Django 4.1. When adding a ManyToManyField to a table on SQLite, the table is rebuilt, which was not the case in Django 4.0. The user suggests that this is unnecessary and could be fixed by reintroducing the special-case code for implicit M2M tables that was removed in a previous commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16255",
        "summary": "The issue is about a ValueError that occurs when a sitemap contains no items but supports returning lastmod for an item. The user has suggested a solution to handle this exception.",
        "category": "Bug",
        "tags": [
            "Sitemap",
            "ValueError",
            "Exception Handling"
        ]
    },
    {
        "instance_id": "django__django-16256",
        "summary": "The issue reports that async-compatible interface added to QuerySet unintentionally added async acreate(), aget_or_create(), and aupdate_or_create() methods to related managers. These methods don't call create(), get_or_create(), and update_or_create() respectively from a related manager but from the QuerySet.",
        "category": "Bug",
        "tags": [
            "Async",
            "QuerySet",
            "Related Managers"
        ]
    },
    {
        "instance_id": "django__django-16260",
        "summary": "The issue is about the model.refresh_from_db() function not clearing cached generic foreign keys. This leads to subtle bugs like non-transitive equalities in tests.",
        "category": "Bug",
        "tags": [
            "Model",
            "Cache",
            "Generic Foreign Key"
        ]
    },
    {
        "instance_id": "django__django-16263",
        "summary": "The issue reports that Django includes unused annotations in the SQL statement produced by queryset.count(), even when they are not used in any filter operations. The user suggests that Django could be more intelligent about what annotations to include in the query.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "SQL",
            "Annotations"
        ]
    },
    {
        "instance_id": "django__django-16281",
        "summary": "The issue is about a migration error that occurs when changing the target of a ManyToManyField to 'self'. The user encounters an OperationalError, 'no such column: app_foo_bar.from_foo_id' when trying to add a new 'Foo' in the admin page.",
        "category": "Bug",
        "tags": [
            "Migration",
            "ManyToManyField",
            "Admin Console"
        ]
    },
    {
        "instance_id": "django__django-16302",
        "summary": "The issue reports that Django throws an error when trying to define a CharField with a null max_length. The user suggests that CharField should allow max_length=None, which intuitively means there is no maximum length.",
        "category": "Feature Request",
        "tags": [
            "Model",
            "CharField",
            "Validation"
        ]
    },
    {
        "instance_id": "django__django-16306",
        "summary": "The issue reports that BaseForm.__getitem__() in Django forms does unnecessary work in the 'happy path'. It suggests that the function could return self._bound_fields_cache[name] at the beginning and handle KeyError, instead of accessing self.fields and checking for the presence of name in self._bound_fields_cache each time.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16311",
        "summary": "The issue suggests implementing a mitigation for the BREACH attack that doesn't depend on masking specific tokens or injecting data into HTML. It proposes adding randomness to the compressed response by injecting random bytes in the gzip filename field of the gzip stream, as suggested in a paper called 'Heal The Breach'.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Compression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16315",
        "summary": "The issue reports that QuerySet.bulk_create() crashes when using mixed case columns in unique_fields/update_fields. The problem arises when calling bulk_update on the manager for a class with db_column set on fields, leading to invalid SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16317",
        "summary": "The issue reports that QuerySet.bulk_create() crashes when 'pk' is used in unique_fields, which should be allowed. The error message indicates that the column 'pk' does not exist.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16322",
        "summary": "The issue reports that Django produces an incorrect query when the same keyword appears in both aggregate() and annotate(). The problem was initially unnoticed on SQLite but caused a crash on MySQL due to an 'Unknown column' error.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "SQL",
            "SQLite",
            "MySQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16333",
        "summary": "The issue reports that UserCreationForm does not save data from ManyToMany form fields when used with a custom User model. This is because UserCreationForm.save(commit=True) omits to call self.save_m2m().",
        "category": "Bug",
        "tags": [
            "Forms",
            "User Model",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16408",
        "summary": "The issue reports a problem with multi-level FilteredRelation combined with select_related() in Django. The test case provided shows that the related object set may be incorrect, leading to a failed assertion in the test.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "FilteredRelation",
            "select_related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16411",
        "summary": "The issue is a feature request for ManifestStaticFilesStorage to expose a 'hash' of the manifest file. This would allow Single Page Applications (SPAs) to send a header in responses and perform a full reload if the header changes.",
        "category": "Feature Request",
        "tags": [
            "ManifestStaticFilesStorage",
            "Hash",
            "SPAs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16429",
        "summary": "The issue reports a TypeError raised by the timesince() function when the USE_TZ setting is set to True and the datetime object is one month or more in the past. The issue suggests that the pivot instantiated does not take into account the datetime object's tzinfo.",
        "category": "Bug",
        "tags": [
            "timesince",
            "USE_TZ",
            "TypeError",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16454",
        "summary": "The issue reports that Django management command subparsers do not retain error formatting. The arguments for improving error formatting are not copied into subparsers, leading to stack traces on the CLI instead of human-facing usage messages.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "Subparsers",
            "Error Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16485",
        "summary": "The issue reports a crash in the floatformat() function when it is called with '0.00'. The function throws a ValueError stating that the valid range for precision is [1, MAX_PREC].",
        "category": "Bug",
        "tags": [
            "floatformat",
            "ValueError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16491",
        "summary": "The issue reports that Exists annotations can return non-boolean results (i.e., None) if used with an empty QuerySet. The issue suggests that this is inconsistent with the output_field of BooleanField and the expectations from the function name.",
        "category": "Bug",
        "tags": [
            "Exists",
            "Annotations",
            "QuerySet",
            "BooleanField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16493",
        "summary": "The issue is about the storage argument on a FileField in Django. If it is set to a callable that returns default_storage, it is omitted from the deconstructed form of the field, rather than being included as a reference to the callable as expected. This causes inconsistent behavior when running makemigrations.",
        "category": "Bug",
        "tags": [
            "FileField",
            "Storage",
            "Models",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16501",
        "summary": "The issue is about the validation of UniqueConstraint with ordered expressions in Django. When a model with such a constraint is used in the admin interface, it causes a crash with a syntax error. This happens on both Postgres and sqlite backends.",
        "category": "Bug",
        "tags": [
            "UniqueConstraint",
            "Models",
            "Admin Interface",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16502",
        "summary": "The issue is about the Django runserver returning response bodies for HTTP HEAD requests, which is not compliant with RFC 2616, section 4.3. This behavior started with Django 1.10 and is not present in Django 1.9.13.",
        "category": "Bug",
        "tags": [
            "Runserver",
            "HTTP HEAD",
            "RFC Compliance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16511",
        "summary": "The issue is a feature request to extend update_or_create to support specifying a different set of defaults for the create operation. This would be useful in cases where different fields need to be set depending on whether the operation is an update or a create.",
        "category": "Feature Request",
        "tags": [
            "update_or_create",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16514",
        "summary": "The issue is about the Django admin site showing all entries of LogEntry, regardless of which models are registered at the specific site. The request is for the admin site to only show log entries for models registered at that specific site.",
        "category": "Feature Request",
        "tags": [
            "Admin Site",
            "LogEntry",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16517",
        "summary": "The issue is about mixed-case views/templates names causing 404 errors on :view:/:template: directive in Django. The problem seems to be related to the _get_view_func method.",
        "category": "Bug",
        "tags": [
            "Views",
            "Templates",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16343",
        "summary": "The issue is about a vulnerability caused by an inaccurate instantiation of django.core.signing.Signer. The developer intended to use the user's email address as the salt for the Signing instance but instead caused it to be used as the key. The proposed solution is to change the signature of Signer.__init__ to force the developer to name the parameters.",
        "category": "Bug",
        "tags": [
            "Security",
            "Signer",
            "Key",
            "Salt"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16366",
        "summary": "The issue suggests dropping support for SQLite versions less than 3.21.0. The reason is that SQLite 3.15+ supports functions in partial indexes and SQLite 3.20+ can defer constraint checks and supports PRAGMA foreign key checks.",
        "category": "Feature Request",
        "tags": [
            "SQLite",
            "Database",
            "Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16369",
        "summary": "The issue is about the current implementation of Sitemap in Django. If i18n is used, then a cartesian product between some items and some languages is displayed. There is no way to use the provided i18n automation if we want to display some items depending on the language.",
        "category": "Feature Request",
        "tags": [
            "Sitemap",
            "i18n",
            "Language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16379",
        "summary": "The issue is about a race condition in Django's FileBasedCache. Between the exists() check and open(), it's possible for the file to be deleted. This can cause an exception if many threads race to read an expired cache at once.",
        "category": "Bug",
        "tags": [
            "FileBasedCache",
            "Race Condition",
            "Cache"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16398",
        "summary": "The issue is about the QuerySet.select_related() function in Django. When used with multiple filtered relations to the OneToOneField, it sets the last one. The proposed solution is to use partial, just like the remote_setter.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "select_related",
            "OneToOneField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16400",
        "summary": "The issue is about the migrate management command in Django. When invoked with a database parameter, the migration runs successfully. However, there seems to be a DB read request that runs after the migration. This call does not respect the db param and invokes the db router.",
        "category": "Bug",
        "tags": [
            "Migrate",
            "Database",
            "DB Router"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16527",
        "summary": "The issue is about the 'show_save_as_new' function in Django's admin interface. The user suggests adding an additional verification for 'has_add_permission' because 'save_as_new' is an add modification.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Permissions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16532",
        "summary": "The issue is about a failure in RenameModel migration when there are duplicate model names in a Many-to-Many (M2M) relationship. The error occurs when the table is created for the M2M relationship and the automatic field names are 'from_incident_id' and 'to_incident_id' since models have the same names.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16560",
        "summary": "The issue is a feature request to customize the code attribute of ValidationError raised by BaseConstraint.validate. The user suggests adding a new violation_error_message parameter to BaseConstraint to allow easy addition.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16569",
        "summary": "The issue is about a bug in Django's Formsets' add_fields() method. It fails when the argument index is None and the FormSet has the attributes self.can_delete == True and self.can_delete_extra == False.",
        "category": "Bug",
        "tags": [
            "Formsets",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16578",
        "summary": "The issue is a suggestion to change the signature of BaseConstraint to use keyword-only arguments as a separate cleanup. The user notes that name and violation_error_message are already keyword-only in all the BaseConstraint subclasses in Django code base.",
        "category": "Feature Request",
        "tags": [
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16588",
        "summary": "The issue is about a bug in Django's floatformat template filter. It crashes when used with 0 values, throwing a ValueError: valid range for prec is [1, MAX_PREC].",
        "category": "Bug",
        "tags": [
            "Template Filter",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16595",
        "summary": "The issue reports that the migration optimizer does not reduce multiple AlterField operations. The problem arises when the AddField model is separated from the AlterField, resulting in none of the AlterField operations being reduced.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16597",
        "summary": "The issue reports a failure in query compilation when a WINDOW expression is referred to in a subquery. The error is a ValueError indicating the need for either 'using' or 'connection'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Subquery",
            "WINDOW expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16599",
        "summary": "The issue reports a crash when querying with an integer larger than SQLite supports, resulting in an OverflowError. The error occurs when accessing a URL with a large integer.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "URL",
            "OverflowError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16600",
        "summary": "The issue reports a regression where aggregate queries are rejected by the database due to the aggregated field being added to the GROUP BY clause. The error only occurs on the second evaluation of the query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Aggregate",
            "GROUP BY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16603",
        "summary": "The issue reports that the ASGI http.disconnect message is not handled correctly on requests that include a body. The http.disconnect message is only dealt with while reading the request body.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "http.disconnect",
            "Request Body"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16612",
        "summary": "The issue reports that AdminSite.catch_all_view() drops query strings in redirects when settings.APPEND_SLASH = True. The redirect does not include the query strings.",
        "category": "Bug",
        "tags": [
            "AdminSite",
            "Redirect",
            "Query String",
            "APPEND_SLASH"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16614",
        "summary": "The issue is about the default scheme for URLs in django.forms.fields.URLField.to_python. Currently, it assumes 'http' as the default scheme for URLs that do not specify a scheme. The user suggests that 'https' should be the default scheme as it is a safer option.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "Forms"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16629",
        "summary": "The user proposes a feature addition to how Choices are handled when used on model fields. Currently, Field.choices only accepts iterables. The user suggests that the field should also accept the Choice class directly and deal with the variation internally. This would improve OpenAPI generation of choice sets and remove unnecessary guesswork to find a proper name.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Choices",
            "OpenAPI"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16631",
        "summary": "The user reports an issue with the SECRET_KEY_FALLBACKS not being used for sessions. After rotating the secret key and adding the old one to SECRET_KEY_FALLBACKS, all users on the site were logged out. The user suggests that the documentation for SECRET_KEY_FALLBACKS may be incorrect.",
        "category": "Bug",
        "tags": [
            "Sessions",
            "Security",
            "SECRET_KEY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16635",
        "summary": "The user reports a bug where migrations try to add a constraint before adding a foreign key, resulting in an error. The user provides steps to reproduce the bug.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Database",
            "Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16642",
        "summary": "The user reports an issue with the FileResponse setting the content type as text/html, even if the last file extension is 'Z' or 'br'.",
        "category": "Bug",
        "tags": [
            "FileResponse",
            "Mime Type"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16649",
        "summary": "The user reports a potential issue with the positioning of columns added with annotate(). The positioning is not controllable with values() and has the potential to disrupt union() unless this fact is known and the ordering done in a certain way to accommodate it.",
        "category": "Bug",
        "tags": [
            "Querysets",
            "annotate()",
            "union()"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16657",
        "summary": "The issue is about an error that occurs when executing QuerySet.update() on querysets in descending order by annotations. The error message indicates that the keyword 'message_length' cannot be resolved into a field.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Annotations"
        ]
    },
    {
        "instance_id": "django__django-16661",
        "summary": "The issue is about the ModelAdmin.lookup_allowed() function incorrectly raising a DisallowedModelAdminLookup error when a foreign key is used as a primary key. The issue seems to be caused by the admin thinking that having a foreign key field as a primary key is the same as concrete inheritance.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Database",
            "Foreign Key",
            "Primary Key"
        ]
    },
    {
        "instance_id": "django__django-16662",
        "summary": "The issue is about the import ordering in migration files violating the Django coding style and isort defaults. The issue suggests that migration files should be generated with imports sorted by module, independent of import style.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Coding Style",
            "Import Ordering"
        ]
    },
    {
        "instance_id": "django__django-16667",
        "summary": "The issue is about the SelectDateWidget crashing with an OverflowError. The issue occurs when user-controlled values are converted into a date without guarding against a possible OverflowError.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Widgets",
            "Validation",
            "OverflowError"
        ]
    },
    {
        "instance_id": "django__django-16670",
        "summary": "The issue is about the ASGIStaticFilesHandler raising a warning about the incorrect iterator type being used. The issue suggests that the fix is to have ASGIStaticFilesHandler adapt the iterator in the same way StreamingHttpResponse does.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "Static Files",
            "Warning"
        ]
    },
    {
        "instance_id": "django__django-16686",
        "summary": "The issue is about the values() function not mentioning annotations as valid choices on resolving error. The error message does not mention annotation as a valid choice.",
        "category": "Bug",
        "tags": [
            "Database",
            "Annotations",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-16750",
        "summary": "The issue is about a ValueError that occurs when annotating with Chr. The user suggests setting output_field = CharField() in Chr to prevent this.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Annotations"
        ]
    },
    {
        "instance_id": "django__django-16757",
        "summary": "The issue is about the Django admin site not reporting a system check error when a reversed foreign key is used in 'list_display'. The user suggests that using a reversed foreign key should also result in a system check error instead of a 500 response.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Foreign Key",
            "System Check Error"
        ]
    },
    {
        "instance_id": "django__django-16759",
        "summary": "The issue is about the 'lookup_allowed' function not considering dynamic 'list_filter'. The user suggests changing the code to iterate over 'get_list_filter(request)' instead of 'self.list_filter'.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "List Filter",
            "Lookup Allowed"
        ]
    },
    {
        "instance_id": "django__django-16786",
        "summary": "The issue is about the 'FilteredRelation' resolving its conditions too late, which can result in unknown alias references at SQL compilation time. The user suspects an underlying issue with how JOINs are detected and added to a query when there are nested field references.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "FilteredRelation",
            "JOIN"
        ]
    },
    {
        "instance_id": "django__django-16801",
        "summary": "The issue is about the 'ImageField' unnecessarily adding a post_init signal handler to the model, which causes performance issues. The user suggests removing the post_init signal if 'width_field' and 'height_field' are not set.",
        "category": "Bug",
        "tags": [
            "Performance",
            "ImageField",
            "Signal Handler"
        ]
    },
    {
        "instance_id": "django__django-16802",
        "summary": "The issue is about the 'random' template filter crashing on an empty list, while 'first' and 'last' filters do not raise anything. The user suggests that the behavior of all three filters should be the same when the list is empty.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "List"
        ]
    },
    {
        "instance_id": "django__django-16693",
        "summary": "The issue is about improving the error message for incorrect context processors in Django. When a template context processor returns the wrong type, the error message is not clear. The user suggests handling this in a similar way to how Django handles views returning the wrong type.",
        "category": "Feature Request",
        "tags": [
            "Error Handling",
            "Template Context Processor"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16707",
        "summary": "The issue is about the inability to print the input formats for django.forms.fields.DateField using __str__, while __repr__ works. The user expected the string representation to be available.",
        "category": "Bug",
        "tags": [
            "Forms",
            "DateField",
            "String Representation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16735",
        "summary": "The issue is about i18n_patterns() not respecting prefix_default_language=False. After upgrading Django from 4.1.7 to 4.2.0, navigating to /admin/ causes a HTTP 302 and only /en/admin/ works, even though prefix_default_language=False is explicitly defined.",
        "category": "Bug",
        "tags": [
            "URLs",
            "i18n_patterns",
            "Language Prefix"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16745",
        "summary": "The issue is about StepValueValidator not taking into account min_value. The user defines a number input with min=1 and step=2, but StepValueValidator always uses 0 as the base, so only even numbers are allowed. This conflicts with the client side validation.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation",
            "StepValueValidator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16746",
        "summary": "The issue is about the inability to change error messages raised by Paginator.validate_number method. The user wants to customize and internationalize these error messages.",
        "category": "Feature Request",
        "tags": [
            "Paginator",
            "Error Messages",
            "Internationalization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16749",
        "summary": "The issue is about ASGIRequest not respecting settings.FORCE_SCRIPT_NAME. The user sets settings.FORCE_SCRIPT_NAME = '/some-prefix', but the login form action url is '/admin/login' instead of '/some-prefix/admin/login'.",
        "category": "Bug",
        "tags": [
            "ASGIRequest",
            "URLs",
            "FORCE_SCRIPT_NAME"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16810",
        "summary": "The issue reports a bug where translatable URL patterns raise a 404 error for non-English default language when prefix_default_language=False is used. The problem seems to be that the function get_language_from_path returns None in case of failure instead of LANGUAGE_CODE.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Translation",
            "HTTP 404"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16816",
        "summary": "The issue reports a bug where error E108 does not cover some cases. The user has two models, Question and Choice, and if list_display = ['choice'] is written in QuestionAdmin, no errors are returned. However, visiting /admin/polls/question/ returns an internal server error.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16819",
        "summary": "The issue is a feature request to reduce AddIndex/RemoveIndex operations when optimizing migration operations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migration",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16820",
        "summary": "The issue reports a bug where squashing migrations with Meta.index_together -> Meta.indexes transition should remove deprecation warnings. The user is unable to get rid of the index_together deprecation warnings without rewriting migrations.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Deprecation Warning"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16824",
        "summary": "The issue reports a bug where the dbshell management command can crash if DATABASES['name'] is a PosixPath. The user suggests that coercing each item in e.cmd to string should fix this.",
        "category": "Bug",
        "tags": [
            "Database",
            "Command Line",
            "Crash"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16830",
        "summary": "The issue reports a bug where the force_insert flag is not passed when saving parents on inherited models. The user suggests that Model.save_base should pass force_insert along to Model._save_parents, and onto Model._save_table to prevent the extra UPDATE and respect the spirit of the force_insert feature.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16888",
        "summary": "The issue is about a change in behavior in Django 4.2 when querying for decimals larger than max_digits on SQLite. Previously, it would return ObjectNotFound, but now it throws a decimal.InvalidOperation error. The user suggests that the backend should either accept larger values and always return 'not found', or the error should be more descriptive.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16899",
        "summary": "The issue is about the error message for readonly_fields in ModelAdmin. The current error message indicates the index of the value at fault but does not include the field's name. The user suggests unifying this and including the field name in the readonly_fields checks.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Message",
            "ModelAdmin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16901",
        "summary": "The issue is about incorrect SQL generation for Q(\u2026) ^ Q(\u2026) ^ Q(\u2026) with more than 2 arguments on databases that don\u2019t natively support XOR, such as PostgreSQL. The correct interpretation is that a ^ b ^ c is true when an odd number of the arguments are true, but Django\u2019s fallback interpretation is that a ^ b ^ c is true when exactly one argument is true.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL",
            "SQL Generation",
            "Q Objects"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16902",
        "summary": "The issue is about the RIGHT database function on Oracle returning the whole string instead of an empty string when the given length is 0. The user suggests that it should return the empty string as PostgreSQL does, or at least this behavior should be documented.",
        "category": "Bug",
        "tags": [
            "Database",
            "Oracle",
            "SQLite",
            "RIGHT Function"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16903",
        "summary": "The issue is about a diamond shape inheritance causing a duplicated PK error when creating an object, if the primary key field has a default. The user suggests a change in the _save_table method in db/models/base.py to fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Inheritance",
            "Primary Key",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16910",
        "summary": "The issue is about the only() function not working with select_related() on a query using the reverse lookup for a OneToOne relation in Django 4.2. All the fields from the related model are still included in the generated SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "OneToOneField",
            "select_related",
            "only"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16858",
        "summary": "After upgrading from Django 4.1 to 4.2, the `get_prep_value` method is no longer called for JSONField. This has caused issues with a custom JSONField that has a `get_prep_value()` override. The user suggests either calling `get_prep_value()` for JSONField like all other fields or documenting this exception clearly.",
        "category": "Bug",
        "tags": [
            "JSONField",
            "Database",
            "Upgrade",
            "get_prep_value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16865",
        "summary": "When creating a migration with a custom name using `makemigrations --name`, running `--update` changes the custom name to the autogenerated one. The user suggests that this behavior is unexpected and should either be corrected or documented.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Update",
            "Custom Name"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16873",
        "summary": "In a template, when `autoescape` is off, the `join` filter still escapes the joining string. The user believes this is a bug as it contradicts the expected behavior.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "Join",
            "Autoescape"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16877",
        "summary": "The user suggests the creation of a new template filter `escapeseq` which would escape each item of a list before applying the join operation. This would be useful in a context where `autoescape` is off.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Filter",
            "escapeseq",
            "Join"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16879",
        "summary": "A QuerySet that was working on Django 4.1.X and prior versions stopped working on 4.2.X. The issue arises when using a Case-When clause over an aggregated field to avoid a zero division problem.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Aggregation",
            "Case-When",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16883",
        "summary": "The user suggests allowing users to override the table name to model conversion logic when implementing a custom `inspectdb` command. This would be useful when table names are already in PascalCase.",
        "category": "Feature Request",
        "tags": [
            "inspectdb",
            "Table Name",
            "Model Conversion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17029",
        "summary": "The issue reports that the apps.clear_cache() function in Django does not clear the get_swappable_settings_name cache. The user suggests adding a line of code to clear this cache.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Apps"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17045",
        "summary": "The issue suggests adding a system check for unmatched URL paths' angle brackets. Currently, unmatched angle brackets are silently ignored, leading to potential debugging difficulties.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17046",
        "summary": "The issue reports a bug where deleting objects after searching a related many-to-many field crashes the admin page. The error seems to be related to calling delete() after .distinct().",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Database",
            "Many-to-Many Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17051",
        "summary": "The issue reports that when using bulk_create with a conflict handling flag turned on, the primary keys are not set in the returned queryset. The user suggests modifying the code to return the IDs in the case of update_conflicts.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "QuerySet",
            "bulk_create"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17058",
        "summary": "The issue suggests adding support for NULLS [NOT] DISTINCT to UniqueConstraint in Django. This feature is present in the 2023 SQL standard and implemented in PostgreSQL 15.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "UniqueConstraint",
            "NULLS DISTINCT"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17065",
        "summary": "The issue reports that BoundField.as_widget() ignores aria-describedby that is passed in the attrs argument. The user suggests modifying the code to check for aria-describedby in attrs first.",
        "category": "Bug",
        "tags": [
            "Forms",
            "BoundField",
            "Accessibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16920",
        "summary": "The issue is about the lack of association between field errors and the field, and between the help text and the field, for screen reader users. The proposed solution is to use aria-describedby.",
        "category": "Bug",
        "tags": [
            "Accessibility",
            "Form Rendering",
            "Screen Reader",
            "HTML"
        ]
    },
    {
        "instance_id": "django__django-16938",
        "summary": "The issue is about the failure of serialization of many-to-many relations with a custom manager using select_related. The error is due to a conflict between select_related and only.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "Database",
            "Many-to-Many Relations",
            "Custom Manager"
        ]
    },
    {
        "instance_id": "django__django-16948",
        "summary": "The issue is about the misuse of format_html to format HTML before calling it, which acts like mark_safe and allows data through without escaping. The proposal is to deprecate calls to format_html that don\u2019t pass args or kwargs.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Security",
            "Data Escaping"
        ]
    },
    {
        "instance_id": "django__django-16950",
        "summary": "The issue is about the Django Admin not using the default value of UUIDField when using Inlines. The value of 'id' in the Thing model is being set to null.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "UUIDField",
            "Inlines",
            "Model"
        ]
    },
    {
        "instance_id": "django__django-16952",
        "summary": "The issue is about the crash when creating objects with more complicated multi-table inheritance. The error is due to an AttributeError: 'OneToOneField' object has no attribute 'attname'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Inheritance",
            "Object Creation"
        ]
    },
    {
        "instance_id": "django__django-16983",
        "summary": "The issue is about the lack of system check for filter_horizontal/filter_vertical on ManyToManyFields with intermediary models. The proposal is to add a system check for this.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "System Check",
            "ManyToManyField",
            "Intermediary Models"
        ]
    },
    {
        "instance_id": "django__django-17066",
        "summary": "The issue is about the non-deterministic order of the migration serializer for sets. The user suggests adding a serializer specifically for unordered sequences to ensure stable output.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Serializer",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17084",
        "summary": "The user is unable to use aggregate over window functions after upgrading to Django 4.2. The issue is causing an exception when executing ORM queries.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Database",
            "Aggregation",
            "Window Functions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17087",
        "summary": "The issue is about the inability to use class methods from nested classes as Field.default. The migration is passed a wrong value leading to an error during migration.",
        "category": "Bug",
        "tags": [
            "Models",
            "Migration",
            "Field Default"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-5158",
        "summary": "The issue is about the error message raised when trying to execute a non-existent command outside a Django project. The error message is misleading and does not fit the actual error.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-5470",
        "summary": "The issue is about the script prefix for django.core.urlresolvers not being set when called through manage.py. This causes problems when rendering views or reversing URLs from a manage.py command.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Script Prefix"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-7188",
        "summary": "The issue is about the inability to use the auth machinery without having django.contrib.auth in INSTALLED_APPS. The user suggests allowing the use of auth machinery without installing the auth app.",
        "category": "Feature Request",
        "tags": [
            "Authentication",
            "Middleware",
            "INSTALLED_APPS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9003",
        "summary": "The issue reports a non-deterministic crash in django.db.models.sql.Query.combine() when executing a complex query with many-to-many self-joins and ORs. The crash is due to a logical error in Query.combine or related functions, causing an assertion error. The issue is complex due to the nature of the query and the unpredictability of the crash.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "Many-to-Many",
            "Self-Joins",
            "ORs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9296",
        "summary": "The issue suggests implementing the __iter__ function in the Paginator object to iterate over all the pages, instead of using the page_range function. This would make the iteration more natural and logical in Python.",
        "category": "Feature Request",
        "tags": [
            "Paginator",
            "Iteration",
            "Python"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9703",
        "summary": "The issue suggests an enhancement for the management command invocation to suggest commands for mistyped commands. This would save time for users who can't remember the full management command name.",
        "category": "Feature Request",
        "tags": [
            "Management Command",
            "User Experience",
            "Command Suggestion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9871",
        "summary": "The issue suggests reordering the management command arguments in the --help output to prioritize command-specific arguments. This would make the useful information more visible to the user by placing it at the beginning of the output.",
        "category": "Feature Request",
        "tags": [
            "Management Command",
            "User Experience",
            "Help Output"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-7475",
        "summary": "The issue is about enhancing the manage.py diffsettings command to allow comparison with another settings module, not just the default Django settings. This is useful for users who use a hierarchy of settings modules.",
        "category": "Feature Request",
        "tags": [
            "Settings",
            "Command Line",
            "manage.py"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-7530",
        "summary": "The issue reports a bug in the makemigrations command where it incorrectly calls allow_migrate() for each app with all the models in the project rather than for each app with the app's models. This causes problems for routers that pass invalid combinations for shards.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Models",
            "Routers"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8119",
        "summary": "The issue is a feature request to allow expressions in .filter() calls. This would enable 3rd party apps to create query syntax extensions and unify the ORM experience.",
        "category": "Feature Request",
        "tags": [
            "ORM",
            "Query",
            "Filter",
            "Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8326",
        "summary": "The issue is a feature request to add a 'unified diff' output mode to the diffsettings management command. This is because most people are used to unified diffs as opposed to the current '###' formatting of diffsettings.",
        "category": "Feature Request",
        "tags": [
            "Command Line",
            "manage.py",
            "diffsettings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8630",
        "summary": "The issue is a feature request to add a next_page attribute to LoginView, similar to the one in LogoutView. This would allow overriding of settings.LOGOUT_REDIRECT_URL.",
        "category": "Feature Request",
        "tags": [
            "Views",
            "Login",
            "Logout",
            "Redirect"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8961",
        "summary": "The issue reports a problem with the program name for Django's command-line utility. The help command renders the program name incorrectly, and there are inconsistencies in how manage.py is executed on different platforms.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "manage.py",
            "django-admin"
        ],
        "error": ""
    }
]