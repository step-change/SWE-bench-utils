[
    {
        "instance_id": "django__django-10680",
        "summary": "The issue proposes refactoring AutoField logic into a mixin to inherit system checks and validation checks from IntegerField and BigIntegerField. This could potentially make it easier to define new types of auto fields based on other fields in the future.",
        "category": "Feature Request",
        "tags": [
            "Refactoring",
            "AutoField",
            "IntegerField",
            "BigIntegerField",
            "Inheritance",
            "Validation",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10730",
        "summary": "The issue reports an infinite loop in ExceptionReporter.get_traceback_frames() when a cause/context cycle is generated.",
        "category": "Bug",
        "tags": [
            "ExceptionReporter",
            "Infinite Loop",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10737",
        "summary": "The issue suggests that FieldError's raised should include the field that caused the error for better debugging.",
        "category": "Feature Request",
        "tags": [
            "FieldError",
            "Error Handling",
            "Debugging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10853",
        "summary": "The issue reports that Django doesn't check the SQLite version or availability of window functions, leading to an OperationalError when the generated SQL is executed on SQLite versions that do not support window functions.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "Window Functions",
            "OperationalError",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10880",
        "summary": "The issue reports a query syntax error when a Count annotation containing both a Case condition and a distinct=True param is used.",
        "category": "Bug",
        "tags": [
            "Query",
            "Syntax Error",
            "Count Annotation",
            "Case Condition",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10904",
        "summary": "The issue proposes replacing the use of OSError aliases with OSError in the Django code base for simplification and consistency with Python 3.3 and onwards.",
        "category": "Feature Request",
        "tags": [
            "OSError",
            "Code Cleanup",
            "Python 3.3"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10087",
        "summary": "The issue reports a misleading error message in sqlmigrate due to lack of validation for migration existence.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10097",
        "summary": "The issue reports that URLValidator accepts invalid characters in the username and password fields of a URL, which is against RFC 1738 section 3.1. The issue suggests that the validation regex should be fixed to reject these invalid URLs.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Regex"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10213",
        "summary": "The issue suggests adding a --force-colors flag to Django management commands to output ANSI color sequences in cases where colors would be disabled by default.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Command Line Interface"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10287",
        "summary": "The issue reports that when the ordering class member in Meta of a model contains a field from a related model that does not exist, django's makemigrations does not throw an error. The issue suggests adding validation for related fields and lookups in model Meta.ordering.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10301",
        "summary": "The issue reports that SQLite functions crash on NULL values.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "NULL Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10316",
        "summary": "The issue reports that diffsettings raises a misleading exception message if using settings.configure(). The issue suggests checking if settings are configured before calling settings._setup().",
        "category": "Bug",
        "tags": [
            "Settings",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10390",
        "summary": "The issue is about the Trunc() function in Django not handling exceptions raised by pytz when it truncates to a nonexisting or ambiguous datetime. The user suggests that the function should not check the validity of truncated dates.",
        "category": "Bug",
        "tags": [
            "Database",
            "Datetime",
            "Truncation",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10426",
        "summary": "The issue is about the lack of app label validation in the showmigrations command in Django. The user suggests that this validation should be added to the command.",
        "category": "Feature Request",
        "tags": [
            "App Label",
            "Validation",
            "Showmigrations Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10531",
        "summary": "The issue is about the history for a model object in the Django admin section not showing human-readable messages. The user suggests that verbose names should be favored over field names.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model History",
            "Verbose Names"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10554",
        "summary": "The issue is about the union queryset with ordering breaking on ordering with derived querysets in Django. The user provides a simple reproduction of the issue.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Ordering",
            "Derived Querysets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10606",
        "summary": "The issue is about the use of RelatedOnlyFieldListFilter with a reverse ManyToMany relation causing an exception in Django. The user suggests that the method in ForeignObjectRel.get_choices is missing the parameter that Field.get_choices has.",
        "category": "Bug",
        "tags": [
            "RelatedOnlyFieldListFilter",
            "ManyToMany Relation",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10643",
        "summary": "The issue is about the icontains lookup not accepting UUIDs with or without dashes in Django. The user suggests that Django should handle this internally and make the search possible by the value as displayed in the admin.",
        "category": "Feature Request",
        "tags": [
            "UUID",
            "Icontains Lookup",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10910",
        "summary": "The issue is about incorrect query generation when using timezone determined like 'timezone(timedelta(hours=some_hours))' with Django ORM and PostgreSQL. The timezone is interpreted in POSIX style, leading to incorrect timezone shifts.",
        "category": "Bug",
        "tags": [
            "Database",
            "Timezone",
            "ORM",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10914",
        "summary": "The issue is about inconsistent file permissions for files uploaded to FileSystemStorage, depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used. The user suggests adding a warning in the documentation about this behavior.",
        "category": "Documentation",
        "tags": [
            "File Uploads",
            "Permissions",
            "FileSystemStorage"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10924",
        "summary": "The issue is about the FilePathField path not accepting a callable. The user wants to create a model containing the path to local files, which are stored in different locations on different machines.",
        "category": "Feature Request",
        "tags": [
            "FilePathField",
            "Models",
            "File Path"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10939",
        "summary": "The issue is about a ModelAdmin with custom widgets, inlines, and filter_horizontal merging media in a broken order, leading to a MediaOrderConflictWarning and inlines.js loading before jQuery.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Widgets",
            "Inlines",
            "Media"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10957",
        "summary": "The issue is about deprecating legacy functions in django.utils.translation that remain for Python 2 Unicode backwards compatibility. The user suggests that these shims can be deprecated for removal.",
        "category": "Feature Request",
        "tags": [
            "Deprecation",
            "Translation",
            "Python 2 Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10973",
        "summary": "The issue is about using subprocess.run and PGPASSWORD for the client in the postgres backend. The user suggests that this would simplify the code and make it more reliable.",
        "category": "Feature Request",
        "tags": [
            "Postgres Backend",
            "Subprocess",
            "PGPASSWORD"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10989",
        "summary": "The issue is about a crash on Windows due to the use of ellipses in output strings. The problem is related to the default code page of Windows terminals, which is roughly equivalent to ASCII. The issue did not occur in Django 2.1.7.",
        "category": "Bug",
        "tags": [
            "Windows",
            "ASCII",
            "Output Strings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10997",
        "summary": "The issue suggests adding the applied datetime value to the showmigrations command. This would help in identifying new migrations that need to be rolled back when switching between branches with different migrations.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Datetime",
            "Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-10999",
        "summary": "The issue is about the parse_duration() function not matching negative durations due to the definition of the <hours> part in the regular expression. A fix is suggested to include '-?' in the lookahead part of the <hours> definition.",
        "category": "Bug",
        "tags": [
            "Duration",
            "Parsing",
            "Regular Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11001",
        "summary": "The issue is about the SQLCompiler incorrectly removing an 'order by' clause due to it being similar but not identical to another clause. The problem is related to the use of multiline RawSQLs and the way the SQLCompiler identifies duplicates.",
        "category": "Bug",
        "tags": [
            "SQLCompiler",
            "RawSQL",
            "Order By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11003",
        "summary": "The issue is about a disabled ModelChoiceField yielding an error despite being initialised with a valid choice. The error message is also criticised for not being informative. The issue is possibly related to a previous bugfix.",
        "category": "Bug",
        "tags": [
            "ModelChoiceField",
            "Validation",
            "Error Message"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11011",
        "summary": "The issue suggests that FileResponse should always set the Content-Disposition header, not just when as_attachment is true. This would allow the browser to set a default name for the file when a user attempts to download it.",
        "category": "Feature Request",
        "tags": [
            "FileResponse",
            "Content-Disposition",
            "Browser"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11019",
        "summary": "The issue is about Django throwing unnecessary MediaOrderConflictWarnings when merging 3 or more media objects. The problem arises from the order in which the media objects are added, causing Django to impose a constraint that one file must appear before another, which is incorrect.",
        "category": "Bug",
        "tags": [
            "Media",
            "Forms",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11030",
        "summary": "The issue is about subquery expressions being unnecessarily added to the group by clause in Django. The user believes this is causing their query to run slowly. They are asking if there is a way to toggle this behavior off so that the ORM can produce the accurate query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Subquery",
            "ORM"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11034",
        "summary": "The issue is about the label_suffix in the AdminReadonlyField class in Django's admin being hard-coded to ':'. This is not configurable and cannot be translated, which is a problem for languages that use a space before ':', like French.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Localization",
            "Fields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11039",
        "summary": "The issue is about Django's sqlmigrate wrapping its output in BEGIN/COMMIT even if the database doesn't support transactional DDL. The user suggests considering connection.features.can_rollback_ddl when assigning self.output_transaction in sqlmigrate.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11044",
        "summary": "The issue is about Django's Form data/files initializing with a regular dict instead of a QueryDict when None is provided. This causes problems as methods of the form might rely on the API of a QueryDict, which a regular dict doesn't provide.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Data",
            "Files"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11049",
        "summary": "The issue is about the error message for invalid DurationField in Django. The current error message suggests a format that is inconsistent with the actual behavior. The user suggests updating the error message and adding a default help_text with the requested format.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Fields",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11053",
        "summary": "The issue is about the settings.configure() and UserSettingsHolder.__getattr__() allowing non-upper settings to be set and retrieved, which contradicts the documentation. This can lead to unexpected behavior.",
        "category": "Bug",
        "tags": [
            "Settings",
            "Configuration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11057",
        "summary": "The issue is about the admin check for AuthenticationMiddleware not allowing subclasses. This is causing a problem when trying to upgrade from Django 2.1 to 2.2b1.",
        "category": "Bug",
        "tags": [
            "Admin",
            "AuthenticationMiddleware",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11062",
        "summary": "The issue is about a ProgrammingError when trying to aggregate an annotated field calculated with django.db.models.functions.Extract. This is causing a problem when trying to calculate hourly usages.",
        "category": "Bug",
        "tags": [
            "Database",
            "Aggregation",
            "Annotation",
            "Extract"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11066",
        "summary": "The issue is about RenameContentType._rename() not saving the content type on the correct database. This is causing a problem when running a migration which contains a call to migrations.RenameModel.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "RenameModel"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11070",
        "summary": "The issue is a feature request to add autocomplete attribute to contrib.auth fields. This can improve user experience by preventing browsers prefill with current password and suggesting a random strong password.",
        "category": "Feature Request",
        "tags": [
            "Authentication",
            "Autocomplete",
            "Forms"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11085",
        "summary": "The issue is about custom model metaclasses not being able to access the attribute dict in __init__. This is causing various failures against django stable/2.2.x.",
        "category": "Bug",
        "tags": [
            "Models",
            "Metaclass",
            "Attributes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11119",
        "summary": "The issue is about the Engine.render_to_string method in Django not honoring the autoescape attribute. If an engine is created with autoescape=False and its render_to_string() method is called, the result will always be autoescaped.",
        "category": "Bug",
        "tags": [
            "Engine",
            "Autoescape",
            "Rendering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11129",
        "summary": "The issue is about an incorrect error message when using QuerySet.update() that requires a join on an annotated F expression. The error message is misleading and does not provide clear information about the actual problem.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11133",
        "summary": "The issue is about HttpResponse not handling memoryview objects correctly. When trying to write a BinaryField retrieved from the database into a HttpResponse, Postgresql returns the contents of the field as a memoryview object, which Django doesn't handle correctly.",
        "category": "Bug",
        "tags": [
            "HttpResponse",
            "Memoryview",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11138",
        "summary": "The issue is about the TIME_ZONE value in DATABASES settings not being used when making dates timezone-aware on MySQL, SQLite, and Oracle. The issue is that the conversion should go from the database timezone to the Django app one, but it goes from UTC to the Django app one instead.",
        "category": "Bug",
        "tags": [
            "Database",
            "Timezone",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11141",
        "summary": "The issue is about allowing migrations directories without __init__.py files. The migrate command currently checks for existence of a __file__ attribute on the migrations package, which prevents migrate from working on namespace packages.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Namespace Packages"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11149",
        "summary": "The issue is about admin inlines for auto-created ManyToManyFields being editable even if the user only has the view permission. This allows users with view only permissions to add or remove items at will.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Permissions",
            "ManyToManyFields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11087",
        "summary": "The issue is about an unexpected UnicodeDecodeError during a .delete() run by a daily data purging management command after upgrading Django 1.11 installation from Python 2.7 to Python 3.6. The error occurs during the .delete() of Jobs. The issue suggests that Django ORM should handle the unicode conversion itself and Django shouldn't be fetching fields that are not needed for the .delete().",
        "category": "Bug",
        "tags": [
            "Database",
            "Python Upgrade",
            "UnicodeDecodeError",
            "ORM"
        ]
    },
    {
        "instance_id": "django__django-11088",
        "summary": "The issue is about a TypeError that occurs when trying to undo a migration after changing the default value of a BinaryField from '' to b''. The issue suggests a possible fix in the effective_default method in the base schema.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "BinaryField"
        ]
    },
    {
        "instance_id": "django__django-11095",
        "summary": "The issue is a feature request to add a ModelAdmin.get_inlines() hook to allow setting inlines based on the request or model instance. Currently, this can be achieved by overriding the get_inline_instances method.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "ModelAdmin",
            "Inlines"
        ]
    },
    {
        "instance_id": "django__django-11096",
        "summary": "The issue is about the inability to use admin_order_field on properties in the admin. The ModelAdmin class allows to specify properties from the model in list_display. However, admin_order_field does not work on properties.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "ModelAdmin",
            "admin_order_field"
        ]
    },
    {
        "instance_id": "django__django-11099",
        "summary": "The issue is about ASCIIUsernameValidator and UnicodeUsernameValidator accepting usernames which end with a newline due to a quirk in Python regexes. The issue suggests changing the validator regex to reject usernames that end with a newline.",
        "category": "Bug",
        "tags": [
            "Validation",
            "UsernameValidator",
            "Regex"
        ]
    },
    {
        "instance_id": "django__django-11115",
        "summary": "The issue is about the difficulty in tracking down the offending models for AlreadyRegistered exceptions. The issue suggests that it would be helpful if the exception gave more details about the already-registered model.",
        "category": "Feature Request",
        "tags": [
            "Error Handling",
            "AlreadyRegistered",
            "Models"
        ]
    },
    {
        "instance_id": "django__django-11155",
        "summary": "The issue proposes adding settings to set Secure, HttpOnly, and SameSite on the language cookie. The default values maintain the current behavior. The reasons for adding them include requirements from auditors and browser nudges towards HttpOnly and Secure when possible.",
        "category": "Feature Request",
        "tags": [
            "Cookies",
            "Security",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11163",
        "summary": "The issue reports that the model_to_dict() function returns all fields when called with an empty list of fields, instead of returning an empty dictionary. A proposed solution is provided.",
        "category": "Bug",
        "tags": [
            "Models",
            "Data Conversion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11165",
        "summary": "The issue reports that the new HTTPRequest.headers object is not usable in templates because variable lookups cannot use hyphens. A suggestion is made to include a parallel set of keys in underscored variables.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Templates",
            "Headers"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11166",
        "summary": "The issue reports that the admin app has a hard dependency on the sessions app, which can cause problems for projects using a replacement session management app. A suggestion is made to get rid of the app check and do what's being done for various middleware in the checks function.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Sessions",
            "Middleware"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11169",
        "summary": "The issue suggests adding a new system check message when a custom error handler 'path.to.view' cannot be imported. This would catch ModuleNotFoundError or ViewDoesNotExist exceptions.",
        "category": "Feature Request",
        "tags": [
            "System Check",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11170",
        "summary": "The issue reports a UnicodeDecodeError when loading debug templates. The error was resolved by changing the encoding format to utf-8 when reading the technical_500.html file from inside the debug.py file.",
        "category": "Bug",
        "tags": [
            "Debugging",
            "Templates",
            "Unicode"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11177",
        "summary": "The autoreloader in Django 2.2 is not consistently detecting changes to .py files, causing the runserver to not reload as expected. This behavior is different from previous versions of Django.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11179",
        "summary": "When deleting a model with no dependencies, the primary key (PK) on the model is not updated and set to None.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Delete"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11185",
        "summary": "The Model.delete(keep_parents=True) function does not preserve all parent reverse relationships, including relationships toward parents of parents.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Delete",
            "Relationships"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11194",
        "summary": "The RSS views.py uses settings.LANGUAGE_CODE as the language tag for the RSS feed, and there is currently no way to change it.",
        "category": "Feature Request",
        "tags": [
            "RSS",
            "Language",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11205",
        "summary": "Inefficient SQL is generated when counting a ManyToMany relation, including a useless join that slows down the process significantly.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "ManyToMany",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11206",
        "summary": "The utils.numberformat.format function renders small decimals in exponential notation when using decimal_pos, which can lead to unexpected results.",
        "category": "Bug",
        "tags": [
            "Utils",
            "Number Format",
            "Decimals"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11260",
        "summary": "The inspectdb command generates a unique ForeignKey instead of a OneToOneField, causing fields.W342 warnings.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "InspectDB"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11265",
        "summary": "Using exclude on a queryset with an annotated FilteredRelation results in a FieldError on the annotation name.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "FilteredRelation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11270",
        "summary": "The startapp command overlays on the target directory without validating the target directory's name, which can cause import issues if the name is invalid.",
        "category": "Feature Request",
        "tags": [
            "Command Line",
            "Startapp",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11276",
        "summary": "The django.utils.html.escape() function duplicates the Python stdlib function html.escape(). The proposal is to replace the Django function with the Python stdlib function for improved performance and wider community support.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Performance",
            "Utils"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11278",
        "summary": "The name field for constraints (check and unique) and partial indexes must be unique in the database scope. A system check for uniqueness of names is proposed.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Constraints",
            "Indexes",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11279",
        "summary": "The proposal is to allow %(app_label)s and %(class)s to be specified in the name argument for BaseConstraint (CheckConstraint, UniqueConstraint) and Index. This would allow for specifying check constraints and partial indexes in abstract models.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Constraints",
            "Indexes",
            "Abstract Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11211",
        "summary": "The issue is about the Django ORM engine returning None for attribute 'foo' when trying to get queryset with prefetch related for a model that uses UUID field as primary key and another model with GFK to the first model.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "UUID",
            "GFK",
            "Prefetch Related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11214",
        "summary": "The issue is about a CheckConstraint with a Q(x__in=range(y, z)) condition being repeatedly deleted and re-added when running makemigrations. The user suspects that the issue is because the range is converted into a tuple.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "CheckConstraint",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11216",
        "summary": "The issue is about ManifestStaticFilesStorage leaving behind intermediate files when using collectstatic, which generates duplicate versions of some files. The user suggests adding a keep_intermediate_files property to HashedFilesMixin.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "ManifestStaticFilesStorage",
            "Collectstatic"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11234",
        "summary": "The issue is about prefetch related not working when used GFK for a model that uses FK as primary key. The user gets None instead of a value when prefetching the GenericForeignKey field content_object.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "GFK",
            "FK",
            "Prefetch Related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11239",
        "summary": "The issue is about the dbshell command not supporting the client cert params, even though Django supports this configuration. The user suggests adding support for the other 'ssl' parameters required.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "PostgreSQL",
            "dbshell",
            "TLS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11244",
        "summary": "The issue is about a system check which verifies that LANGUAGES_BIDI is a subset of LANGUAGES, breaking installations of Django using a custom LANGUAGES list which do not also override LANGUAGES_BIDI. The user proposes to remove the translation.E005 check.",
        "category": "Bug",
        "tags": [
            "System Check",
            "Translation",
            "LANGUAGES_BIDI",
            "LANGUAGES"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11281",
        "summary": "The issue is about improving the typography of user-facing strings in Django. The user suggests using different characters for quotes, contractions, and ellipsis.",
        "category": "Feature Request",
        "tags": [
            "Typography",
            "User Interface"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11283",
        "summary": "The user is facing an error while migrating to Django 2.2. The migration fails due to a duplicate key value violation. The issue seems to be related to the handling of proxy models in the migration.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "Proxy Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11292",
        "summary": "The user proposes to expose the 'skip_checks' option in the command line for management commands. This would allow users to skip checks when running a command from the command line.",
        "category": "Feature Request",
        "tags": [
            "Management Commands",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11294",
        "summary": "The issue is about the 'pluralize' filter returning the singular form instead of an empty string when it's passed an object that isn't a number, a string, or a list. The user suggests a change in the implementation logic.",
        "category": "Bug",
        "tags": [
            "Filters",
            "String Manipulation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11298",
        "summary": "The user suggests allowing ManyToManyField using an intermediary table to be defined as symmetrical. This would simplify the process of adding friends in the given example.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11299",
        "summary": "The issue is about the incorrect SQL generated for CheckConstraint with OR operator on SQLite and Oracle. The problem seems to be with the fully qualified field name included in the check constraint.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "CheckConstraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11374",
        "summary": "The function django.utils.http.urlencode gives unexpected results for tuple values when no iterations are expected. This is a problem when objects have a __str__ method defined, returning the value one would want to be in the urlencode result, but the object is also iterable.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11377",
        "summary": "The deprecation warning introduced in Django 2.2 about Meta.ordering being ignored from Django 3.1 onwards leads to errors when a query expression is used. The error occurs when trying to concatenate string representations of all the list items.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11383",
        "summary": "When saving a parent object after setting it on a child object and then saving the child object, no error is thrown but the FK relation is saved with a NULL value.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11389",
        "summary": "To make the SESSION_COOKIE_AGE setting dynamic based on certain parameters of the session, the methods get_expiry_age and get_expiry_date need to be reimplemented in SessionStore subclasses.",
        "category": "Feature Request",
        "tags": [
            "Session Management"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11396",
        "summary": "Ordering a query by a constant value on PostgreSQL results in a ProgrammingError: non-integer constant in ORDER BY.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11399",
        "summary": "The class preparation for lazy() is not being cached correctly. This makes functions like gettext_lazy, format_lazy and reverse_lazy slower than they should be.",
        "category": "Bug",
        "tags": [
            "Performance",
            "Lazy Loading"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11323",
        "summary": "The SelectDateWidget in a required field is rendering invalid HTML. According to the HTML5 standard, every select with a required attribute must have a placeholder option with an empty string as a value, which is not the case with SelectDateWidget.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Forms",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11333",
        "summary": "Multiple URLResolvers may be unintentionally constructed by calls to `django.urls.resolvers.get_resolver` if `django.urls.base.set_urlconf` has not yet been called, resulting in multiple expensive calls to URLResolver._populate. The proposed solution is to modify `get_resolver` to look up settings.ROOT_URLCONF before the memoized function call.",
        "category": "Bug",
        "tags": [
            "URL",
            "Optimization",
            "URLResolver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11334",
        "summary": "Django's template library tags can't use already decorated things like lru_cache because of getfullargspec. The issue can be solved by unwrapping the function.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Decorators",
            "Caching"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11354",
        "summary": "QuerySet.count() does not work with raw SQL annotations on inherited model fields. If a RawSQL annotation of Item's queryset includes one of the fields defined in BaseItem and .count() is called on the annotated queryset, it fails with an error.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Inheritance",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11356",
        "summary": "If you set on_delete=None as a ForeignKey field parameter, you might get a TypeError: 'NoneType' object is not callable. The suggestion is to validate the on_delete value to prevent such behaviour.",
        "category": "Bug",
        "tags": [
            "Database",
            "ForeignKey",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11359",
        "summary": "When trying to update a SearchVectorField with a string that is not in any other field, an error is generated: FieldError: Cannot resolve expression type, unknown output_field. This seems to be a bug.",
        "category": "Bug",
        "tags": [
            "Database",
            "SearchVectorField",
            "Value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11433",
        "summary": "The issue is about the inability to overwrite a model's default value with 'self.cleaned_data' when submitting a form and the field isn't included in the data payload. This does not follow the paradigm of modifying data in 'cleaned_data'.",
        "category": "Bug",
        "tags": [
            "Form",
            "Model",
            "Data Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11446",
        "summary": "The issue reports that the default 404 error page served in 'DEBUG=False' mode is not a correctly formed HTML page. The user expects a full webpage to be sent.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11451",
        "summary": "The issue is about the ModelBackend.authenticate() function making a database query when the username is None. The user suggests a shortcut to avoid this unnecessary database query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Authentication"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11457",
        "summary": "The issue is about improving exceptions about mixed types in Expressions. The user suggests that the source which raises the exception should provide more detailed information about the types found and which were unexpected.",
        "category": "Feature Request",
        "tags": [
            "Error Handling",
            "Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11477",
        "summary": "The issue reports that the translate_url() function creates an incorrect URL when optional named groups are missing in the URL pattern.",
        "category": "Bug",
        "tags": [
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11490",
        "summary": "The issue is about the inability of composed queries to change the list of columns when values()/values_list() is evaluated multiple times.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11400",
        "summary": "The issue is about the ordering problem in admin.RelatedFieldListFilter and admin.RelatedOnlyFieldListFilter. The ordering does not fall back to the ordering defined in Model._meta.ordering. The ordering gets set to an empty tuple and unless ordering is defined on the related model's ModelAdmin class it stays an empty tuple. It should fall back to the ordering defined in the related model's Meta.ordering field.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11405",
        "summary": "The issue is about the mutability of Queryset order and Meta.ordering with reverse(). The bug is revealed by running ./runtests.py ordering.test --reverse. The order mutates on queryset execution in SQLCompiler.get_order_by().",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11417",
        "summary": "The issue is about updating the mail backend to use a modern standard library parsing approach. The current method uses email.utils.parseaddr from the standard lib. On Python 3, email.headerregistry.parser.get_mailbox() does the same, and is less error-prone.",
        "category": "Feature Request",
        "tags": [
            "Email",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11422",
        "summary": "The issue is about the Autoreloader with StatReloader not tracking changes in manage.py. Under Django 2.1.8 (and prior), editing the manage.py file will trigger the auto-reloading mechanism. Under 2.2.1, it won't.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "File Tracking"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11423",
        "summary": "The issue is about GenericRelation and prefetch_related: wrong caching with cyclic prefetching. The problem is that _prefetched_objects_cache holds the wrong value, which is accessed through .all() -> .get_queryset() where the cached/prefetched result is taken.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Caching"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11428",
        "summary": "The issue is about the Autoreloader crashing on re-raising exceptions with custom signature. The problem is that django.utils.autoreload.raise_last_exception tries to construct a new exception of the same type, with 1 argument (the original exception). This results in a TypeError exception about __init__() missing 1 required positional argument.",
        "category": "Bug",
        "tags": [
            "Autoreloader",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11501",
        "summary": "The issue is about the 'createsuperuser' management command not being suitable for scripting, even with the '--no-input' flag, as it doesn't set a password. The suggestion is to make the command inspect some environment variables to pick up the username, password and possibly all other required fields.",
        "category": "Feature Request",
        "tags": [
            "Management Command",
            "Environment Variables",
            "Authentication"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11514",
        "summary": "The issue is about the 'never_cache' decorator not working as expected because it lacks 'Cache-Control: private' in the HTTP header. The user suggests adding this header to a response to prevent resources from being cached by CDN providers.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Cache",
            "Decorator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11517",
        "summary": "The issue is about the 'call_command' raising a ValueError when a subparser 'dest' is passed in options. The problem arises when a management command contains subparsers and is called using 'call_command'.",
        "category": "Bug",
        "tags": [
            "Management Command",
            "Subparser",
            "ValueError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11525",
        "summary": "The issue is about the 'mail_admins()'/'mail_managers()' functions not raising exceptions when settings are not in expected formats. The user suggests that Django should fail early if the 'MANAGERS' setting is detected but improperly set.",
        "category": "Bug",
        "tags": [
            "Email",
            "Settings",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11527",
        "summary": "The issue is about the 'sqlsequencereset' not providing any output if there are no results returned by 'connection.ops.sequence_reset_sql'. The user suggests that if 'len(statements) == 0', it should raise a 'CommandError' and say there's nothing to do.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQL",
            "CommandError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11532",
        "summary": "The issue is about email messages crashing on non-ASCII domain when email encoding is non-unicode. The user suggests that Django should handle the encoding of the message properly and convert the domain name to punycode before using.",
        "category": "Bug",
        "tags": [
            "Email",
            "Encoding",
            "Non-ASCII"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11539",
        "summary": "The issue suggests moving index name checks from Index.__init__ into system checks for cleaner and more consistent code.",
        "category": "Feature Request",
        "tags": [
            "Index",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11543",
        "summary": "The issue reports that runserver fails to close connection if --nothreading option is specified. This is due to the Web browser using multiple connections with Connection: keep-alive header by default.",
        "category": "Bug",
        "tags": [
            "Runserver",
            "Connection",
            "Threading"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11550",
        "summary": "The issue reports that order_by() on union() querysets results in wrong ordering when the same field type is presented multiple times. The problem seems to come from a specific commit.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Ordering",
            "Union"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11551",
        "summary": "The issue reports that admin.E108 is raised on fields accessible only via instance. This is due to a change in Django's validation of the ModelAdmin's list_display list/tuple for correctness.",
        "category": "Bug",
        "tags": [
            "Admin",
            "ModelAdmin",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11555",
        "summary": "The issue reports a bug when using a query expression for ordering during multi-table inheritance. The bug occurs because the field is an OrderBy object, not a string, during get_order_dir.",
        "category": "Bug",
        "tags": [
            "Ordering",
            "Inheritance",
            "Query Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11559",
        "summary": "The issue reports a bug when using a query expression for ordering during multi-table inheritance. The bug occurs because the field is an OrderBy object, not a string, during get_order_dir.",
        "category": "Bug",
        "tags": [
            "Ordering",
            "Inheritance",
            "Query Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11560",
        "summary": "The issue is about a ValueError raised when using ExtractYear lookups on a DurationField. The problem arises because ExtractYear compares the source date with a range of dates, which fails when the source is a duration rather than a date.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Lookups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11564",
        "summary": "The issue is a feature request to add support for SCRIPT_NAME in STATIC_URL and MEDIA_URL. Currently, the static tag does not prepend the SCRIPT_NAME prefix when running on a sub-path, resulting in incorrect static URLs.",
        "category": "Feature Request",
        "tags": [
            "URL",
            "Static Files"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11583",
        "summary": "The issue is about a ValueError: embedded null byte error that is thrown very intermittently when using StatReloader for auto-reloading. The problem seems to be related to Pathlib, and the exact cause or how to reproduce it is not clear.",
        "category": "Bug",
        "tags": [
            "Auto-reloading",
            "StatReloader",
            "Pathlib"
        ],
        "error": "The issue is complex due to the intermittent nature of the error and the uncertainty about how to reproduce it."
    },
    {
        "instance_id": "django__django-11584",
        "summary": "The issue is a bug where running the development server in a Docker container with volume-mounted source throws a FileNotFoundError. The problem is consistently reproducible with Django==2.2.3 and not present in Django==2.1.4.",
        "category": "Bug",
        "tags": [
            "Docker",
            "FileNotFoundError",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11591",
        "summary": "The issue is about raising a descriptive error on unsupported operations following QuerySet.union(), intersection(), and difference(). Currently, some operations like QuerySet.count() might appear to work, causing confusion.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "Union",
            "Intersection",
            "Difference"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11592",
        "summary": "The issue is a feature request to start passing FileResponse.block_size to wsgi.file_wrapper. Currently, the block_size attribute of FileResponse class can be customized but it's not passed to wsgi.file_wrapper.",
        "category": "Feature Request",
        "tags": [
            "FileResponse",
            "WSGI",
            "File Wrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11603",
        "summary": "The issue is about adding DISTINCT support for Avg and Sum aggregates in Django. Currently, these aggregations throw an exception if DISTINCT is used, which is a change from previous behavior where the parameter was simply ignored.",
        "category": "Feature Request",
        "tags": [
            "Aggregates",
            "Database",
            "DISTINCT"
        ]
    },
    {
        "instance_id": "django__django-11605",
        "summary": "The issue is about Django's check for window expressions in filters. The current check is shallow and does not cover the right side of the expression or combined expressions. The issue suggests raising a descriptive error when a window expression is used in a filter.",
        "category": "Bug",
        "tags": [
            "Filter",
            "Window Expressions",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-11612",
        "summary": "The issue is about SQLite3 migrations failing when a model's Meta db_table is quoted. The issue suggests that the generated query is causing the error. The issue also includes a traceback of the error.",
        "category": "Bug",
        "tags": [
            "SQLite3",
            "Migrations",
            "Database",
            "db_table"
        ]
    },
    {
        "instance_id": "django__django-11618",
        "summary": "The issue is about PermissionErrors being cloaked in ManifestFilesMixin.read_manifest(). The current error handling catches any OSError and proceeds by returning no content, which can leave the app in an unrecoverable state. The issue suggests more granular error handling or logging to hint to the developer that there was a problem.",
        "category": "Bug",
        "tags": [
            "ManifestFilesMixin",
            "Error Handling",
            "PermissionErrors"
        ]
    },
    {
        "instance_id": "django__django-11620",
        "summary": "The issue is about raising Http404 in a path converter's to_python method not resulting in a technical response when DEBUG is True. The issue suggests that raising a Http404 should be a valid way to tell the resolver to stop and let the handler return the 404 page.",
        "category": "Bug",
        "tags": [
            "Http404",
            "DEBUG",
            "URL Resolver"
        ]
    },
    {
        "instance_id": "django__django-11622",
        "summary": "The issue is about adding a helpful exception for invalid values passed to AutoField/FloatField/IntegerField. Currently, when a large model is updated and saved with invalid values, Django produces a traceback deep within the ORM, with no clue which field assignment caused the error. The issue suggests displaying the field name to make spotting errors easier.",
        "category": "Feature Request",
        "tags": [
            "AutoField",
            "FloatField",
            "IntegerField",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-11630",
        "summary": "After upgrading to Django 2.2, an error is thrown when different apps with different models have the same table name. This was not an issue in previous versions.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "App",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11638",
        "summary": "In Django 2.2.1, the test client throws an exception if a None value is provided in data given to a POST. The user proposes an improvement to the error message to display the offending Key and Value that generate the exception.",
        "category": "Feature Request",
        "tags": [
            "Test Client",
            "POST",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11666",
        "summary": "The 'patch_vary_headers' function appends new headers to the list. If the Vary header is set to asterisk, the resulting header may violate the HTTP spec. The user suggests handling the '*' value in the 'patch_vary_headers' caching utility.",
        "category": "Feature Request",
        "tags": [
            "HTTP",
            "Headers",
            "Caching"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11669",
        "summary": "Only TemplateView pushes self.kwargs to the context, while ListView does not. The user suggests fixing this inconsistency.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "ListView",
            "Context"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11677",
        "summary": "Nested OuterRef is not looking on the right model for the field, resulting in a FieldError. The user provides a test case for this issue.",
        "category": "Bug",
        "tags": [
            "Models",
            "FieldError",
            "Nested OuterRef"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11680",
        "summary": "When saving a new model instance with a primary key that has a default, an unnecessary UPDATE query is executed. The user suggests removing this UPDATE query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11688",
        "summary": "The issue is about Django's URL path converters not handling spaces well. The problem arises when constructing a valid looking converter reference with leading/trailing spaces or spaces in between, which results in an invalid regex and an empty kwargs dictionary.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Regex"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11692",
        "summary": "The issue is about the inability to use OuterRef in a union Subquery in Django. When a QuerySet is made using the union method or the | operator, the QuerySet passed into the union method cannot reference OuterRef even when wrapped with Subquery, resulting in a ValueError.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11695",
        "summary": "The issue is about the Ajax autocomplete widget in Django triggering a request for every key-press, creating unnecessary load on servers. A patch has been proposed to rate-limit the requests by adding a delay using the ajax.delay option provided by Select2.",
        "category": "Feature Request",
        "tags": [
            "Ajax",
            "Widgets",
            "Server Load"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11701",
        "summary": "The issue is about Django's admin search crashing with an error when a null character is input. The error message states that a string literal cannot contain NUL (0x00) characters.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Search",
            "Null Character"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11707",
        "summary": "The issue is about the pickling of a QuerySet in Django evaluating the querysets given to Subquery in annotate. The problem arises because the QuerySet is still stored on the instance within the _constructor_args attribute added by the @deconstructible decorator on the BaseExpression base class.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Pickling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11727",
        "summary": "The issue is a feature request to allow hiding the 'Save and Add Another' button in Django's admin interface with a show_save_and_add_another context variable. This would provide better adjustability to the interface.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "UI Customization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11728",
        "summary": "The function replace_named_groups() fails to replace the final named group if the urlpattern passed in is missing a trailing '/'. This function is used downstream in Django REST Framework.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "REST Framework"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11734",
        "summary": "The test fails when trying to exclude results using OuterRef(). It results in a ValueError: This queryset contains a reference to an outer query and may only be used in a subquery.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11740",
        "summary": "Changing a UUID field to a ForeignKey does not create a dependency for the related model. This results in a ValueError when trying to resolve the related model.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "UUID",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11742",
        "summary": "There is no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices. This can cause issues when trying to save a record with values that are too long.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Field Choices"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11749",
        "summary": "The call_command function fails when an argument of a required mutually exclusive group is passed in kwargs. This results in a CommandError.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "Argument Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11751",
        "summary": "The proposal is to make Django use more security headers by default on new projects. This includes activating security headers SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, and X_FRAME_OPTIONS by default in the startproject settings.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Headers",
            "Project Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11754",
        "summary": "This issue suggests allowing the use of an ExceptionReporter subclass in django.views.debug.technical_500_response, which is currently hardcoded. It proposes moving this to a parameter and providing an example of using a subclass when specifying handler500. It also suggests adding ExceptionReporter to the documentation and a DEFAULT_EXCEPTION_REPORTER setting.",
        "category": "Feature Request",
        "tags": [
            "Exception Handling",
            "Debugging",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11772",
        "summary": "This issue discusses the make_template_fragment_key function in django.core.cache.utils, suggesting improvements for speed and simplicity. It proposes removing the use of urllib.quote for vary_on args, switching from MD5 to SHA256 for hashing, and using the hashlib .update() method instead of creating a string of all joined vary_on args.",
        "category": "Feature Request",
        "tags": [
            "Template Cache",
            "Hashing",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11790",
        "summary": "This issue reports that the AuthenticationForm's username field no longer renders with the maxlength HTML attribute, which is a regression introduced in #27515 and 5ceaf14686ce626404afb6a5fbd3d8286410bf13.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "HTML",
            "Form Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11797",
        "summary": "This issue reports that filtering on a query result overrides the GROUP BY of the internal query. The issue provides a code snippet demonstrating the problem, where the GROUP BY clause should be on the 'email' field, but it is instead on the 'id' field.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11808",
        "summary": "This issue reports that Model.__eq__ does not return NotImplemented when it encounters an object it doesn't know how to compare against, which can cause bugs. It suggests that Model.__eq__ should return NotImplemented according to the Python 3 data model reference.",
        "category": "Bug",
        "tags": [
            "Model",
            "Equality Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11810",
        "summary": "This issue reports that when creating a new QuerySet from an existing QuerySet that has had 'select_related' applied, applying another 'select_related' to the new QuerySet mutates the original QuerySet. The issue provides a code snippet demonstrating the problem and suggests that this behavior is incorrect.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Mutation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11815",
        "summary": "The issue is about Django's migration using the value of an Enum object instead of its name as a default value for a CharField. This causes a problem when the Enum object value is translated to the user's language, causing old migration files to raise an error.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Enum",
            "CharField",
            "Translation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11820",
        "summary": "The issue reports a problem where models.E015 is raised when Meta.ordering contains __pk of a related field. This is a regression in a specific commit.",
        "category": "Bug",
        "tags": [
            "Models",
            "Meta.ordering",
            "Related Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11823",
        "summary": "The issue is about the cache_control() 'max_age' overriding cache_page() 'timeout'. If a view is decorated with both, the server side cache uses the max_age value instead of the timeout value, which is not the expected behavior.",
        "category": "Bug",
        "tags": [
            "Cache Control",
            "Timeout",
            "Decorators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11829",
        "summary": "The issue reports that patch_cache_control needs to special case 'no-cache'. The current implementation does not treat 'no-cache' as a list and does not take precedence over no_cache='foo' regardless of the order it is applied.",
        "category": "Bug",
        "tags": [
            "Cache Control",
            "No-Cache"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11848",
        "summary": "The issue is about the incorrect two digit year check in django.utils.http.parse_http_date. The current logic is hard coded to consider 0-69 to be in 2000-2069, and 70-99 to be 1970-1999, instead of comparing versus the current year.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Date Parsing",
            "RFC"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11880",
        "summary": "The issue reports that the __deepcopy__ method for form fields does not (deep)copy the error messages. As a result, all copies of the same field share the same dictionary and any modification of either the dictionary or the error message itself for one formfield is immediately reflected on all other formfields.",
        "category": "Bug",
        "tags": [
            "Form Fields",
            "Deep Copy",
            "Error Messages"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11883",
        "summary": "The issue is about enhancing the cache.delete() function to return a value indicating whether the operation was successful or not. This is useful for complex caching/locking systems or for logging purposes. The implementation should be straightforward for file, in-memory, and database backends.",
        "category": "Feature Request",
        "tags": [
            "Cache",
            "Backend",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11885",
        "summary": "The issue is about optimizing the deletion process in Django. When emulating ON DELETE CASCADE via on_delete=models.CASCADE, the deletion.Collector performs fast queries. The issue suggests combining such queries by table to reduce the number of roundtrips to the database.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Deletion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11891",
        "summary": "The issue is about the ConditionalGetMiddleware returning a 304 status even if the ETag is the same but the Last-Modified has changed. This is problematic when used in combination with apache x-sendfile (django-sendfile).",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "ETag",
            "Last-Modified"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11893",
        "summary": "The issue is about the DateTimeField not accepting ISO 8601 formatted date string. The ISO format allows date and time separator to be a capital T letter, but Django expects only space as a date and time separator.",
        "category": "Bug",
        "tags": [
            "DateTimeField",
            "ISO 8601",
            "Date and Time"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11894",
        "summary": "The issue is about setting cookies with .set_cookie and set_signed_cookie. The default value for the samesite argument is None, but Django doesn't do anything with the None value. This is problematic as Chrome now requires samesite to be explicitly set to None for cross-origin requests.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "SameSite",
            "Cross-Origin Requests"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11903",
        "summary": "The issue is about the ManagementUtility.fetch_command printing 'No Django settings specified.' even if they are. The current implementation doesn't account for settings being set via a UserSettingsHolder by doing settings.configure(...).",
        "category": "Bug",
        "tags": [
            "ManagementUtility",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11905",
        "summary": "The issue is about the __isnull lookup in Django allowing non-boolean values, which is not documented and untested. The user suggests raising an error for non-boolean values to avoid confusion and maintain consistency.",
        "category": "Bug",
        "tags": [
            "Database",
            "Lookup",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11910",
        "summary": "This issue reports a problem with Django's ForeignKey's to_field parameter. When renaming a PrimaryKey, the to_field parameter still points to the old field's name instead of the new one.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11911",
        "summary": "The issue is about the 'migrate --plan' command in Django. It outputs 'IRREVERSIBLE' on RunPython operations without docstrings, which is incorrect. The user suggests a fix in the code to address this issue.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Command",
            "RunPython"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11916",
        "summary": "The issue discusses the inefficiency of prefetch_related in Django due to the creation of related querysets. The user suggests two options to improve performance: allowing assigning results to somewhere else than manager.all() or lazily instantiating the .all() queryset.",
        "category": "Feature Request",
        "tags": [
            "Performance",
            "Queryset",
            "prefetch_related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11951",
        "summary": "This issue reports a bug in Django's bulk_create function. The batch_size parameter overrides the compatible batch size calculation, which is inconsistent with the behavior of bulk_update. The user suggests a fix to use the minimum of the two values.",
        "category": "Bug",
        "tags": [
            "Database",
            "bulk_create",
            "batch_size"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11964",
        "summary": "The issue is about the differing type of the value returned by the getter of a field in Django when the field has choices pointing to IntegerChoices or TextChoices. The user reports that this can lead to unexpected issues, especially when communicating with an external API.",
        "category": "Bug",
        "tags": [
            "Models",
            "Field",
            "Choices"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12049",
        "summary": "The issue is about Django's migration detection failing when using a case-insensitive collation. The user is trying to keep the naming convention of their database, but Django's case sensitive comparison is causing an error when checking if a column is already present in the database.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Case Sensitivity"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12050",
        "summary": "The issue is about the Query.resolve_lookup_value function in Django's ORM. Changes introduced in a previous update cause an input value list to be coerced to tuple, breaking exact value queries. This affects ORM field types that are dependent on matching input types.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Query",
            "Type Coercion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12062",
        "summary": "The issue is a feature request to allow disabling of all migrations during tests. The user suggests adding a setting to disable all migrations on a particular database.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migration",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12073",
        "summary": "The issue is about the InvalidQuery exception in Django's ORM. The user suggests deprecating this barely documented exception and replacing its usage with other exceptions.",
        "category": "Documentation",
        "tags": [
            "ORM",
            "Exceptions",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12091",
        "summary": "The issue is about the HttpRequest.is_ajax method in Django. The user suggests deprecating this method as it inspects a non-standard header set by jQuery, which is decreasing in popularity.",
        "category": "Feature Request",
        "tags": [
            "HttpRequest",
            "Deprecation",
            "jQuery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12113",
        "summary": "The issue is about a test failure when using persistent SQLite databases for the tests. The user encounters a 'database is locked' error when trying to use persistent SQLite databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Testing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11983",
        "summary": "The issue is about a bug in the admin's date_hierarchy filter which excludes 31st October when using timezone with DST in the northern hemisphere. The problem is caused by the generated SQL having < 2019-10-31 instead of < 2019-11-01.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Date Hierarchy",
            "Timezone",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11991",
        "summary": "The issue is a feature request to add support for adding non-key columns to indexes in Django. This feature is supported by Postgres, Microsoft SQL Server, and IBM Db2. The idea is to add an additional kwarg to Index to support this.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Indexing",
            "Postgres",
            "SQL Server",
            "IBM Db2"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11997",
        "summary": "The issue is about a bug where the floatformat filter returns '-0' instead of '0' for values between 0 and -0.5. The user expects it to return '0'.",
        "category": "Bug",
        "tags": [
            "Filter",
            "Floatformat"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-11999",
        "summary": "The issue is about a bug where the user cannot override the get_FIELD_display function on models since version 2.2. It worked in version 2.1.",
        "category": "Bug",
        "tags": [
            "Models",
            "Function Override"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12009",
        "summary": "The issue is about Django installing both /usr/bin/django-admin and /usr/bin/django-admin.py. Both execute django.core.management.execute_from_command_line(). The user suggests that it would suffice to install only one of these scripts.",
        "category": "Other",
        "tags": [
            "Installation",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12039",
        "summary": "The issue is about a bug where creating an index through Index generates a valid but not so pretty CREATE INDEX statement. The user expects a proper whitespace in CREATE INDEX statements.",
        "category": "Bug",
        "tags": [
            "Database",
            "Indexing",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12121",
        "summary": "The issue is about the behavior of URL converters in Django when they fail to match a named route. The user suggests that either the function '_reverse_with_prefix' should be updated to handle ValueError as no match, similar to 'to_python', or the documentation should be updated to reflect the current behavior.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12122",
        "summary": "The issue reports that the Django template filter 'date' with argument 'r' does not return a valid RFC 2822 formatted date when the LANGUAGE_CODE is set to a language other than English. The user suggests having two arguments for this filter, one for valid RFC 2822 dates and another for the current 'r' argument.",
        "category": "Bug",
        "tags": [
            "Template Filter",
            "Localization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12125",
        "summary": "The issue reports that 'makemigrations' command in Django produces incorrect path for inner classes. When a subclass of django.db.models.Field is defined as an inner class and used inside a django.db.models.Model class, the generated migrations file refers to the inner class as if it were a top-level class.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12132",
        "summary": "The issue suggests adding subdomains of localhost to ALLOWED_HOSTS in DEBUG mode in Django. This would minimize configuration for new projects as Chrome resolves *.localhost to localhost without modifying any host files or DNS.",
        "category": "Feature Request",
        "tags": [
            "Configuration",
            "Debug Mode"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12143",
        "summary": "The issue reports a potential data loss in admin changeform view when using regex special characters in formset prefix. The user suggests that generating a regex using string formatting can cause problems when the arguments contain special regex characters.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Regex",
            "Formset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12148",
        "summary": "The issue reports that the 'reverse()' and 'get_absolute_url()' functions may return different values for the same FlatPage in Django. The user suggests that this is due to the FlatPage model implementing 'get_absolute_url()' without using 'reverse()'.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12153",
        "summary": "The issue is about a migration script that fails when the default database is not set in a multi-database environment, contrary to what is stated in the Django tutorial. The error is due to the use of transaction.atomic() in the script.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Multi-Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12155",
        "summary": "The issue is about the admindoc module in Django, which fails to render view docstrings correctly when the first line is not empty. The problem is due to the way the trim_docstring function calculates indentation.",
        "category": "Bug",
        "tags": [
            "Documentation",
            "Rendering",
            "Docstrings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12161",
        "summary": "The issue is about the inability of through_defaults to accept callable values, unlike the defaults argument of get_or_create or the default argument of any model field. Callable values are passed through without being evaluated, leading to unexpected behavior.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Model",
            "Callable Values"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12172",
        "summary": "The issue is about the inability to override 'async unsafe' checks in Django. This is problematic in environments like Jupyter, which executes apparently-synchronous code in an async environment. The suggestion is to add a flag that disables the async-unsafe check.",
        "category": "Feature Request",
        "tags": [
            "Async",
            "Jupyter",
            "Environment"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12184",
        "summary": "The issue is about a TypeError that occurs when optional URL parameters are used in view functions. The error is due to the way Django 3.0 handles optional URL parameters.",
        "category": "Bug",
        "tags": [
            "URL",
            "View Functions",
            "Parameters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12185",
        "summary": "The issue is about the inability to use window expressions in conditional statements used only in the SELECT clause. Django raises a NotSupportedError, even though the SQL standard allows this usage.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Window Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12187",
        "summary": "The issue is about the exposure of staticfiles manifest in Django deployments using ManifestStaticFilesStorage. The manifest ends up in the directory of publicly served files, which could potentially expose sensitive information. The user suggests encrypting the manifest or changing its path to somewhere non-public.",
        "category": "Feature Request",
        "tags": [
            "Static Files",
            "Security",
            "ManifestStaticFilesStorage"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12193",
        "summary": "The issue reports a problem with SplitArrayField BooleanField. When provided with preexisting data, the final_attrs dict is updated to include 'checked': True after the first True value in the initial data array. This causes every widget initialized after that to default to checked even though the backing data may be False.",
        "category": "Bug",
        "tags": [
            "SplitArrayField",
            "BooleanField",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12196",
        "summary": "The issue is about the incorrect usage of debug decorators (sensitive_variables/sensitive_post_parameters) in Django. The user suggests adding some code to both sensitive_variables() and sensitive_post_parameters() that catches this misuse to prevent users from decorating their functions incorrectly.",
        "category": "Feature Request",
        "tags": [
            "Debugging",
            "Decorators",
            "sensitive_variables",
            "sensitive_post_parameters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12198",
        "summary": "The issue reports a problem with the method authenticate of a custom AuthenticationBackend when decorated with sensitive_variables. The user suggests allowing sensitive_variables() to preserve the signature of its decorated function.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "Backend",
            "sensitive_variables"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12209",
        "summary": "The issue is about a change in behaviour when saving a model instance with an explicit pk value if the pk field has a default. The user reports that in Django 3.0, this results in two INSERTs instead of an INSERT followed by an UPDATE as in Django 2.2 and earlier.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12212",
        "summary": "The issue reports a DeserializationError where the local variable 'pk' is referenced before assignment. This error hides the real error which is 'NoneType' object is not iterable. The user suggests a change in the code to deal with None values.",
        "category": "Bug",
        "tags": [
            "Deserialization",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12225",
        "summary": "The issue is about an error message that is displayed when an inline has multiple foreign keys to the same parent model. The error message should recommend specifying fk_name.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Handling",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12231",
        "summary": "The issue is about the set() method of relatedmanager which is used to update a list of foreignkeys. The problem is that the database removes all foreignkeys and adds them again. The user suggests that Django should fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Foreign Key",
            "Related Manager"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12237",
        "summary": "The issue is about the slugify() function which does not return a valid slug for the Turkish/Azerbaijani letter '\u0130'. The user suggests that the order in which lower() is called in slugify() should be changed.",
        "category": "Bug",
        "tags": [
            "Slugify",
            "Unicode",
            "Internationalization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12262",
        "summary": "The issue is about custom template tags that raise TemplateSyntaxError when keyword-only arguments with defaults are provided. The user has a fix ready and will push it after creating the ticket.",
        "category": "Bug",
        "tags": [
            "Template Tags",
            "Syntax Error"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12273",
        "summary": "The issue is about resetting the primary key for a child model which does not work. Setting the primary key to None does not overwrite the existing object on save().",
        "category": "Bug",
        "tags": [
            "Primary Key",
            "Child Model",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12276",
        "summary": "The issue is about FileInput which displays required attribute even when initial data exists. The user suggests that ClearableFileInput.use_required_attribute() should be moved to FileInput.use_required_attribute().",
        "category": "Bug",
        "tags": [
            "FileInput",
            "HTML",
            "Form"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12308",
        "summary": "The issue is about JSONField values not being displayed correctly in the admin console when they are set to readonly. The values are displayed as a dictionary instead of valid JSON.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "JSONField",
            "Readonly"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12313",
        "summary": "The issue is about Django's 'makemigrations' command not detecting or handling changes in the case of model names. This results in repeated operations and potential exceptions.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Model Name",
            "Case Changes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12325",
        "summary": "The issue is about the setup of primary keys for Multi-Table Inheritance (MTI) getting confused by multiple OneToOne references. The order of the fields seems to matter, which it shouldn't.",
        "category": "Bug",
        "tags": [
            "MTI",
            "OneToOneField",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12343",
        "summary": "The issue is a feature request to render foreign key models as links for readonly users in the admin UI. This would allow readonly users to navigate through the relationships.",
        "category": "Feature Request",
        "tags": [
            "Admin UI",
            "Foreign Key",
            "Readonly Users"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12360",
        "summary": "The issue is about the length of auth permissions codenames exceeding the maximum limit when model names are very long. This results in a database error when trying to create permissions.",
        "category": "Bug",
        "tags": [
            "Auth Permissions",
            "Codenames",
            "Model Names"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12364",
        "summary": "The issue is about the detection of existing total ordering in admin changelist not considering UniqueConstraints without conditions. The discovery algorithm currently only checks for the presence of a unique_together attribute.",
        "category": "Bug",
        "tags": [
            "Admin Changelist",
            "Total Ordering",
            "UniqueConstraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12281",
        "summary": "The issue is about the error message for admin.E130 not specifying which __name__ attributes of actions were duplicated. The user may not understand what the __name__ attribute is or how to fix it. The error message should specify the names that occur more than once and explain where the duplicate comes from.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12284",
        "summary": "The issue is about the Model.get_FOO_display() function not working correctly with inherited choices. When a child model inherits a base model and adds more tuples to the choices, the function does not return the correct output for the new tuples added.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12286",
        "summary": "The issue is about the translation.E004 error being raised on sublanguages when a base language is available. According to Django documentation, Django should use the base language if a sublanguage is not available. However, the error is raised when the LANGUAGE_CODE setting is a sublanguage that is not in the LANGUAGES setting.",
        "category": "Bug",
        "tags": [
            "Translation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12299",
        "summary": "The issue is about the lack of a descriptive error on update()/delete() operations following QuerySet.union(), intersection(), and difference(). The b_filter() seems to merge but does not apply to the actual update.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12304",
        "summary": "The issue is about the new enumeration types not being usable in Django templates due to their being callable. The call fails because the required value argument is missing. The solution suggested is to declare do_not_call_in_templates = True on the various Choices classes.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Enumeration Types"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12306",
        "summary": "The issue is about named groups in choices not being properly validated in case of non str typed values. When using typed choices and string value to store it, it is possible to catch an error while running makemigrations (_check_choices error). The solution suggested is to add an additional argument to the max function.",
        "category": "Bug",
        "tags": [
            "Models",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12394",
        "summary": "This issue is about an error that occurs when trying to raise an error about protected related objects. The error is a TypeError indicating that 'itertools.chain' object is not subscriptable. This issue was discovered while testing the JSONField GSoC pull request.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Database",
            "Models"
        ]
    },
    {
        "instance_id": "django__django-12396",
        "summary": "This issue reports a problem where the test runner tries to access the test database without prefixing test_, leading to an access denied error. This happens when running a subset of tests that only uses the default database.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing"
        ]
    },
    {
        "instance_id": "django__django-12406",
        "summary": "This issue is about the RadioSelect widget for foreign keys in a ModelForm. The widget presents a blank option even if blank=False on the model, which is not expected behavior.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Models",
            "HTML"
        ]
    },
    {
        "instance_id": "django__django-12407",
        "summary": "This issue suggests that the Include template tag should be able to allow fallbacks by selecting the most appropriate template, similar to render/render_to_response/render_to_string. Currently, it uses get_template which does not support this feature.",
        "category": "Feature Request",
        "tags": [
            "Templates"
        ]
    },
    {
        "instance_id": "django__django-12419",
        "summary": "This issue proposes changing the default for the SECURE_REFERRER_POLICY setting to 'same-origin' to make Django applications leak less information to third party sites.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "HTTP"
        ]
    },
    {
        "instance_id": "django__django-12430",
        "summary": "This issue reports a potential data corruption problem when using caching from async code. CacheHandler uses threading.local instead of asgiref.local.Local, which can lead to a race condition if two coroutines touch the same cache object at the same time.",
        "category": "Bug",
        "tags": [
            "Caching",
            "Concurrency"
        ]
    },
    {
        "instance_id": "django__django-12431",
        "summary": "The issue reports a regression in #30565. When running tests against Postgres, an error occurs indicating that the connection is already closed. This happens when using FileResponse with a temporary file.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing",
            "FileResponse",
            "Postgres"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12441",
        "summary": "The issue reports that calling a form method _html_output modifies the self._errors dict for NON_FIELD_ERRORS if there are hidden fields with errors. This happens when the form methods as_p(), as_table(), as_ul() are called multiple times.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12453",
        "summary": "The issue reports that TransactionTestCase.serialized_rollback fails to restore objects due to ordering constraints. This happens when setting serialized_rollback = True on a TransactionTestCase triggers rollback emulation.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing",
            "TransactionTestCase"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12458",
        "summary": "The issue reports that the serialization dependency sorting disallows circular references unnecessarily. This happens when circular references are involved, preventing serialization for no good reason.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "Dependency Sorting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12464",
        "summary": "The issue reports that using DISTINCT with GROUP_CONCAT() and multiple expressions raises NotSupportedError on SQLite. This happens despite SQLite supporting DISTINCT on aggregate functions.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12469",
        "summary": "The issue reports that the admin date_hierarchy filter by month displays an extra day at timezone boundary. This happens when a user with a non-UTC timezone is authorized and opens a filter by date in a month.",
        "category": "Bug",
        "tags": [
            "Admin",
            "Date Hierarchy",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12470",
        "summary": "The issue is about the incorrect ordering of inherited models in Django. When '-pk' is specified in the parent model's Meta.ordering, the child model does not correctly order the query results in descending order as expected.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Database",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12477",
        "summary": "The issue is about Django's migration system not recognizing UniqueConstraints without conditions. The user is suggested to use unique_together, which is expected to be deprecated in the future.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Migration",
            "Unique Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12484",
        "summary": "The issue is about Django's system checks for custom user models. The error message does not provide a hint about which field is causing the problem when the USERNAME_FIELD is included in REQUIRED_FIELDS.",
        "category": "Bug",
        "tags": [
            "Admin",
            "User Model",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12485",
        "summary": "The issue is about Django's MultiPartParser not supporting double quotes in values. This causes problems when third-party tools wrap HTTP request values in double quotes.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Parsing",
            "MultiPartParser"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12486",
        "summary": "The issue is about Django's numberformat.format function incorrectly formatting large or tiny floats in scientific notation. This results in erroneous output for floats larger than 1e16 or smaller than 1e-5.",
        "category": "Bug",
        "tags": [
            "Number Formatting",
            "Floats",
            "Scientific Notation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12496",
        "summary": "The issue is about Django making an extra update query when creating a new model object using multi-inheritance model. This happens only when a custom primary key is defined in the parent model.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Inheritance",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12497",
        "summary": "The issue is about a misleading error message when there are more than 2 ForeignKeys in an intermediary model of a m2m field and no through_fields have been set. The error message suggests using 'symmetrical' and 'through' arguments which are not ForeignKey arguments but ManyToManyField arguments.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Models",
            "ForeignKey",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12503",
        "summary": "The issue is about the 'makemessages' command not providing feedback when no locale is specified. The command should raise a CommandError, but due to a bug in an if statement, this does not happen.",
        "category": "Bug",
        "tags": [
            "Command",
            "Locale",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12504",
        "summary": "The issue is about the logout link in the admin app not being CSRF-protected. The user suggests that even though protecting logout from CSRF attack might not be crucial, it is a good practice to do so.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "CSRF",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12508",
        "summary": "The issue is about the inability to run specific SQL directly with dbshell. The user suggests adding a -c argument to allow running commands directly.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQL",
            "dbshell"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12513",
        "summary": "The issue is about the 'providing_args' argument from Signal being purely documentational and not providing any functionality or checking. The user suggests deprecating this argument.",
        "category": "Feature Request",
        "tags": [
            "Signal",
            "Arguments",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12517",
        "summary": "The issue is about inconsistent datetime logging from runserver. The user suggests making the logging consistent by providing the datefmt parameter when constructing the logger.",
        "category": "Bug",
        "tags": [
            "Logging",
            "runserver",
            "Datetime"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12518",
        "summary": "The issue is about the sqlmigrate command not allowing inspection of migrations that have been squashed. The user is unable to load specific migrations and is requesting for a better error message and the ability to inspect individual migrations involved in a squash.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-12519",
        "summary": "The issue is about subquery annotations being omitted in the group by query section if multiple annotations are declared. The user is experiencing different results when upgrading to Django 3.0.2 from 2.2.9.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Annotations"
        ]
    },
    {
        "instance_id": "django__django-12532",
        "summary": "The issue is about the forms.ModelMultipleChoiceField using 'list' as the key for the error message instead of 'invalid_list' which is used by MultipleChoiceField.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Model",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-12553",
        "summary": "The issue is about increasing the default password salt size in BasePasswordHasher from ~71 bits to ~131 bits. The user has provided a patch for this and cites modern guidance suggesting a 128 bit minimum on salt sizes.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Password Hashing"
        ]
    },
    {
        "instance_id": "django__django-12556",
        "summary": "The issue is about deprecating the use of get_random_string without an explicit length. The user suggests forcing callers to specify the length value and not count on a default.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Random String Generation"
        ]
    },
    {
        "instance_id": "django__django-12568",
        "summary": "The issue is about Django's humanize intword filter not working with negative numbers. The user has created a solution using absolute value.",
        "category": "Bug",
        "tags": [
            "Humanize",
            "Intword Filter"
        ]
    },
    {
        "instance_id": "django__django-12588",
        "summary": "This issue requests an option to be added to the remove_stale_contenttypes command that would allow for the removal of entries for nonexistent apps. This option would be disabled by default.",
        "category": "Feature Request",
        "tags": [
            "Command",
            "Database",
            "Content Types"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12589",
        "summary": "This issue reports a bug in Django 3.0 where 'GROUP BY' clauses error with tricky field annotation. The error is related to ambiguous column reference 'status'. The issue does not occur in Django 2.2.11.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "GROUP BY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12591",
        "summary": "This issue reports a problem where it's impossible to replace a generic site-wide action (such as the built-in delete_selected) with a new one due to the admin.E130 system check error.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Actions",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12613",
        "summary": "This issue reports a bug where the XML serializer doesn't handle JSONFields. An error is thrown when trying to serialize a queryset that includes a JSONField.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "XML",
            "JSONField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12627",
        "summary": "This issue reports that the make_password function accepts almost every Python object as an argument, which can lead to weak passwords and is inconsistent with the documentation and other libraries' behavior.",
        "category": "Bug",
        "tags": [
            "Password",
            "Security",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12630",
        "summary": "This issue requests a new flag for the migrate command that would stop CI from deploying an application automatically when unapplied migrations exist.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Command",
            "CI/CD"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12663",
        "summary": "The issue is about a regression in Django where using SimpleLazyObject with a nested subquery annotation fails. The user provides a test case that demonstrates the issue and the traceback of the error.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Queryset",
            "Subquery",
            "SimpleLazyObject"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12669",
        "summary": "The issue is about the order_by functionality breaking when a QuerySet is annotated with a uuid key. The user suggests a change in the constant django.db.models.sql.constants.ORDER_PATTERN to fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "UUID",
            "Order_By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12671",
        "summary": "The issue is about Django management commands wrapping stdout and stderr in an OutputWrapper that adds a newline at the end of the text provided as the out argument. The user suggests allowing self.stdout.write() and self.stderr.write() to add a newline to respectively stdout and stderr.",
        "category": "Feature Request",
        "tags": [
            "Management Commands",
            "OutputWrapper",
            "Stdout",
            "Stderr"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12700",
        "summary": "The issue is about django.views.debug.SafeExceptionReporterFilter.get_safe_settings() returning several un-cleansed values. The user provides an example where the settings are not cleaned properly.",
        "category": "Bug",
        "tags": [
            "Settings",
            "Debug",
            "SafeExceptionReporterFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12708",
        "summary": "The issue is about a crash during migration when deleting an index_together if there is a unique_together on the same fields. The user provides steps to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Index_Together",
            "Unique_Together"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12713",
        "summary": "The issue is about the inability to set the widget param to function formfield_for_manytomany(). The user mentions that this is different from the formfield_for_foreignkey() function.",
        "category": "Bug",
        "tags": [
            "Formfield",
            "ManyToMany",
            "Widget"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12733",
        "summary": "The issue is about improving the performance of the sql_flush() operation by using the RESTART IDENTITY syntax in PostgreSQL to truncate and reset sequences in a single query, instead of executing an additional query per truncated table.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Performance",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12734",
        "summary": "The issue reports that Django's migration doesn't detect precision changes in fields that ManyToMany points to. The user changed the max_length of a CharField and migrated, but the corresponding field length in the related table remained unchanged.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "ManyToMany"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12741",
        "summary": "The issue suggests simplifying the signature of the `DatabaseOperations.execute_sql_flush()` method by dropping the 'using' argument and inferring it from the calling instance.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Code Improvement"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12747",
        "summary": "The issue reports an inconsistency in the result format of the QuerySet.Delete method when zero objects are deleted. The result differs between models with foreign keys and 'simple' models without foreign keys.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "QuerySet",
            "Delete"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12748",
        "summary": "The issue requests adding support to reset sequences on SQLite, suggesting the use of the internal sqlite_sequence table.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQLite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12754",
        "summary": "The issue reports a FieldError when migrating a field to a new model subclass. The migration works when creating a model subclass and moving a field onto it in the same step, but the 'migrate' command fails with a FieldError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "FieldError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12771",
        "summary": "The issue suggests changing the storage of ModeState.fields from a List[Tuple[str, models.Field]] to a Dict[str, models.Field] for efficiency and simplicity. The same change is suggested for ModelState.indexes and .constraints.",
        "category": "Feature Request",
        "tags": [
            "Models",
            "Database",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12774",
        "summary": "The issue reports a failure when running in_bulk() on a field that is unique by UniqueConstraint instead of unique=True. A patch is suggested to fix this.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "UniqueConstraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12796",
        "summary": "The issue suggests adding a flag to skip the consistency check in makemigrations when there is no active database connection or the database host isn't resolvable.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12803",
        "summary": "The issue reports that when returning None from a custom ManifestFilesMixin.file_hash() implementation, the resulting file name includes 'None'. A change in the hashed_name() method is suggested to fix this.",
        "category": "Bug",
        "tags": [
            "File Handling",
            "Hashing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12821",
        "summary": "The issue suggests stopping the minification of only some admin static assets due to inconsistency and the small size of the files. It is suggested to continue distributing the vendored libraries minified.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Static Assets",
            "Minification"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12830",
        "summary": "The issue reports an IndexError exception when accessing formset1.forms[1000] in a scenario where the max_num is at its default value of 1000. The issue suggests that the max_num parameter is not directly related to the number of forms that are actually POSTed or initialized via parameter initials.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Formsets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12851",
        "summary": "The issue suggests removing the 'ifequal' from the Django template language as it is no longer recommended or used in modern projects.",
        "category": "Feature Request",
        "tags": [
            "Template Language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12855",
        "summary": "The issue suggests deprecating the function django.conf.urls.url() as it is an alias to django.urls.re_path() and is likely to be deprecated in a future release.",
        "category": "Feature Request",
        "tags": [
            "URL",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12856",
        "summary": "The issue reports that when a model gains a UniqueConstraint, makemigrations doesn't check if the fields named therein actually exist. This is in contrast to the older unique_together syntax.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12858",
        "summary": "The issue reports that models.E015 is raised when ordering uses lookups that are not transforms. However, the ordering works fine.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12869",
        "summary": "The issue reports that collectstatic doesn't run staticfiles checks. The system checks framework has a check_finders which is invoked if django.contrib.staticfiles is in your INSTALLED_APPS.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12906",
        "summary": "The issue suggests documenting the admin's requirement on django.template.context_processors.request context processor. Since a certain commit, the admin templates use the implied request variable normally added by this context processor.",
        "category": "Documentation",
        "tags": [
            "Admin",
            "Templates",
            "Context Processors"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12908",
        "summary": "The issue reports that the distinct() function does not affect the queryset after using annotate() on two different querysets and then union().",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Union",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12910",
        "summary": "The issue suggests replacing Command.requires_system_checks = True with Command.required_system_checks = '__all__' to allow subclasses to specify tags and avoid manual and error-prone options['skip_checks'] dance.",
        "category": "Feature Request",
        "tags": [
            "Command",
            "System Checks"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12912",
        "summary": "The issue reports that the alias used in aggregate filtering is incorrect. The SQL generated for the aggregate uses the same alias for different queryset filters.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Aggregate",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12915",
        "summary": "The issue reports that the StaticFilesHandlerMixin is missing the async response function, causing an error when trying to use the ASGIStaticFilesHandler.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "StaticFilesHandler",
            "Async"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12928",
        "summary": "The issue suggests implementing autoreload behaviour for the cached template loader to get the speed benefit during development without having to restart the server every time a template is changed.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Cache",
            "Autoreload"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12933",
        "summary": "The issue reports that clearsessions writes to stderr directly when a backend has not implemented clear_expired(). It suggests raising CommandError as the recommended behavior.",
        "category": "Bug",
        "tags": [
            "CommandError",
            "clearsessions",
            "Backend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12936",
        "summary": "The issue is about the improper functioning of Subquery.__eq__() for resolved subqueries. All resolved subqueries are considered equal, which is a regression.",
        "category": "Bug",
        "tags": [
            "Subquery",
            "Database",
            "Regression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12951",
        "summary": "The issue is about the inability to provide an Exists expression to When alongside keyword arguments like you can with filter. The user suggests modifying When's init method to allow similar input as filter.",
        "category": "Feature Request",
        "tags": [
            "Exists",
            "When",
            "Filter",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12953",
        "summary": "The issue is about the need to check that CheckConstraint.check and UniqueConstraint.condition don't span joins. The user points out that not everyone is aware that database level constraint cannot span across tables.",
        "category": "Bug",
        "tags": [
            "CheckConstraint",
            "UniqueConstraint",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12957",
        "summary": "The issue is about the Geodjango js template which should use `|safe` for float values to avoid DECIMAL_SEPARATOR ruining the js syntax.",
        "category": "Bug",
        "tags": [
            "Geodjango",
            "JS Template",
            "Float Values",
            "DECIMAL_SEPARATOR"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12961",
        "summary": "The issue is about the crash that occurs when order_by() with expressions is used on union() querysets. The user suggests that the raised exception could be more explicit if this is the expected behaviour.",
        "category": "Bug",
        "tags": [
            "order_by",
            "union",
            "querysets",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12965",
        "summary": "The issue is about the performance regression in Model.objects.all().delete() subquery usage. The user points out that the subquery is a blocker for using LOCK TABLES along with delete().",
        "category": "Bug",
        "tags": [
            "Model",
            "Delete",
            "Subquery",
            "Performance Regression",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12973",
        "summary": "The issue is about the order of middleware in Django's settings. If the middleware is not in the correct order, it throws an AssertionError. The user suggests that the order of error output should be updated to avoid this exception.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Admin",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-12983",
        "summary": "The issue is about the django.utils.text.slugify() function. The user suggests that it should strip leading and trailing dashes and underscores from the slug.",
        "category": "Feature Request",
        "tags": [
            "Text Processing",
            "Slugify"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13012",
        "summary": "The issue is about the incorrect placement of constant expressions of an ExpressionWrapper object in the GROUP BY clause of a SQL query. This leads to an exception in Postgres.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Query",
            "Postgres"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13022",
        "summary": "The issue is about the memcache_key_warnings in Django. The user reports that it has a bad format string that results in raising an exception rather than just producing a warning.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Memcached",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13023",
        "summary": "The issue is about the DecimalField.to_python() function. The user reports that it raises TypeError instead of ValidationError when a dictionary is passed as the value parameter.",
        "category": "Bug",
        "tags": [
            "Model",
            "DecimalField",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13028",
        "summary": "The issue is about the Queryset filter method. The user reports that it raises NotSupportedError when the RHS has a filterable=False attribute.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Filter",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13030",
        "summary": "The issue is about the unnecessary passing of NULL to the IN lookup in prefetch_related on a ForeignKey. This could potentially lead to incorrect results with complex prefetch querysets using PK refs due to NULL's behavior in SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Queryset",
            "NULL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13032",
        "summary": "The issue is about the unclear error message when running 'makemigrations' without an active database connection. The user suggests that the error message could be improved for better understanding.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Database",
            "Makemigrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13033",
        "summary": "The issue is about the incorrect ordering of results when using a self-referencing foreign key in a queryset. The user suggests that the issue might be due to the unnecessary extra join caused by the self-referencing foreign key.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Queryset",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13066",
        "summary": "The issue is about the lack of support for Argon2id in Django's Argon2PasswordHasher. The user suggests that Django should sync with the upstream updates of the argon2-cffi library.",
        "category": "Feature Request",
        "tags": [
            "Password Hashing",
            "Argon2",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13077",
        "summary": "The issue is about the 'django-admin runserver' command frequently failing on Windows. The user suggests that the problem might be due to the stripping of the .exe extension from their own sys.argv[0] when passing that to Python to run.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Windows",
            "Runserver"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13085",
        "summary": "The issue is about the 'django-admin compilemessages' command unnecessarily running msgfmt on unchanged .po files. The user suggests that the command should only invoke msgfmt when it would do anything useful.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Compilemessages",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13089",
        "summary": "The issue reports sporadic cache errors with the database backend. The error occurs when the cursor after running connection.ops.cache_key_culling_sql() command does not return any data, causing the subsequent cursor.fetchone()[0] to fail.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Backend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13097",
        "summary": "The issue reports that formsets with can_delete=True add a delete field to every form, including 'add' forms. This behavior is inconsistent with the expected behavior and that of the built-in admin.",
        "category": "Bug",
        "tags": [
            "Formsets",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13109",
        "summary": "The issue reports that ForeignKey.validate() should validate using the base manager instead of the default manager. The current behavior causes the form to never validate as True when a user selects an archived article.",
        "category": "Bug",
        "tags": [
            "Model Validation",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13111",
        "summary": "The issue reports that WeekArchiveView should add %V to the list of accepted week formatters. This would require changing the year format to %G, or ValueError in _date_from_string should mention the message passed from datetime.datetime.strptime.",
        "category": "Feature Request",
        "tags": [
            "Date Formatting",
            "WeekArchiveView"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13112",
        "summary": "The issue reports that makemigrations crashes for ForeignKey with mixed-case app name. The error occurs when running 'python3 manage.py migrate' on Django 3.1b1.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "ForeignKey",
            "App Name"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13115",
        "summary": "The issue reports that UniqueConstraint should throw an error when deferrable is combined with parameters which require the usage of an explicit unique index through CREATE UNIQUE INDEX. This was missed when UniqueConstraint.include and UniqueConstraint.opclasses was added.",
        "category": "Bug",
        "tags": [
            "Database",
            "UniqueConstraint",
            "Index"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13212",
        "summary": "The issue requests for built-in validators to provide value to ValidationError, allowing for custom error messages with a %(value)s placeholder.",
        "category": "Feature Request",
        "tags": [
            "Validators",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-13218",
        "summary": "The issue suggests allowing migrations directories without __init__.py files, as the __file__ check is no longer needed due to changes in migration file discovery.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Python 3",
            "Namespace Packages"
        ]
    },
    {
        "instance_id": "django__django-13220",
        "summary": "The issue reports that ValidationErrors with identical messages don't equal each other, which can complicate testing. The request is to add an __eq__ method for comparison.",
        "category": "Bug",
        "tags": [
            "ValidationError",
            "Testing"
        ]
    },
    {
        "instance_id": "django__django-13230",
        "summary": "The issue requests for the addition of a comments argument to feed.add_item() in syndication.views, allowing for direct definition of item_comments.",
        "category": "Feature Request",
        "tags": [
            "Syndication",
            "Feed"
        ]
    },
    {
        "instance_id": "django__django-13233",
        "summary": "The issue reports that the model attribute of image fields no longer points to the concrete model in Django 3.2, making model and field introspection harder.",
        "category": "Bug",
        "tags": [
            "Image Fields",
            "Model",
            "Django 3.2"
        ]
    },
    {
        "instance_id": "django__django-13236",
        "summary": "The issue suggests that RenameField with db_column should be a noop, as only the Django column changes, not the database db_column.",
        "category": "Bug",
        "tags": [
            "Database",
            "RenameField"
        ]
    },
    {
        "instance_id": "django__django-13118",
        "summary": "The issue is about the incorrect SQL generated for negated F() expressions in Django's ORM. The problem arises when trying to query rectangles that are not squares. The ORM generates different SQL for the same semantic queries, leading to different results.",
        "category": "Bug",
        "tags": [
            "Database",
            "ORM",
            "SQL",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13121",
        "summary": "The issue is about the failure of duration-only expressions on SQLite and MySQL databases in Django. The problem occurs when trying to annotate an Experiment model's estimated_time field with a timedelta.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "MySQL",
            "Models",
            "DurationField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13128",
        "summary": "The issue is about the inability to perform temporal subtraction without using ExpressionWrapper in Django. The problem arises when trying to annotate the difference between the start and end DateTimeFields of an Experiment model.",
        "category": "Bug",
        "tags": [
            "Models",
            "DateTimeField",
            "DurationField",
            "ExpressionWrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13145",
        "summary": "The issue is a feature request to add a 'depth' parameter to the timesince function in Django. This would allow users to configure how many values are shown, and also suggests refactoring the time calculation logic for custom implementations.",
        "category": "Feature Request",
        "tags": [
            "timesince",
            "DateTime",
            "Functionality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13158",
        "summary": "The issue is about the unexpected behavior of QuerySet.none() on combined queries in Django. The problem arises when changing the queryset to use union() in a ModelMultipleChoiceField, which results in all objects being added when the form is submitted empty.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Models",
            "Forms",
            "Admin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13162",
        "summary": "The issue is a feature request to improve the default name of merge migrations in Django. The suggestion is to create the filename by combining the files being merged, making it easier to understand which migrations were merged without inspecting the file.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "File Naming"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13165",
        "summary": "The issue is about a regression in Django 3.2 where ExpressionWrapper loses output_field for combined expression without an output_field. The user has provided a model and a query that throws an exception in Django 3.2 but works as expected in Django 3.0.8.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "Regression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13170",
        "summary": "The user is requesting a feature where FilteredRelation's condition should support nested relations. The current limitation is explained with an example where the system throws a ValueError when trying to use nested relations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "FilteredRelation",
            "Nested Relations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13192",
        "summary": "The issue is about Django's inability to send emails with names longer than 75 characters due to a recent security update in Python. The user has provided a link to the Python update that causes this issue.",
        "category": "Bug",
        "tags": [
            "Email",
            "Python",
            "Security Update"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13195",
        "summary": "The user reports a warning message from Firefox about the 'SameSite' attribute of a cookie. The issue seems to be with the HttpResponseBase's delete_cookie method not setting the 'SameSite' setting on Set-Cookie headers.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "HttpResponse",
            "Firefox",
            "SameSite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13199",
        "summary": "This issue is identical to the previous one (django__django-13195). It's about a warning message from Firefox about the 'SameSite' attribute of a cookie. The issue seems to be with the HttpResponseBase's delete_cookie method not setting the 'SameSite' setting on Set-Cookie headers.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "HttpResponse",
            "Firefox",
            "SameSite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13207",
        "summary": "The user is suggesting a feature to support custom collations in Django. The user has provided links to the mailing list discussion and the PostgreSQL documentation about nondeterministic collations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Collation",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13237",
        "summary": "When a db_column is added to a model field, the migration unnecessarily drops and recreates constraints, which is a blocking operation for PostgreSQL. This is undesirable as nothing really changed in the database structure.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13240",
        "summary": "Django raises an ImproperlyConfigured error during settings initialization if a SECRET_KEY is not provided. The issue suggests that the error should be raised when the SECRET_KEY is accessed instead, to accommodate use cases where the SECRET_KEY is not required.",
        "category": "Feature Request",
        "tags": [
            "Settings",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13250",
        "summary": "SQLite doesn't provide a native way for testing containment of JSONField. The current implementation doesn't support nested structures and doesn't follow the general principle of containment testing.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13251",
        "summary": "Filtering on a model with a field named 'negate' raises a TypeError. The issue suggests that 'negate' is not documented as a reserved argument for .filter().",
        "category": "Bug",
        "tags": [
            "Models",
            "Filtering",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13265",
        "summary": "When '_order' is included in Index() and AlterOrderWithRespectTo() is used with ForeignKey, it causes a crash. The issue suggests that AlterOrderWithRespectTo should proceed before AddIndex of '_order'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "Index"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13267",
        "summary": "Instantiating an abstract model with a foreign key raises a TypeError in Django 1.9.8. The issue suggests that this might be an undocumented backwards-incompatible change.",
        "category": "Bug",
        "tags": [
            "Models",
            "Abstract Model",
            "ForeignKey",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13279",
        "summary": "The issue is about the inability to decode session data during the transition to Django 3.1 due to a change in the format for session data. The proposed solution is to use the legacy encode() when DEFAULT_HASHING_ALGORITHM == 'sha1'.",
        "category": "Bug",
        "tags": [
            "Session",
            "Data Decoding",
            "Transition",
            "Django 3.1"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13281",
        "summary": "The issue reports a change in behavior of Foreign Key (FK) fields when copying model instances during an upgrade from Django 1.11.x to 2.0/2.2. The problem is that the copied model instance does not retain the original FK field values.",
        "category": "Bug",
        "tags": [
            "Foreign Key",
            "Model Instance",
            "Upgrade",
            "Django 2.x"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13287",
        "summary": "The issue is about a crash that occurs when an app with default_app_config and without apps.py or with an empty apps.py. The error is an UnboundLocalError, indicating that a local variable 'app_config_name' is referenced before assignment.",
        "category": "Bug",
        "tags": [
            "App Configuration",
            "Crash",
            "apps.py",
            "default_app_config"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13295",
        "summary": "The issue reports a silent failure when saving a non-concrete field with update_fields. The problem is that the model is saved without saving the non-concrete field and no error is emitted.",
        "category": "Bug",
        "tags": [
            "Non-concrete Field",
            "Model Saving",
            "update_fields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13297",
        "summary": "The issue is about a crash that occurs when filtering SimpleLazyObjects returned by kwargs in TemplateView.get_context_data(). The problem is specific to Django 3.1 and does not occur in Django 3.0.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "get_context_data",
            "SimpleLazyObjects",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13300",
        "summary": "The issue is a feature request to use 'EXISTS(SELECT 1 ...)' for subqueries in Django's QuerySet calls. The requester suggests that this change could make queries easier to debug.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "Subqueries",
            "EXISTS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13301",
        "summary": "The createsuperuser command in interactive mode suggests a default username which is validated against the default database, not considering the database option passed to the command. This causes issues when using multiple databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "Command",
            "User Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13315",
        "summary": "When a Q object is passed as limit_choices_to on a ForeignKey field involving a join, duplicate options may appear in the form.",
        "category": "Bug",
        "tags": [
            "Database",
            "Form",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13321",
        "summary": "Decoding an invalid session data causes the application to crash. This issue was encountered after upgrading to Django 3.1 and seems to be related to an old session still being active.",
        "category": "Bug",
        "tags": [
            "Session",
            "Decoding",
            "Upgrade"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13325",
        "summary": "Some operations in cache backends are not properly validated, potentially leading to data loss in the unvalidated delete() and delete_many() operations.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Validation",
            "Data Loss"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13341",
        "summary": "TemplateView pushes self.kwargs to the context, which is inconsistent with other views like ListView. This causes a crash when filtering.",
        "category": "Bug",
        "tags": [
            "TemplateView",
            "Context",
            "Filtering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13343",
        "summary": "A FileField with a callable storage parameter should not evaluate the callable during deconstruction. However, the callable is evaluated, breaking the assumption that the Storage may vary at runtime.",
        "category": "Bug",
        "tags": [
            "FileField",
            "Storage",
            "Deconstruction"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13344",
        "summary": "The first middleware in a Django 3.1 project with an async server receives a coroutine as its response parameter, while all other middlewares receive a django.http.response.HttpResponse object. This has caused an issue in the django-cors-headers package.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "ASGI",
            "HttpResponse",
            "Coroutine"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13346",
        "summary": "The __in operator does not work as expected on models.JSONField in MySQL, Oracle, and SQLite. It does not return the same queryset as other fields.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "JSONField",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13347",
        "summary": "SafeExceptionReporterFilter does not recurse into dictionaries with non-string keys, failing to sanitize certain settings.",
        "category": "Bug",
        "tags": [
            "SafeExceptionReporterFilter",
            "Dictionaries",
            "Sanitization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13350",
        "summary": "Temporary files do not get deleted when an upload request is canceled by the client.",
        "category": "Bug",
        "tags": [
            "Temporary Files",
            "Upload Request"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13354",
        "summary": "MigrationOptimizer incorrectly orders operations if the app name contains uppercase letters, causing migration failure.",
        "category": "Bug",
        "tags": [
            "MigrationOptimizer",
            "App Name",
            "Uppercase Letters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13355",
        "summary": "The fix for ticket #30153 has unintended consequences on the performance of Media.__add__. If the number of Media objects added grows beyond a certain point, the performance of all subsequent Media.__add__ calls becomes terrible.",
        "category": "Bug",
        "tags": [
            "Performance",
            "Media Objects",
            "Memory"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13363",
        "summary": "The issue is about the TruncDate and TruncTime functions in Django not correctly handling timezone information passed to them. The functions are supposed to use the passed timezone info object, but they are instead using the return value from get_current_timezone_name() unconditionally.",
        "category": "Bug",
        "tags": [
            "Timezone",
            "Database",
            "Models",
            "Datetime"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13369",
        "summary": "The issue is about a FieldError exception that occurs when a query is executed. The error message suggests that the expression contains mixed types: IntegerField, AutoField and that the output_field must be set. This issue is considered a regression bug as the query used to work in Django 3.1.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "FieldError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13371",
        "summary": "The issue is about the inability to pickle the namedtuple-s resulting from the new named parameter of QuerySet.values_list() released in Django 2.0. This issue affects the compatibility with the cacheops package.",
        "category": "Bug",
        "tags": [
            "Models",
            "QuerySet",
            "Pickle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13386",
        "summary": "The issue is about the max-age attribute of a cookie in Django. The user suggests that the max_age parameter of set_cookie() should be converted to an integer to avoid issues with cookie parsers that don't handle decimals gracefully.",
        "category": "Feature Request",
        "tags": [
            "Cookies",
            "HTTP",
            "Conversion"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13401",
        "summary": "The issue is about the equality comparison of fields in abstract models. The user found that fields from different models that inherit from the same abstract model are considered equal, which is not intuitive.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Equality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13406",
        "summary": "The issue is about a problem with pickling and unpickling a query that combines values and annotate for a GROUP BY functionality. The result of the unpickled query is instances of the model with a broken internal state, instead of a list of dicts.",
        "category": "Bug",
        "tags": [
            "Models",
            "QuerySet",
            "Pickle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13410",
        "summary": "The posix version of locks in django/core/files/locks.py has a bug where it always returns False, even when the lock is successfully acquired. This is due to the fact that the cpython fcntl module returns None if successful, and raises an OSError to indicate failure.",
        "category": "Bug",
        "tags": [
            "Locks",
            "File Handling",
            "Posix"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13413",
        "summary": "The BooleanFieldListFilter does not respect field choices. The filter text is not modified to fit the choices parameter.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation",
            "BooleanFieldListFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13417",
        "summary": "The QuerySet.ordered property is incorrect for GROUP BY queries on models with Meta.ordering. The property remains truthy even if the resulting SQL query will not have an ORDER BY clause.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13426",
        "summary": "A TypeError exception occurs when performing a union operation on querysets with ordering. The error occurs when trying to iterate over a 'NoneType' object.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Union",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13431",
        "summary": "The QuerySet.aggregate() function mixes annotated fields names, causing an OperationalError. The issue arises when performing a query on MySQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Aggregate",
            "MySQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13447",
        "summary": "The user needs to manipulate the app_list in a custom admin view and requires access to the model class. The user also suggests making the _build_app_dict method public.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Model Class",
            "App List"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13484",
        "summary": "The issue is about a crash when a pickled query with FilteredRelation used in aggregation is recreated. The user is pickling query objects for later re-evaluation but encounters an error when rerunning a query that contains a FilteredRelation inside a filter.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "FilteredRelation",
            "Pickle"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13490",
        "summary": "The issue is about a descriptive error that is raised when get() with filters operation is used following QuerySet.union(), intersection(), and difference(). The user is unable to retrieve one specific object of the resulting QuerySet.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "get()"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13495",
        "summary": "The issue is about the Trunc() function not taking tzinfo param into account when DateTimeField() are used as output_field. The user is trying to use TruncDay() function but the timezone conversion is missed from sql.",
        "category": "Bug",
        "tags": [
            "Database",
            "Trunc() function",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13512",
        "summary": "The issue is about the Django admin not displaying properly unicode chars in JSONFields. When the user edits a JsonField which contains Chinese character in Django admin, it appears in ASCII characters.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "JSONFields",
            "Unicode"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13513",
        "summary": "The issue is about the debug error view not respecting exc.__suppress_context__ (PEP 415). The user raises an exception in a view but the debug error view still shows the RuntimeError even though the raise is from None.",
        "category": "Bug",
        "tags": [
            "Debug",
            "Error View",
            "PEP 415"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13516",
        "summary": "The issue is about the flush() on self.stdout/stderr management commands not working. The user notes that flush() is called during migrate command but it doesn't work, and a long migration effectively prints to stderr no relevant information up until the end.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "flush()",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13528",
        "summary": "The issue is about incorrect separators when chaining floatformat to intcomma in some locales. The user is trying to convert a decimal to a float in a template, but it doesn't give the expected output.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Localization",
            "Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13530",
        "summary": "The issue is about using KeyTransform for JSONField which produces invalid SQL in various places. The user is trying to use KeyTransform in ordering attribute of ArrayAgg function which produces invalid SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "JSONField",
            "KeyTransform"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13537",
        "summary": "The issue is about manage.py dbshell not getting charset from DATABASES setting. The user is trying to execute some sql scripts that get piped to manage.py dbshell and runs into some encoding issues.",
        "category": "Bug",
        "tags": [
            "Database",
            "Encoding",
            "manage.py dbshell"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13551",
        "summary": "The issue is about changing user's email which could invalidate password reset tokens. The user suggests that the password reset email's token should be rejected when the email address is changed.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "Email",
            "Password Reset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13553",
        "summary": "The issue is about QuerySet.order_by() crashing on union() queryset with a single non-empty query. The user is trying to implement a dynamic union and runs into a database error when both querysets are ordered.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "union",
            "order_by"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13556",
        "summary": "The issue is about allowing null values while registering function on transaction on_commit. The user is trying to register a function as none and runs into a TypeError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Transactions",
            "on_commit"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13448",
        "summary": "The issue is about a crash that occurs when running tests with the 'TEST': {'MIGRATE': False} database setting in Django 3.1. The error is related to the 'django_admin_log' table not existing.",
        "category": "Bug",
        "tags": [
            "Database",
            "Testing",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13449",
        "summary": "The issue is about a crash that occurs when using the Lag() function with a DecimalField on a SQLite database. The error is related to the SQL query syntax.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Lag Function"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13454",
        "summary": "The issue is about a crash that occurs when using the EmptyFieldListFilter with a GenericForeignKey and GenericRelation. The error is related to the 'empty_strings_allowed' attribute not existing for the 'GenericForeignKey' object.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "GenericForeignKey",
            "GenericRelation",
            "EmptyFieldListFilter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13458",
        "summary": "The issue is about incorrect error messaging when both min_num and max_num are equal and both validate_min and validate_max are set to true in Django Formset.",
        "category": "Bug",
        "tags": [
            "Formset",
            "Validation",
            "Error Messaging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13460",
        "summary": "The issue is about a string formatting error that occurs when passing floats as values in {% blocktrans %} tags. The error is related to gettext string formatting failing when a float is passed.",
        "category": "Bug",
        "tags": [
            "String Formatting",
            "Floats",
            "blocktrans"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13466",
        "summary": "The issue is about a failure that occurs when using call_command to call a management command with a boolean argument. The error is related to the 'ignored explicit argument' error.",
        "category": "Bug",
        "tags": [
            "Management Command",
            "Boolean Argument",
            "call_command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13560",
        "summary": "The issue is about the ProtectedError/RestrictedError raised from Collector.collect containing iterators, which results in non-informative exception representation in Sentry.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13568",
        "summary": "The issue is about the system check for USERNAME_FIELD with total UniqueConstraints in the auth.E003 system. The user suggests extending the system check to check for the presence of USERNAME_FIELD in Model._meta.constraints.",
        "category": "Feature Request",
        "tags": [
            "System Check",
            "Authentication",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13569",
        "summary": "The issue is about the unexpected breaking of queryset aggregation when using order_by('?'). The user suggests a patch in the SQL compiler to fix the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13578",
        "summary": "The issue is about the ManagementForm exception in case of bad prefix being difficult to understand. The user suggests including form._errors in output for easier debugging.",
        "category": "Bug",
        "tags": [
            "Form Handling",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13585",
        "summary": "The issue is about the incompatibility of password reset tokens due to the change in hashing between Django 3.0 and 3.1. The user suggests a fix to support tokens with older values.",
        "category": "Bug",
        "tags": [
            "Authentication",
            "Password Reset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13589",
        "summary": "The issue is about the unexpected data loss in bulk_create() when saving parent object after setting on child. The user suggests a fix to allow the main instance to 'reach into' its related objects and set the foreign key field.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model",
            "Bulk Create"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13590",
        "summary": "Upgrading Django from 2.2 to 3.0 causes named tuples used as arguments to __range to error. This is due to the way Django resolves lookups and reconstitutes tuples.",
        "category": "Bug",
        "tags": [
            "Upgrade",
            "Database",
            "Queryset Filters"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13592",
        "summary": "ManyToManyField does not respect the PositiveBigIntegerField in m2m intermediate table. This leads to out of bound error when using large numbers for ids.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ManyToManyField",
            "PositiveBigIntegerField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13606",
        "summary": "The current logic for excluding a multi-valued relationship can be hard for some query planners to optimize. The suggestion is to use NOT EXISTS function instead of NOT IN.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Query Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13607",
        "summary": "BaseFormSet.is_valid() produces ValidationError when there is no management form. The suggestion is to check for the presence of a valid management form and return False if it is not present, as opposed to raising an exception.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13615",
        "summary": "Add warning in makemessages command if the localecode with `l` flag is not correct. The suggestion is to normalize the directory name to something that would just work.",
        "category": "Feature Request",
        "tags": [
            "Localization",
            "Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13616",
        "summary": "Unclear error raised by makemessages when /locale does not exist under app directory. The suggestion is to improve the error message to be more descriptive and helpful.",
        "category": "Bug",
        "tags": [
            "Localization",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13617",
        "summary": "The issue reports incorrect results from complex queries after patch #31566 in Django 3.0.7. The problem seems to be related to the GROUP BY clause and the reevaluation of subqueries in the SELECT statement.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Aggregation",
            "Subquery",
            "GROUP BY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13620",
        "summary": "The issue is about the lack of support for list arguments inside exclusive required groups in Django's command line management. The current workaround involves setting the type to string and manually coercing.",
        "category": "Feature Request",
        "tags": [
            "Command Line Management",
            "List Arguments",
            "Exclusive Required Groups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13658",
        "summary": "The issue reports that ManagementUtility in Django parses the program name from the argv it's passed rather than from sys.argv, but when it needs to parse --pythonpath and --settings, it uses the program name from sys.argv.",
        "category": "Bug",
        "tags": [
            "ManagementUtility",
            "CommandParser",
            "sys.argv"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13660",
        "summary": "The issue reports that the shell command in Django crashes when passing Python code with functions using the -c option. The problem seems to be related to the usage of exec.",
        "category": "Bug",
        "tags": [
            "Shell Command",
            "Python Code",
            "Functions",
            "exec"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13665",
        "summary": "The issue reports that the database creation backend in Django uses _default_manager instead of base_manager to serialize the database, which causes TestService to fail.",
        "category": "Bug",
        "tags": [
            "Database Creation Backend",
            "Serialization",
            "base_manager",
            "_default_manager"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13667",
        "summary": "The issue suggests an optimization for combined queries when using QuerySet.union() in Django. The optimization involves clearing the select clause, dropping ordering, and limiting the number of results to 1 if possible.",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "union",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13670",
        "summary": "The issue is about the inconsistency in Django's dateformat function when handling years less than 1000. The 'y' format character does not print leading zeros, which is not consistent with Python's datetime module and PHP's handling of the same character.",
        "category": "Bug",
        "tags": [
            "Dateformat",
            "Datetime",
            "PHP",
            "Python"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13671",
        "summary": "The issue is about the behavior of Django's cache.get_or_set() function. The function does not cache a None result, which is not consistent with its docstring. The user suggests a modification to the function to cache None results.",
        "category": "Bug",
        "tags": [
            "Cache",
            "None",
            "Functionality"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13682",
        "summary": "The issue is about the error messages when forgetting to call .as_view() on a Class-Based View (CBV) in Django. The error message is not clear and does not include any of the user's own code. The user suggests an improvement to make the error message more clear and helpful.",
        "category": "Bug",
        "tags": [
            "Error Message",
            "CBV",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13684",
        "summary": "The issue is about the misleading error message when loading a database backend fails with ImportError in Django. The error message suggests that the backend is not available, while the actual problem is an ImportError within the backend itself.",
        "category": "Bug",
        "tags": [
            "Database",
            "Backend",
            "ImportError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13689",
        "summary": "The issue is about the behavior of Django when grouping on an ExpressionWrapper and aggregating. The expression from the group by is omitted, which is not the expected behavior.",
        "category": "Bug",
        "tags": [
            "Aggregation",
            "Group By",
            "ExpressionWrapper"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13691",
        "summary": "The issue is about an error when doing a JSON path lookup in SQLite when the value is numeric. The user gets a JSON decode error, which does not occur with other data types or databases.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "JSON",
            "Path Lookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13786",
        "summary": "The squashmigrations command does not unset model options when optimizing CreateModel and AlterModelOptions. This issue is related to Django's database migrations functionality.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Model Options"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13791",
        "summary": "The parse_duration() function ignores the sign of a timedelta string if the input string only contains days. This issue is related to Django's date parsing functionality.",
        "category": "Bug",
        "tags": [
            "Date Parsing",
            "ISO 8601",
            "Timedelta"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13794",
        "summary": "The add filter is unable to concatenate strings with a lazy string. This issue is related to Django's template filters functionality.",
        "category": "Bug",
        "tags": [
            "Template Filters",
            "String Concatenation",
            "Lazy String"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13797",
        "summary": "The dumpdata command does not support fixtures compression, even though the loaddata command does. This issue is related to Django's data dumping functionality.",
        "category": "Feature Request",
        "tags": [
            "Data Dumping",
            "Fixtures Compression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13800",
        "summary": "Django uses an escape-character in cookie values that is not supported by the RFC 6265 standard. This issue is related to Django's cookies handling functionality.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "RFC 6265"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13807",
        "summary": "The loaddata command crashes on SQLite when table names are SQL keywords. This issue is related to Django's data loading functionality.",
        "category": "Bug",
        "tags": [
            "Data Loading",
            "SQLite",
            "SQL Keywords"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13693",
        "summary": "The issue is about a crash that occurs when running 'django-admin runserver' on Windows with Python version less than 3.8. The error is due to the subprocess.Popen function expecting a string argument, but it receives a WindowsPath object instead.",
        "category": "Bug",
        "tags": [
            "Windows",
            "Python Compatibility",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13708",
        "summary": "This issue proposes the addition of a 'durable' flag to the transaction.atomic() function. This flag would ensure that all operations within the wrapped block have been committed at the end of the block.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Transactions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13710",
        "summary": "The issue is about the inconsistency in the way Django handles verbose_name and verbose_name_plural for Inline classes in admin views. The proposal is to make verbose_name_plural for an Inline class be based on the verbose_name for an Inline if that is specified.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13714",
        "summary": "The issue is about a misleading error message when applying migrations on an installation using spatialite backend where the path to the database file does not exist. The error message suggests a problem with JSON fields, which is not the actual issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13722",
        "summary": "This issue proposes a new feature that adds a method on InlineModelAdmin for providing initial data for the inline formset. The method would be implemented to use GET parameters like get_changeform_initial_data.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Formsets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13741",
        "summary": "The issue is about setting the disabled property to True by default on the ReadOnlyPasswordHashField used to display the password hash. This would prevent accidental changes to the password value and remove the need for the clean_password method.",
        "category": "Feature Request",
        "tags": [
            "Authentication",
            "Form Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13743",
        "summary": "This issue is about long stack traces in the development server on Windows. The user suggests fixing is_broken_pipe_error in django/core/servers/basehttp.py to address this.",
        "category": "Bug",
        "tags": [
            "Development Server",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13744",
        "summary": "The issue suggests deprecating the django.core.cache.backends.memcached.MemcachedCache backend in Django 3.2 and removing it in Django 4.1 due to maintenance issues with python-memcached.",
        "category": "Feature Request",
        "tags": [
            "Cache",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13757",
        "summary": "This issue reports a problem with the KeyTransformIsNull lookup on SQLite and Oracle. The query matches objects that have the key with the value null, which is incorrect.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Oracle",
            "JSON"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13768",
        "summary": "The issue suggests logging exceptions handled in Signal.send_robust() as Django logs exceptions in other similar situations.",
        "category": "Feature Request",
        "tags": [
            "Logging",
            "Signals"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13773",
        "summary": "This issue reports a crash in squashmigrations optimizer when fields' names are swapped using a temporary name. The problem is related to the RenameField operation.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Optimizer"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13774",
        "summary": "The issue reports that prefetch_related_objects() does not work for reused model instances. The problem occurs when the first instance in the list already has the to_attr set.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13822",
        "summary": "Django raises an error during the creation of a database migration if two models with the same name refer to the same model in a ManyToManyField. This issue is particularly problematic in large projects with many apps that may have models with the same name.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ManyToManyField",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13824",
        "summary": "Django incorrectly adds a '/' prefix to the STATIC_URL setting when it is a URL. This results in malformed URLs. The issue seems to be related to how Django validates URLs and how it handles the STATIC_URL setting.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Settings",
            "STATIC_URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13837",
        "summary": "Django's autoreload utility only detects when Python was launched with '-m django'. This issue aims to remove this limitation and allow autoreloading when Python is launched with '-m' followed by any package. The proposed fix involves using Python's documented way of determining if '-m' was used.",
        "category": "Feature Request",
        "tags": [
            "Autoreload",
            "Command-line Utilities"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13841",
        "summary": "Certain Django modules use the __file__ variable at the module level, which can cause issues in 'frozen' Python environments where __file__ is not set. The issue proposes accessing __file__ lazily rather than at the module level to avoid these problems.",
        "category": "Bug",
        "tags": [
            "Python Environments",
            "__file__",
            "Module Level"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13884",
        "summary": "The i18n.set_language function incorrectly unquotes the next_url, which can result in incorrect URLs when the current URL parameter includes an encoded '&' character. The issue includes a test that demonstrates this bug.",
        "category": "Bug",
        "tags": [
            "URL",
            "i18n",
            "set_language",
            "URL Encoding"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13886",
        "summary": "The current system checks in Django do not cover invalid model fields in functional indexes. The issue proposes adding system checks for this scenario.",
        "category": "Feature Request",
        "tags": [
            "System Checks",
            "Model Fields",
            "Functional Indexes"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13808",
        "summary": "The issue is about allowing PostgreSQL database connections to use PostgreSQL services, similar to MySQL's options files. The user suggests adding this feature to the DATABASES config in Django, which would make it easier to move between different environments without repeating the database name.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "PostgreSQL",
            "Configuration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13809",
        "summary": "The issue suggests adding a --skip-checks option to the runserver command in Django. This would make it consistent with other management commands performing system checks and would speed up project reload during development.",
        "category": "Feature Request",
        "tags": [
            "Runserver",
            "System Checks",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13810",
        "summary": "The issue reports a problem with MiddlewareNotUsed leaving undesired side effects when loading middleware in ASGI context. The user suggests that this could be avoided by adding async support to the middleware.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "ASGI",
            "Async"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13814",
        "summary": "The issue reports that raising InvalidTemplateLibrary completely masks out the real exception in get_package_libraries, making it difficult to debug application issues. The user suggests not handling the exception in the first place since it only raises another type and the inner exception loses the stack trace.",
        "category": "Bug",
        "tags": [
            "Template",
            "Exception Handling",
            "Debugging"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13820",
        "summary": "The issue is a feature request to improve the specificity of the migration loader's check for and rejection of PEP-420 namespace packages. The user suggests making the existing check more compliant with Python's documented import API, which would remove one impediment to using Django in frozen Python environments.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Namespace Packages",
            "Python Import API"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13821",
        "summary": "The issue suggests dropping support for SQLite versions older than 3.9.0 in Django. The user points out that indexes on expressions and the SQLITE_ENABLE_JSON1 compile-time option are supported on SQLite 3.9.0+.",
        "category": "Feature Request",
        "tags": [
            "SQLite",
            "Database",
            "Version Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13915",
        "summary": "The issue is about dropping support for Python 3.6 and 3.7 in Django 3.2 LTS, which is supported until April 2024. The end of life for Python 3.6 is December 2021 and for Python 3.7 is June 2023.",
        "category": "Other",
        "tags": [
            "Python Version",
            "Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13924",
        "summary": "The issue is about a bug where migrations are marked as applied even if deferred SQL fails to execute. This is due to changes introduced in a previous commit to address another issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13925",
        "summary": "The issue is about a warning raised on inherited manually specified primary key. The user has models which inherit from other models, and they should inherit the primary key. This works fine with Django 3.1 but not with Django 3.2 alpha.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13933",
        "summary": "The issue is about ModelChoiceField not providing the value of an invalid choice when raising a ValidationError. This is in contrast with ChoiceField and others.",
        "category": "Bug",
        "tags": [
            "ModelChoiceField",
            "ValidationError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13952",
        "summary": "The issue is about the verbosity flag in the migrate command not being provided to the emit_pre_migrate_signal and emit_post_migrate_signal functions. This causes testing migrate -v2 through call_command to pollute sys.stdout.",
        "category": "Bug",
        "tags": [
            "Migrate Command",
            "Verbosity Flag"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13964",
        "summary": "The issue is about data loss for parents with non-numeric primary key when saving parent object after setting on child. The foreign key constraint which would enforce the existence of a product with sku='' is deferred until the transaction commits.",
        "category": "Bug",
        "tags": [
            "Models",
            "Foreign Key",
            "Data Loss"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13992",
        "summary": "The issue is about the unexpected behavior of the delete() function when used with distinct() in Django's ORM. The user expected to delete distinct comments from each post but ended up deleting all comments.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Database",
            "Delete",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-13995",
        "summary": "The user requests that properties decorated with @cached_property should be included in the models section of the admindocs page.",
        "category": "Feature Request",
        "tags": [
            "AdminDocs",
            "Models",
            "Cached Property"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14007",
        "summary": "The issue is about the from_db_value hook not being called for returning_fields on insert. This results in a plain integer being returned instead of a wrapper class.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "BigAutoField",
            "from_db_value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14011",
        "summary": "The issue is about the reappearance of a bug where database connections are not closed after each thread in LiveServerTestCase's ThreadedWSGIServer, leading to an OperationalError.",
        "category": "Bug",
        "tags": [
            "Database",
            "LiveServerTestCase",
            "ThreadedWSGIServer",
            "Connections"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14014",
        "summary": "The issue is about the introspection not returning column order for unique constraints on SQLite.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Introspection",
            "Unique Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14016",
        "summary": "The issue is about a TypeError that occurs when applying the | operator to a Q object that references a non-pickleable type of object such as dict_keys.",
        "category": "Bug",
        "tags": [
            "Q Object",
            "TypeError",
            "Non-Pickleable"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14017",
        "summary": "The issue reports a TypeError when using the '&' operator with Q(...) and Exists(...) in a certain order. The user suggests that the operators should be commutative on Q-Exists pairs, but they are not.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Operators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14019",
        "summary": "The issue reports inconsistent formatting in the __repr__ methods of Index, UniqueConstraint, ExclusionConstraint, and CheckConstraint. The user suggests making the formatting consistent across these methods.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14026",
        "summary": "The issue reports that the Sum function in annotate returns NULL if there are no values to sum. The user suggests that 0 would be a better default value for proper sorting and comparisons.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14030",
        "summary": "The issue reports that the login and logout views in Django's admin site are using the never_cache decorator incorrectly. The user suggests using the method_decorator since the views are instance methods.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Decorators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14031",
        "summary": "The issue reports that autocomplete for inherited models is broken due to a wrong value calculation in AutocompleteMixin.optgroups(). The user provides an example where autocomplete works for one model but not for an inherited model.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Models",
            "Inheritance",
            "Autocomplete"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14034",
        "summary": "The issue reports that MultiValueField ignores a required value of a sub field. The user provides an example where form.is_valid() returns True even when one of the sub fields is set as required and is passed an empty value.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14043",
        "summary": "The issue is about the dbshell management commands that carry the risk of leaking passwords through process information. The user proposes a solution to generate a temporary file for PostgreSQL and MySQL to prevent password leakage.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Security",
            "PostgreSQL",
            "MySQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14053",
        "summary": "The issue is about the HashedFilesMixin's post_process() function yielding the same original filename multiple times back to collectstatic's collect(). This causes incorrect stats and duplicate work.",
        "category": "Bug",
        "tags": [
            "File Handling",
            "HashedFilesMixin",
            "collectstatic"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14056",
        "summary": "The issue is about the collectstatic command failing when the STATICFILES_DIRS setting contains references to directories which do not exist. The user proposes to log a warning instead of stopping the whole command.",
        "category": "Feature Request",
        "tags": [
            "File Handling",
            "collectstatic",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14059",
        "summary": "The issue is about the ability to create a model instance with conflicting args and kwargs value for the same field. The user provides a test case to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Model Validation",
            "args",
            "kwargs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14071",
        "summary": "The issue is about the raw_id_field check admin.E002 not catching .attname mis-references. The user suggests a solution to check field.name == field_name on field retrieval success.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "raw_id_field",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14077",
        "summary": "The issue is about the QuerySet.values()/values_list() with JSONField returning integers instead of booleans on SQLite. The user provides a test case to reproduce the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14089",
        "summary": "The issue is about the inability to call the reversed() function on an OrderedSet in Django. The user suggests adding a __reversed__() method to the OrderedSet to make it reversible.",
        "category": "Feature Request",
        "tags": [
            "OrderedSet",
            "Reversible"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14109",
        "summary": "This issue proposes a change in the automatic migration naming from date-based to operation-based. The user suggests that migrations should be named based on the operations they contain, rather than the current date.",
        "category": "Feature Request",
        "tags": [
            "Migrations",
            "Naming"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14122",
        "summary": "The issue is about the improper inclusion of Meta.ordering fields in the GROUP BY clause, which leads to incorrect aggregation. The user believes that the problem was not properly fixed in a previous commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "Meta.ordering",
            "GROUP BY",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14124",
        "summary": "This issue reports a SystemCheckError when setting handler500 as a Class-Based view. The user suggests a fix in the _check_custom_error_handlers function to check if the handlers are function-based or class-based.",
        "category": "Bug",
        "tags": [
            "Class-Based View",
            "handler500",
            "SystemCheckError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14140",
        "summary": "The issue is about a crash when combining Q() objects with boolean expressions. The user suggests a patch that removes the special case, meaning single-child Q objects deconstruct into args instead of kwargs.",
        "category": "Bug",
        "tags": [
            "Q Objects",
            "Boolean Expressions",
            "Deconstruct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14149",
        "summary": "This issue is about the need to validate the type of ALLOWED_HOSTS. The user suggests adding a new system check that will check the type of ALLOWED_HOSTS and notify the developer about possible improper configuration.",
        "category": "Feature Request",
        "tags": [
            "ALLOWED_HOSTS",
            "Validation",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14151",
        "summary": "The issue is about Django's CsrfViewMiddleware not handling the case of urlparse() raising a ValueError when checking the HTTP referer header. This happens for URLs like 'https://['.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "URL Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14155",
        "summary": "The issue is about the __repr__ method of ResolverMatch not handling partial functions nicely. When a partial function is passed as the view, the __repr__ shows the func argument as functools.partial, which doesn't reveal the underlying function or arguments provided.",
        "category": "Bug",
        "tags": [
            "Function Handling",
            "ResolverMatch"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14164",
        "summary": "The issue is about the to_locale function not being idempotent. This breaks using django.utils.translation.override with a locale code like pt_BR or zh_Hans.",
        "category": "Bug",
        "tags": [
            "Locale",
            "Translation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14169",
        "summary": "The issue is about Django creating on-disk sqlite cloned test databases with extra dots in the file names when using the --parallel flag. This is due to the way the file name is constructed in get_test_db_clone_settings().",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Test"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14170",
        "summary": "The issue is about the optimization to use BETWEEN instead of the EXTRACT operation in YearLookup breaking the functionality provided by ExtractIsoYear when used via the lookup. This results in the wrong data being returned by filters using iso_year.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query Optimization",
            "YearLookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14179",
        "summary": "The issue is about CsrfViewMiddleware._origin_verified() not handling request.get_host() raising DisallowedHost. Since Django was previously fixed to handle this elsewhere in CsrfViewMiddleware.process_view(), it should be handled here too.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "HTTP",
            "Host Verification"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14182",
        "summary": "The issue is about Django's Round function which currently only supports rounding to the nearest integer. The user suggests adding support for a precision argument to the Round function, which is supported by all backends natively supported by Django.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Math Functions"
        ]
    },
    {
        "instance_id": "django__django-14199",
        "summary": "The issue reports a crash when trying to annotate anything to a decimal field in SQLite. Django passes a string to create_decimal_from_float function which causes the crash.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Annotation"
        ]
    },
    {
        "instance_id": "django__django-14238",
        "summary": "The issue is about Django's DEFAULT_AUTO_FIELD subclass check failing for subclasses of BigAutoField and SmallAutoField. The user suggests fixing this in AutoFieldMeta.__subclasscheck__ by allowing subclasses of those classes in the _subclasses property.",
        "category": "Bug",
        "tags": [
            "Database",
            "AutoField",
            "Subclass"
        ]
    },
    {
        "instance_id": "django__django-14241",
        "summary": "The issue reports a crash when using QuerySet.values() or values_list() on combined querysets ordered by unannotated columns. The problem started with Django 3.2.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Unannotated Columns"
        ]
    },
    {
        "instance_id": "django__django-14266",
        "summary": "The issue reports a crash in CookieStorage for contrib.messages after upgrading to Django 3.2. The crash occurs when trying to decode a previously stored cookie.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "Contrib.Messages",
            "Upgrade"
        ]
    },
    {
        "instance_id": "django__django-14267",
        "summary": "The issue reports a crash when combining Q() objects with boolean expressions. The problem occurs when deconstructing Q objects with a non-subscriptable child.",
        "category": "Bug",
        "tags": [
            "Database",
            "Q Objects",
            "Boolean Expressions"
        ]
    },
    {
        "instance_id": "django__django-14271",
        "summary": "The issue reports a failure in Django 3.2 when trying to combine two querysets in a subquery. The error message indicates that there is no such column: V0.user_id.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14282",
        "summary": "The issue reports that the makemigrations management command cannot be run without a SECRET_KEY. The user believes that issue #29324 was intended to fix this problem.",
        "category": "Bug",
        "tags": [
            "Makemigrations",
            "Management Command",
            "SECRET_KEY"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14291",
        "summary": "The issue reports that the caches.W002 check does not support tuples in STATICFILES_DIRS. The check fails with a TypeError when a STATICFILES_DIRS entry is provided as a tuple.",
        "category": "Bug",
        "tags": [
            "Caches",
            "STATICFILES_DIRS",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14309",
        "summary": "The issue reports that combining an empty Q object with a negated Exists lookup un-negates the Exists lookup. The user noticed this issue while trying to work around issue #32651/ #32548.",
        "category": "Bug",
        "tags": [
            "Q object",
            "Exists lookup",
            "Negation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14311",
        "summary": "The issue reports that autoreloading of 'python -m custom_module runserver' is not allowed. The user points out that the original fix only attempted to deal with -m foo.bar where bar is a package and __main__.py exists under foo/bar.",
        "category": "Bug",
        "tags": [
            "Autoreloading",
            "Runserver",
            "Custom Module"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14313",
        "summary": "The issue reports that deleting objects after searching related many to many field crashes the admin page. The error message indicates that delete() cannot be called after .distinct().",
        "category": "Bug",
        "tags": [
            "Admin Page",
            "Delete",
            "Many to Many Field",
            "Distinct"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14315",
        "summary": "The issue is about the PostgreSQL client not respecting os.environ values in some cases. It returns an empty dictionary instead of None for env, which results in os.environ not being used and an empty env passed to subprocess.",
        "category": "Bug",
        "tags": [
            "Database",
            "Environment Variables",
            "PostgreSQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14324",
        "summary": "The issue is about the migration autodetector not adding a model name to the related_name attribute for self-referential ManyToManyField. This is a regression issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Model",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14334",
        "summary": "The issue is about the LocaleMiddleware not properly recognizing 'zh-Hant-HK' from the accept-language header. If both 'zh-hans' and 'zh-hant' are in settings.LANGUAGES (and in this order), the LocaleMiddleware is choosing the first one instead of the second as would be expected.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Localization",
            "Language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14336",
        "summary": "The issue is about Django generating aliases for subqueries in two different cases: 'Col%d' and 'col%d'. This could cause a failure on a database with case sensitive column names.",
        "category": "Bug",
        "tags": [
            "Database",
            "Subquery",
            "Alias"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14341",
        "summary": "The issue is about the database cache.delete using cursor after it is closed. The return bool(cursor.rowcount) is outside of the with block, so the cursor will have been closed at that point.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Cursor"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14349",
        "summary": "The issue is about URLValidator tests failing on Python versions patched for bpo-43882. Django rejects URLs based on the split URL components. However, the bpo-43882 fix changes URL splitting behavior to strip all instances of LF, CR and tab characters before splitting, so they never reach the validator.",
        "category": "Bug",
        "tags": [
            "URL Validation",
            "Tests",
            "Python"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14382",
        "summary": "The issue is about an error that occurs when using django-admin startapp with a trailing slash in the directory name. The error is caused by the basename() function not considering the trailing slash. The proposed solution is to remove potential trailing slashes.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "File System"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14385",
        "summary": "The issue is about the simplify_regex function only removing some metacharacters from regex patterns. The user provides examples of input patterns and their expected and actual outputs.",
        "category": "Bug",
        "tags": [
            "Regex",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14387",
        "summary": "The issue is about incorrect SQL generation when filtering OR-combined queries. The user provides a detailed example of a model and a function that returns a queryset. The issue arises when the OR'd queryset is further filtered, resulting in unpredictable results.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14395",
        "summary": "The issue is about the CacheHandler class initializing unused caches. The user provides a snippet of code that helped them solve the issue.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14396",
        "summary": "The user suggests changing the default of Sitemap.protocol to https, with a clear deprecation timeline.",
        "category": "Feature Request",
        "tags": [
            "Sitemap",
            "HTTPS"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14399",
        "summary": "The issue is about the documentation for hypercorn and static files. The user suggests integrating whitenoise into the Django docs to address the problem of serving static files.",
        "category": "Documentation",
        "tags": [
            "Documentation",
            "Static Files",
            "Hypercorn"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14404",
        "summary": "The catch_all_view function does not support FORCE_SCRIPT_NAME, resulting in incorrect redirects. A patch has been proposed.",
        "category": "Bug",
        "tags": [
            "Redirects",
            "URL Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14407",
        "summary": "Changes in Django 3.2 cause the development server to reload on template file changes, which can disrupt template authoring.",
        "category": "Bug",
        "tags": [
            "Development Server",
            "Template",
            "Auto-reload"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14411",
        "summary": "In the admin console, the label for the ReadOnlyPasswordHashWidget points to a non-labelable element, which is incorrect.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Widget",
            "HTML"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14416",
        "summary": "In a multi-lingual site using LocaleMiddleware, redirects adding a language code to a path can be inappropriately cached by HTTP caches, causing incorrect language display.",
        "category": "Bug",
        "tags": [
            "HTTP Caching",
            "LocaleMiddleware",
            "Multi-lingual"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14430",
        "summary": "When using an empty list with the __in= operator, an EmptyResultSet is returned, preventing an Aggregate Coalesce from working properly.",
        "category": "Bug",
        "tags": [
            "Database",
            "Aggregation",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14434",
        "summary": "The statement created by _create_unique_sql makes references_column always false because an instance of Table is passed as an argument to Columns when a string is expected.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Table"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14351",
        "summary": "The issue is related to the difference in how Q object aliases are set up when OR'd. This results in a 'subquery must return only one column' error in Django 3.2, which was not present in Django 2.2.5.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Q object"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14368",
        "summary": "The issue is about Django's inability to parse ISO-8601 datetime strings that have whitespace characters between the time strings and timezone strings. The user suggests Django to depend on python-dateutil for datetime string parsing or inline python-dateutils' parsing functions.",
        "category": "Bug",
        "tags": [
            "Datetime",
            "Parsing",
            "ISO-8601"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14372",
        "summary": "The issue is about a SuspiciousFileOperation exception raised when saving a FileField in Django 3.2.1. The user suggests that the issue is caused by Django requiring only the basename to be passed to FieldFile.save method.",
        "category": "Bug",
        "tags": [
            "FileField",
            "SuspiciousFileOperation",
            "Saving"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14373",
        "summary": "The issue is about the Y specifier for django.utils.dateformat.DateFormat not returning a four-digit year padded with zeros for year < 1000.",
        "category": "Bug",
        "tags": [
            "DateFormat",
            "Year"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14374",
        "summary": "The issue is about the usage of datetime.now() instead of utcnow() in Django. The user suggests updating the code and docs examples to the modern usage.",
        "category": "Documentation",
        "tags": [
            "Datetime",
            "utcnow",
            "now"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14376",
        "summary": "The issue is about the MySQL backend in Django using deprecated 'db' and 'passwd' kwargs. The user suggests updating these to 'database' and 'password' respectively.",
        "category": "Bug",
        "tags": [
            "MySQL",
            "Backend",
            "Deprecated"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14513",
        "summary": "The issue is about the disconnect between the output of showmigrations and the actual recorded applied state of squashed migrations. The current output of showmigrations indicates that the related squashed migration has been applied even if it has not been recorded by the migration recorder.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14518",
        "summary": "The issue is about the error messages of CsrfViewMiddleware when it encounters a bad CSRF token. The suggestion is to include in these messages whether the token was obtained from POST data or a custom header, which would be useful for troubleshooting.",
        "category": "Feature Request",
        "tags": [
            "Middleware",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14534",
        "summary": "The issue is about the implementation of BoundWidget.id_for_label which ignores the id set by ChoiceWidget.options. The id available through self.data['attrs']['id'] is ignored and a new id is generated which is confusing and presumably not intended.",
        "category": "Bug",
        "tags": [
            "Widgets",
            "Form"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14539",
        "summary": "The issue is about the urlize function which does not handle html escaped string and trailing punctuation correctly. The actual output is different from the expected output.",
        "category": "Bug",
        "tags": [
            "HTML",
            "Parsing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14558",
        "summary": "The issue is about the JSONField.bound_data which raises TypeError when data is None. When a bound form with no value provided for the JSONField is rendered, it will currently crash.",
        "category": "Bug",
        "tags": [
            "Form",
            "JSON"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14559",
        "summary": "The issue is about the bulk_update function which currently returns None, unlike update, which returns the number of rows matched. The suggestion is to add the same functionality to bulk_update.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Update"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14441",
        "summary": "The issue is about the get_image_dimensions() function crashing when a non-existing file/path is passed. This function is used to get the dimensions of an image file.",
        "category": "Bug",
        "tags": [
            "Image Processing",
            "File Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14444",
        "summary": "The issue is about the creation of a constraint like UniqueConstraint on SQLite issuing a warning models.W039 stating that a constraint won't be created even though it is.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14447",
        "summary": "The issue is about the database cache counting the DB size twice at a performance penalty. The issue suggests a refactor to remove the second query and proposes a setting to not run the culling code every time a value is set.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14451",
        "summary": "The issue is about adding support for self-closing tags in syndication feeds. The issue suggests passing a single argument to the SimplerXMLGenerator that Django uses for generating feeds.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Syndication Feeds",
            "XML"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14453",
        "summary": "The issue is about adding a message when a user misspells 'urlpatterns' in some 'urls' module. The issue suggests that the error message should be more helpful in identifying the problem.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14463",
        "summary": "The issue is about adding the ability to define comments in table/columns. The issue suggests adding functionality to Django to allow users to specify comments for syncdb manage.py to enter into the database.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Comments",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14471",
        "summary": "The issue is about the CSRF cookie token in Django. If the CSRF cookie has the wrong format, the code does unnecessary work. The suggestion is to reject the request outright if the CSRF cookie is found to have the wrong format, similar to how it handles a missing cookie.",
        "category": "Bug",
        "tags": [
            "CSRF",
            "Middleware",
            "Token Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14480",
        "summary": "The issue proposes adding XOR support to Q queries in Django. XOR is available in Postgresql, MySQL, SequelServer, and Oracle but not in sqlite. The user suggests adding XOR to work with Q queries.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Query",
            "XOR"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14493",
        "summary": "The issue is about a crash in ManifestStaticFilesStorage when max_post_process_passes is set to 0. The error is an UnboundLocalError, indicating that a local variable 'substitutions' is referenced before assignment.",
        "category": "Bug",
        "tags": [
            "Static Files",
            "Storage",
            "Post Process"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14495",
        "summary": "The issue is about a KeyError when trying to migrate backward to a replaced migration in Django. The user suggests that Django should not prevent migrating to a replaced migration if it still exists on disk.",
        "category": "Bug",
        "tags": [
            "Migration",
            "KeyError",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14500",
        "summary": "The issue is about a squashed migration not being marked as unapplied when unapplying a squashed migration and the replaced migration files are still around.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "Squashed Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14508",
        "summary": "The issue is about overwriting a property with a field during model inheritance in Django. The user suggests that there should be a warning when a property from a base model is the problem.",
        "category": "Bug",
        "tags": [
            "Model",
            "Inheritance",
            "Property Overwriting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14634",
        "summary": "The issue requests for a mixin to be added that would display a success message upon successful deletion of an object.",
        "category": "Feature Request",
        "tags": [
            "Mixin",
            "Object Deletion",
            "Success Message"
        ]
    },
    {
        "instance_id": "django__django-14641",
        "summary": "The issue suggests moving special-case logic in BoundField.initial() to BaseForm.get_initial_for_field(). This would allow for better handling of time and datetime objects.",
        "category": "Feature Request",
        "tags": [
            "BoundField",
            "BaseForm",
            "Datetime"
        ]
    },
    {
        "instance_id": "django__django-14645",
        "summary": "The issue reports a decimal.InvalidOperation error when a 'NaN' value is passed to a form with a DecimalField and max_value argument.",
        "category": "Bug",
        "tags": [
            "DecimalField",
            "Form",
            "InvalidOperation Error"
        ]
    },
    {
        "instance_id": "django__django-14664",
        "summary": "The issue reports that ResolverMatch with some views is not pickleable, causing problems when using the django.test.client.Client with multiprocessing.",
        "category": "Bug",
        "tags": [
            "ResolverMatch",
            "Pickle",
            "Multiprocessing"
        ]
    },
    {
        "instance_id": "django__django-14667",
        "summary": "The issue reports that QuerySet.defer() doesn't clear deferred field when chaining with only(). This results in unexpected fields being selected in the generated SQL query.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "SQL",
            "Defer",
            "Only"
        ]
    },
    {
        "instance_id": "django__django-14672",
        "summary": "The issue reports a missing call to `make_hashable` on `through_fields` in `ManyToManyRel`, causing a TypeError when checking proxy models.",
        "category": "Bug",
        "tags": [
            "ManyToManyRel",
            "Hashable",
            "Proxy Models"
        ]
    },
    {
        "instance_id": "django__django-14580",
        "summary": "The issue reports a bug in Django's latest release 3.2.4 where the generated migration file is missing an import statement, causing a NameError. The problem seems to be related to the module django.db.migrations.writer.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Models",
            "Import Statement"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14584",
        "summary": "The issue suggests that the logging output of django.db.backends should include the database alias, which is essential when working with database routing.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Logging",
            "Database Routing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14599",
        "summary": "The issue reports a problem with the logic inside CsrfViewMiddleware.process_response(), where the csrf_cookie_needs_reset and csrf_cookie_set can behave incorrectly in certain circumstances.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "CSRF Protection",
            "Cookies"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14602",
        "summary": "The issue suggests tightening up the regular expression used by parse_time to accept fewer 'invalid' options. The current regex allows for some variations which it arguably shouldn't.",
        "category": "Bug",
        "tags": [
            "Time Parsing",
            "Regular Expression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14608",
        "summary": "The issue suggests adding a 'nonform' CSS class for non-form errors in FormSets, similar to how forms add the 'nonfield' CSS class for non-field errors in ErrorList instances.",
        "category": "Feature Request",
        "tags": [
            "FormSets",
            "CSS",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14631",
        "summary": "The issue reports that BaseForm's _clean_fields() and changed_data methods don't currently access their values through a BoundField object, which would be better for consistency and to reduce the number of code paths.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Data Cleaning",
            "BoundField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14681",
        "summary": "The issue reports a misleading CSRF failure error message when there is a problem with file storage. The error message should instead report a filesystem error or similar, indicating incorrect media storage setup.",
        "category": "Bug",
        "tags": [
            "Error Handling",
            "File Upload",
            "Storage",
            "CSRF"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14717",
        "summary": "The issue suggests that three of the _check_fix_default_value() method definitions in django/db/models/fields/__init__.py can be simplified. Currently, timezone.now() is called even when the return value isn't needed or won't be used.",
        "category": "Feature Request",
        "tags": [
            "Optimization",
            "Database",
            "Models",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14722",
        "summary": "The issue reports a bug when moving a unique constraint from unique_together to Field.unique, which generates an invalid migration. The error occurs when applying the migrations.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Models",
            "Unique Constraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14725",
        "summary": "The issue suggests that model formsets should provide a way to create an 'edit only' view of objects. Currently, users try to use extra=0 to accomplish this, but that's not reliable as extra is merely meant for the extra number of forms to display.",
        "category": "Feature Request",
        "tags": [
            "Formsets",
            "Models",
            "Object Creation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14727",
        "summary": "The issue reports a problem where naming an incompletely applied squashed migration as a migration target fails with a bare NodeNotFoundError. This can be confusing to the user.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14730",
        "summary": "The issue suggests that developers should be prevented from defining a related_name on symmetrical ManyToManyFields. If a developer passes in the related_name not understanding this fact, they may be confused.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "ManyToManyField",
            "Symmetrical"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14733",
        "summary": "The issue is a feature request to allow overriding of deletion widget in formsets, similar to how ordering_widget and get_ordering_widget() were introduced in Django 3.0.",
        "category": "Feature Request",
        "tags": [
            "Formsets",
            "Widgets",
            "Frontend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14751",
        "summary": "The issue is a feature request to make the 'makemigrations' management command more script-friendly. The user wants to be able to run 'makemigrations' in a Docker container, find out what files were added, and then copy those files to their development machine.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Scripting",
            "Docker"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14752",
        "summary": "The issue is a feature request to refactor AutocompleteJsonView to support extra fields in autocomplete response. The user wants to add new attributes to autocomplete field results without having to fully override the AutocompleteJsonView.get() method.",
        "category": "Feature Request",
        "tags": [
            "Autocomplete",
            "Admin",
            "Views"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14762",
        "summary": "The issue is a bug where prefetch_related called for GenericForeignKey sets content_type_id and object_id to None, if the foreign object doesn't exist. This behaviour is not documented and the user suggests that prefetch_related shouldn't touch original values of object_id and content_type_id and only set content_object to None.",
        "category": "Bug",
        "tags": [
            "Database",
            "GenericForeignKey",
            "Prefetch_related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14765",
        "summary": "The issue is a feature request to optimize ProjectState.__init__() to assume its real_apps argument is a set, since all calls to ProjectState.__init__() now pass real_apps as a set.",
        "category": "Feature Request",
        "tags": [
            "ProjectState",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14771",
        "summary": "The issue is a bug where the auto-reloader does not pass -X options for cpython implementation. The user provides a demonstration of the issue and references to Python documentation.",
        "category": "Bug",
        "tags": [
            "Auto-reloader",
            "CPython",
            "Windows"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14779",
        "summary": "The issue is about an unhelpful IndexError thrown when a custom tag with missing context param and no other params is used. The error occurs when the checking code tries to access params[0].",
        "category": "Bug",
        "tags": [
            "Custom Tags",
            "TemplateSyntaxError",
            "IndexError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14785",
        "summary": "The issue reports that NaN values can be stored in a DecimalField using sqlite3, but cannot be retrieved. Attempts to retrieve such values result in a TypeError.",
        "category": "Bug",
        "tags": [
            "Database",
            "DecimalField",
            "NaN",
            "SQLite3"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14787",
        "summary": "The issue is about the method_decorator() not preserving wrapper assignments. The function passed to the decorator is a partial object and lacks expected function attributes like __name__, __module__, etc.",
        "category": "Bug",
        "tags": [
            "Method Decorator",
            "Wrapper Assignments",
            "Partial Object"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14792",
        "summary": "The issue reports a different behavior in Django 3.2 when using a time zone of 'Etc/GMT-10' for a Trunc class tzinfo. The resulting database query incorrectly converts the time zone.",
        "category": "Bug",
        "tags": [
            "Time Zone",
            "Trunc Class",
            "Database Query"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14802",
        "summary": "The issue suggests adding a helper function to make and validate cache keys to avoid repetitiveness and ensure consistent calling of .validate_key() after .make_key().",
        "category": "Feature Request",
        "tags": [
            "Cache Backend",
            "Helper Function",
            "Key Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14805",
        "summary": "The issue reports that the --noinput option to makemigrations also means 'no output', which is inconvenient for scripting purposes. The suggestion is to provide some kind of output even when --noinput is specified.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Noinput Option",
            "Scripting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14880",
        "summary": "The issue is about improving error messages for reverse accessor clashes in Django. The current error message does not specify the clashing name, which can make debugging difficult. The user has proposed a patch but it impacts some unit tests.",
        "category": "Bug",
        "tags": [
            "Error Messages",
            "Debugging",
            "Reverse Accessor Clashes"
        ]
    },
    {
        "instance_id": "django__django-14890",
        "summary": "The issue reports that '&' and '|' operators are ignored after QuerySet.union(), intersection(), and difference() methods. The user suggests that these operators should raise an exception if they cannot be applied after combinator functions.",
        "category": "Bug",
        "tags": [
            "Operators",
            "QuerySet",
            "Database"
        ]
    },
    {
        "instance_id": "django__django-14894",
        "summary": "The issue is about incorrect annotation value when doing a subquery with an empty queryset. The user reports that Django's ORM generates incorrect subqueries if an empty queryset is used, leading to unexpected results.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Subquery",
            "Annotation",
            "QuerySet"
        ]
    },
    {
        "instance_id": "django__django-14915",
        "summary": "The issue reports that ModelChoiceIteratorValue is not hashable after migrating from Django 3.0 to Django 3.1. This has caused some options to break when adding custom data-* attributes to the select widget options.",
        "category": "Bug",
        "tags": [
            "ModelChoiceIteratorValue",
            "Migration",
            "Widgets"
        ]
    },
    {
        "instance_id": "django__django-14916",
        "summary": "The issue is about investigating the feasibility of improving WhereNode clone performance in Django. The user has proposed a solution and provided a detailed analysis of the performance before and after the proposed changes.",
        "category": "Feature Request",
        "tags": [
            "Performance",
            "Optimization",
            "WhereNode",
            "Cloning"
        ]
    },
    {
        "instance_id": "django__django-14919",
        "summary": "The issue is about not ignoring transaction durability errors within TestCase in Django. The user reports a discrepancy in how durable atomic blocks are handled in TransactionTestCase vs TestCase and proposes a solution to address this.",
        "category": "Bug",
        "tags": [
            "TestCase",
            "Transaction Durability",
            "Atomic Blocks"
        ]
    },
    {
        "instance_id": "django__django-14812",
        "summary": "The issue is related to Django's admin interface and model inheritance. When a proxy model is used with InlineModelAdmin for a proxy superclass reference, it results in an admin.E202 error. The error is due to the fact that the result for SpecialJournalist._meta.get_parent_list() does not include Journalist.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "Model Inheritance",
            "Proxy Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14832",
        "summary": "The issue is related to the floatformat template filter in Django. The filter is not independent of USE_L10N and does not allow forcing unlocalized format. The problem arises when the filter is used within the {% localize [on|off] %} block with the localization setting opposed to the value of USE_L10N.",
        "category": "Bug",
        "tags": [
            "Template Filter",
            "Localization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14855",
        "summary": "The issue is related to the generation of wrong URL by get_admin_url for readonly field in custom Admin Site. When a model containing a ForeignKey field is viewed or edited in a custom Admin Site, and that ForeignKey field is listed in readonly_fields, the url generated for the link is /admin/... instead of /custom-admin/....",
        "category": "Bug",
        "tags": [
            "Admin Site",
            "URL Generation",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14861",
        "summary": "The issue is related to the conditionally changing ModelAdmin inlines based on object's field. It breaks when changing object and new inlines should appear. The problem occurs when show_inlines is False, you cannot re-enable it. Saving the object fails due to a validation error in the new ChildInline that didn't exist before saving.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Inlines",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14871",
        "summary": "The issue is related to the Select2 widget in Django. It doesn't load translations with subtags. For example, when using the setting LANGUAGE_CODE=\"pt-BR\", the translation of select2 is not applied, the static file i18n is not found.",
        "category": "Bug",
        "tags": [
            "Select2 Widget",
            "Translation",
            "Subtags"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14878",
        "summary": "The issue is related to the detection of primary key constraints on SQLite in Django. While creating models with \"inspectdb\", it was discovered that PrimaryKeys, datatype double, and datatype unsigned int are not detected properly on SQLite3 Databases.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "Primary Key",
            "inspectdb"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14935",
        "summary": "The issue is about the 'makemigrations' command not generating unique values for fields with callable defaults. The user has a model with a field that uses a callable for default value generation. However, after migration, all instances of the model have the same value for this field.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Models",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14954",
        "summary": "The 'createsuperuser' command does not work in non-interactive mode if a ManyToManyField is in REQUIRED_FIELDS. The issue arises from the fact that the 'createsuperuser' command expects a model instance for the ForeignKey field, but gets an integer instead.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14960",
        "summary": "The 'createsuperuser' command does not validate REQUIRED_FIELDS values in interactive mode when passed by command-line. The issue is that a non-validated string is passed to 'UserManager.create_superuser' instead of an integer corresponding to an actual PK in DB.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14969",
        "summary": "The issue is about the 'has_perms()' function not raising an error when a string is passed instead of a list. The function behaves as if it's working fine since in Python, a string is an iterable that returns individual characters as string when iterated over.",
        "category": "Bug",
        "tags": [
            "User Permissions",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14983",
        "summary": "The 'makemigrations' command generates incorrectly numbered migration files if squashed migrations are in place. The issue is that the new migration file has the same number as a previous migration, which can be confusing.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14996",
        "summary": "The issue is about renaming a field and setting the prior implicit field name as the db_column to avoid db operations creates a migration emitting unnecessary SQL. The user expects a SQL noop, but instead, the migration generates SQL commands.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14997",
        "summary": "The issue is about a crash that occurs when remaking a table with a unique constraint on SQLite in Django 4.0a1. The error is raised during the migration process when altering a field in the 'Tag' model.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Models",
            "Migrations",
            "Unique Constraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-14999",
        "summary": "The issue reports that a RenameModel operation that already has db_table defined should be a no-operation. However, in Postgres, it drops and recreates foreign key constraints, and in SQLite, it recreates the table.",
        "category": "Bug",
        "tags": [
            "Database",
            "Postgres",
            "SQLite",
            "Models",
            "RenameModel"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15018",
        "summary": "The issue is about the failure of the call_command() function when required mutually exclusive arguments use the same 'dest'. The command accepts two different ways to specify a time -- either as a timestamp or as a duration in the future.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "Arguments",
            "call_command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15022",
        "summary": "The issue reports unnecessary joins in the admin changelist query. Each word in the search query leads to an additional JOIN in the final SQL query because of the 'qs = qs.filter(...)' pattern, causing the admin to stall when searching for clients with a query containing several words.",
        "category": "Bug",
        "tags": [
            "Database",
            "Admin Console",
            "SQL",
            "JOIN"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15031",
        "summary": "The issue is about the limitation in the admin site that doesn't allow to include a value option that contains a comma when filtering the queryset in the changelist by multiple values.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Filtering",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15037",
        "summary": "The issue reports that a foreign key to a specific field is not handled correctly in inspectdb. The generated model for the 'bar' table has the 'other_id' be a foreign key to 'foo' and not 'foo(other_id)'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Foreign Key",
            "inspectdb"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15038",
        "summary": "The issue is about the 'squashmigrations' command in Django. When using the '--squashed-name' option, it can overwrite existing migration files, leading to an inconsistent state between the code and the database. The issue also mentions a potential CircularDependencyError.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15044",
        "summary": "The issue reports that CacheMiddleware and FetchFromCacheMiddleware in Django are not thread safe. This can lead to production errors when used with pylibmc and uwsgi threaded. The issue includes a traceback of the error and a link to the problematic code in Django's GitHub repository.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Cache",
            "Thread Safety"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15052",
        "summary": "The issue is about a crash that occurs when an aggregate is filtered by an Exists subquery in Django. The issue includes a traceback of the error and a patch that should fix the issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Aggregation",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15061",
        "summary": "The issue is about the 'for = ...' in MultiWidget's <label> in Django. The issue suggests that the 'id_for_label' method should be removed from the MultiWidget Class.",
        "category": "Feature Request",
        "tags": [
            "Forms",
            "Widgets"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15062",
        "summary": "The issue reports that some comparisons against DecimalField annotations behave unexpectedly on SQLite, particularly when wrapping a DecimalField value in a Case/When or ExpressionWrapper. The issue includes test cases that illustrate the problem.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15087",
        "summary": "The issue suggests that the SQLite backend's DatabaseIntrospection.get_relations should use PRAGMA instead of parsing to retrieve foreign keys. The issue includes a link to the problematic code in Django's GitHub repository.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "SQLite",
            "Schema Introspection"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15098",
        "summary": "The issue is about the i18n_patterns not supporting language locale containing both script and region. The user is unable to get a response for locales like 'en-latn-us' and 'en-Latn-US'.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Internationalisation",
            "URL",
            "Locale"
        ]
    },
    {
        "instance_id": "django__django-15102",
        "summary": "The issue is about the 'startproject' command not respecting the user's umask settings. The user is unable to create files with the desired permissions.",
        "category": "Bug",
        "error": "",
        "tags": [
            "File Permissions",
            "Command",
            "startproject"
        ]
    },
    {
        "instance_id": "django__django-15103",
        "summary": "The issue is about making the 'element_id' argument of 'json_script' optional. The user wants to use 'json_script' without needing an id for it.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "JSON",
            "Script",
            "Template"
        ]
    },
    {
        "instance_id": "django__django-15104",
        "summary": "The issue is about a KeyError with migration autodetector and ForeignKey field with hardcoded reference. The user is unable to run the test suite in verbose mode due to this issue.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Migration",
            "ForeignKey",
            "Database"
        ]
    },
    {
        "instance_id": "django__django-15108",
        "summary": "The issue is about allowing the usage of descending string syntax in 'Window(order_by)'. The user finds the current API inconsistent and suggests reusing the logic in 'OrderableAggMixin.__init__' in 'Window.__init__'.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "API",
            "Ordering",
            "Window"
        ]
    },
    {
        "instance_id": "django__django-15111",
        "summary": "The issue is about 'django-admin start[project|app]' not sending proper user agent header when HTTP(S) url is sent. The user is unable to fetch a remote template due to this issue.",
        "category": "Bug",
        "error": "",
        "tags": [
            "HTTP",
            "User Agent",
            "django-admin"
        ]
    },
    {
        "instance_id": "django__django-15127",
        "summary": "The issue reports that when reading messages inside tests, new message tags created using @override_settings is not updated. This results in the django.contrib.messages.storage.base.Message.level_tag property being an empty string and not recognizing the new tags.",
        "category": "Bug",
        "tags": [
            "Testing",
            "Messages",
            "Settings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15128",
        "summary": "The issue reports an AssertionError raised by Query.change_aliases. The problem occurs during an __or__ operation of two QuerySets, where the keys and values of the change_map intersect. The user suggests a potential fix and requests for better documentation on the AssertionError.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15135",
        "summary": "The issue reports unexpected data loss in bulk_update() when saving a parent object after setting on a child. The user suggests adding a check for ForeignKeys in the bulk_update logic to prevent this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "ForeignKeys"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15136",
        "summary": "The issue reports that the admin foreign key raw inputs are too small when referring to a UUID field. The user has submitted a PR to address this issue.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "UUID",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15139",
        "summary": "The issue suggests deprecating PickleSerializer and moving it out of core due to its known security risks. The user cites an example of a remote code execution on a Facebook server due to the use of PickleSerializer.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Serialization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15154",
        "summary": "The issue reports that detecting uniqueness doesn't work for models with functional unique constraints. The problem occurs when creating a new object from the Django Administration site, but not when creating an object with code.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Models",
            "Unique Constraints"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15161",
        "summary": "This issue is about simplifying the deconstruction of expressions in Django. The F() function was previously deconstructed to django.db.models.expressions.F() but was changed to django.db.models.F() to simplify generated migration code. The same technique can be applied to other expressions.",
        "category": "Feature Request",
        "tags": [
            "Models",
            "Migration",
            "Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15166",
        "summary": "This issue reports a problem with the DatabaseCache backend in Django. It does not quote all fields in queries, which is required by Snowflake. A patch has been attached that works with stable/3.2.x, but it needs to be reviewed once django-snowflake development is caught up to Django's main branch.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache",
            "Queries"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15180",
        "summary": "This issue is about a TypeError that should be raised when kwargs is not a dict in path()/re_path(). The user suggests that there should be a type-guard in _path to assert it's dict-ish (if not None), or a system check on URLPattern to raise a friendly message.",
        "category": "Bug",
        "tags": [
            "URL",
            "TypeError",
            "URLPattern"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15199",
        "summary": "This issue suggests deprecating the name argument of cached_property. Django 2.2 is the last version to support Python 3.5 where cached_property's name argument is required. Django 4.0 can deprecate the name argument without giving warnings that aren't actionable as long as apps want to keep support for Python 3.5.",
        "category": "Feature Request",
        "tags": [
            "Python 3.5",
            "Django 4.0",
            "cached_property"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15202",
        "summary": "This issue reports a problem with forms.URLField(). It throws a ValueError instead of ValidationError on clean. The user provides an example where the input '////]@N.AN' results in 'Invalid IPv6 URL'.",
        "category": "Bug",
        "tags": [
            "Forms",
            "URLField",
            "ValidationError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15204",
        "summary": "This issue reports a problem with Durationfield.clean. It fails to handle broken data. The user provides an example where the input string 'P3(3D' results in 'could not convert string to float: '3(3''.",
        "category": "Bug",
        "tags": [
            "Forms",
            "DurationField",
            "Data Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15272",
        "summary": "The issue is about adding a management command to optimize a migration. The proposed command, optimizemigration, reads a single migration, passes it through the optimizer, and then rewrites the result to disk.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Optimization",
            "Management Command"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15277",
        "summary": "The issue discusses a micro-optimization for Value._resolve_output_field by modifying CharField.__init__. The problem is that CharField expects self.max_length to always be a non-null value of sensible data, which is not always the case.",
        "category": "Bug",
        "tags": [
            "Optimization",
            "CharField",
            "Value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15278",
        "summary": "The issue reports a crash when adding a nullable OneToOneField on SQLite. The error has appeared between building django-oauth-toolkit between Django 4.0 and the main branch for migrations.AddField of a OneToOneField.",
        "category": "Bug",
        "tags": [
            "SQLite",
            "OneToOneField",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15280",
        "summary": "The issue is about incorrect deferred fields when following prefetches back to the 'parent' object. The problem seems to be that instances are inheriting the set of fields they 'think' have been deferred from the outer User queryset, causing a database query to be executed when the attribute is accessed.",
        "category": "Bug",
        "tags": [
            "Deferred Fields",
            "Prefetches",
            "Queryset"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15292",
        "summary": "The issue reports that the technical 404 debug page reported incorrect view name for Class Based Views (CBVs). The problem is a regression in a specific commit.",
        "category": "Bug",
        "tags": [
            "404 Debug Page",
            "Class Based Views",
            "View Name"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15297",
        "summary": "The issue is about the incorrect representation of ResolverMatch for Class Based Views. The problem seems to be that the detection of class based views in ResolverMatch no longer works correctly after some changes in Django 4.0.",
        "category": "Bug",
        "tags": [
            "ResolverMatch",
            "Class Based Views",
            "Representation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15206",
        "summary": "The cache decorators cache_control, never_cache and sensitive_post_parameters no longer work with Django REST framework because they strictly check for an HttpRequest instance.",
        "category": "Bug",
        "tags": [
            "Cache",
            "Decorators",
            "Django REST framework",
            "HttpRequest"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15213",
        "summary": "The ExpressionWrapper for ~Q(pk__in=[]) crashes. It works fine for ExpressionWrapper(Q(pk__in=[])) but not for ExpressionWrapper(~Q(pk__in=[])).",
        "category": "Bug",
        "tags": [
            "ExpressionWrapper",
            "Query",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15240",
        "summary": "The django_migrations table contains old migrations that no longer exist due to the introduction of squashmigrations. This can cause issues if naming duplication occurs. The proposal is to truncate the django_migrations table so that it includes only migrations that actually exist in the Django project.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "Squashmigrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15248",
        "summary": "The request is to add the ability to know where an object was deleted from to pre/post delete signals. This would allow signal listeners to understand why an object is being deleted.",
        "category": "Feature Request",
        "tags": [
            "Signals",
            "Delete",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15252",
        "summary": "The MigrationRecorder does not obey db_router allow_migrate rules in a multi-db setup. The issue is that the MigrationRecorder tries to create tables in all connections, not just the 'default' connection as specified by the db_router.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "db_router",
            "Multi-db setup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15268",
        "summary": "The issue is that multiple AlterFooTogether operations are not optimized into one. The proposal is to optimize these operations so that only one operation is performed on each constraint.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "AlterFooTogether"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15315",
        "summary": "The issue is about the Field.__hash__ changing its value when a field is assigned to a model class. This causes an AssertionError when a field is put in a dict before it's assigned to a model class.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Hash"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15316",
        "summary": "The issue is about the simplify_regex() function not handling non-capturing groups correctly. This was discovered while using Django REST Framework's Schema generator.",
        "category": "Bug",
        "tags": [
            "Regex",
            "Non-Capturing Groups"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15318",
        "summary": "The issue is about the inconsistent behavior when querying unsaved reverse relations. The behavior differs for many-to-many fields and reverse foreign key fields.",
        "category": "Bug",
        "tags": [
            "Models",
            "Database",
            "Foreign Key",
            "Many-to-Many"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15320",
        "summary": "The issue is about the Subquery.as_sql() method returning incorrect SQL by removing the first and last symbols instead of absent brackets.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15324",
        "summary": "The issue is about Django crashing when a file with a null byte in its extension is uploaded. Django attempts to create a tempfile with the same extension, which results in a ValueError.",
        "category": "Bug",
        "tags": [
            "File Upload",
            "Null Byte",
            "Tempfile"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15334",
        "summary": "The issue is about the prefetch_related calls being ignored when using Queryset.iterator. The user suggests that it would be helpful to prefetch related for each chunk.",
        "category": "Feature Request",
        "tags": [
            "Queryset",
            "Prefetch Related",
            "Iterator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15380",
        "summary": "The issue reports a crash in the migration autodetector when renaming a model and field in a single step. The error occurs during the execution of the 'makemigrations' command.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15382",
        "summary": "The issue reports a problem with the filter on exists-subquery with an empty queryset. The WHERE block is missing completely in the query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Queryset",
            "Filter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15388",
        "summary": "The issue reports a failure in the Django development server to restart after adding BASE_DIR to TEMPLATES[0]['DIRS'] in settings. This prevents the dev server from restarting no matter where changes are made.",
        "category": "Bug",
        "tags": [
            "Dev Server",
            "Settings",
            "TEMPLATES"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15400",
        "summary": "The issue reports that SimpleLazyObject doesn't implement __radd__ and other magic methods. This is causing problems for the user.",
        "category": "Bug",
        "tags": [
            "SimpleLazyObject",
            "Magic Methods"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15401",
        "summary": "The issue discusses the behavior of passing unsaved objects to related filters. The user suggests that this should be prevented and documented.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Filter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15413",
        "summary": "The issue reports a bug in log messages that contradicts the guide in a warning in the docs. The user suggests a fix for the issue.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Logging",
            "Async"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15342",
        "summary": "The migration autodetector crashes on models with a field named _order, but not using order_with_respect_to. This issue is caused by a function introduced in a recent commit that automatically converts the field name _order to the one defined in options['order_with_respect_to'], which fails if the model has a field _order but isn't using Meta.order_with_respect_to.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Database",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15347",
        "summary": "The Messages framework incorrectly serializes/deserializes extra_tags when it's an empty string. This is because MessageEncoder checks for the truthiness of extra_tags rather than checking it is not None. This causes an error when the message is displayed as part of a redirect, as it has been serialised and deserialized, meaning that extra_tags is None instead of the empty string.",
        "category": "Bug",
        "tags": [
            "Messages Framework",
            "Serialization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15352",
        "summary": "The session ID should be cleansed when reporting errors, just like other credentials. This issue has been identified as a potential security risk, as session IDs have been found in public bug reports, which could potentially be exploited by automatically searching for such requests and hijacking the associated accounts.",
        "category": "Bug",
        "tags": [
            "Error Reporting",
            "Session ID",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15368",
        "summary": "The bulk_update() function does not work with plain F('...') expressions. The issue is that the created SQL contains the string representation of F(), instead of resolving to the column name. This seems to be due to a too narrow type check in the source code.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15370",
        "summary": "This is a proposal to introduce an empty __slots__ protocol for SafeString & SafeData. The idea is to avoid the creation of a __dict__ on the instance, which mirrors the str() behaviour. This would save memory, but would preclude the ability to bind arbitrary values to an instance.",
        "category": "Feature Request",
        "tags": [
            "Memory Management",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15375",
        "summary": "The aggregate() function with 'default' after annotate() crashes. This issue was observed on a PostgreSQL project and reproduced with SQLite. The issue seems to be caused by the addition of the aggregate classes\u2019 default argument (new in 4.0), which breaks the SQL syntax.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "Aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15467",
        "summary": "The issue is about the ModelAdmin class in Django. When a user tries to set their own 'empty_label' for a radio field, the system overrides it with a 'default_empty_label'. The user suggests a fix in the 'django\\contrib\\admin\\options.py' file.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Admin Console",
            "Form Fields"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15474",
        "summary": "The issue is related to the ContentType migration in Django. When the user tries to roll back the state to initial on a non-default database, all ContentType rows in the database become null instead of their intended value.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "ContentType"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15481",
        "summary": "The issue is about the 'set_cookie' and 'set_signed_cookie' methods in Django. These methods do not accept a timedelta object for the 'max_age' argument, which is inconsistent with the behavior of the 'get_signed_cookie' method.",
        "category": "Bug",
        "tags": [
            "Cookies",
            "TimeDelta",
            "HTTP Response"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15483",
        "summary": "The issue is a feature request for a new AppAdmin class in Django. This class would allow users to customize the app listing in the admin index. The user provides an example syntax for the proposed class.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "App Listing",
            "AppAdmin Class"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15491",
        "summary": "The issue is about the built-in 'csrf_failure' view in Django. When Django detects a wrong CSRF token, it shows an error using a view that does not use the correct charset. The user suggests a fix to this problem.",
        "category": "Bug",
        "tags": [
            "CSRF",
            "Charset",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15492",
        "summary": "The issue is a feature request for a new method in the RemoteUserBackend class in Django. This method, called 'synchronize_user', would allow users to synchronize changes from a remote system back into the Django user records whenever authentication happens.",
        "category": "Feature Request",
        "tags": [
            "Authentication",
            "User Records",
            "RemoteUserBackend"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15414",
        "summary": "The issue is about the QuerySet.bulk_update() method not performing atomic writes against routed db_for_write. This is because bulk_update doesn't set self._for_write = True before accessing self.db, which results in the latter being db_for_read, including the transaction.atomic block creation.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "Atomic Operations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15421",
        "summary": "This issue is about the parallel test runner not working with Windows/macOS `spawn` process start method. Python 3.8 on MacOS has changed the default start method for the multiprocessing module from fork to spawn, causing worker processes to fail with django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.",
        "category": "Bug",
        "tags": [
            "Testing",
            "Multiprocessing",
            "MacOS",
            "Windows"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15423",
        "summary": "The issue is about LazyObject defining magic methods (__getitem__, __iter__) which may be missing from the wrapped object. This leads to TypeErrors when trying to access these methods on the wrapped object.",
        "category": "Bug",
        "tags": [
            "LazyObject",
            "Magic Methods"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15433",
        "summary": "The issue is about the ManyToManyField to lowercased swappable setting causing the generation of infinite migrations. This happens when a custom user model that extends AbstractUser is created and a ManyToManyField that references this custom User model is added.",
        "category": "Bug",
        "tags": [
            "Database",
            "ManyToManyField",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15438",
        "summary": "The issue is about the fallback to a more generic language variant for Select2 translations. When using a specific regional setting like LANGUAGE_CODE=\"de-ch\", the autocomplete_field widget will be in English as select2 does not provide the specific regional translation for \"de-ch\".",
        "category": "Feature Request",
        "tags": [
            "Internationalization",
            "Select2",
            "Translations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15442",
        "summary": "The issue is about django.utils.safestring.mark_safe forcing the evaluation of lazy objects. This results in the output not being translated as expected because mark_safe forces the evaluation of the lazy string provided by ugettext_lazy when it's called.",
        "category": "Bug",
        "tags": [
            "Lazy Objects",
            "Translation",
            "mark_safe"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15497",
        "summary": "Django currently expects only one value for the x-forwarded-proto header, but when deployed behind multiple proxies, the protocol is sometimes listed as a comma-separated list. The issue suggests Django should parse this as a list of values and set the protocol accordingly.",
        "category": "Feature Request",
        "tags": [
            "Proxy",
            "Header",
            "Protocol"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15498",
        "summary": "An empty string used to be ignored for the If-Modified-Since header, but now it raises an exception. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Header",
            "Exception"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15499",
        "summary": "During migration optimization, CreateModel + AlterModelOptions is reduced to just CreateModel, with the model options. The issue suggests that similarly, CreateModel + AlterModelManagers can become just CreateModel.",
        "category": "Feature Request",
        "tags": [
            "Migration",
            "Optimization",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15503",
        "summary": "When using models.JSONField() has_key lookup with numerical keys on SQLite database it fails to find the keys. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "JSONField",
            "Lookup"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15521",
        "summary": "There is a mismatch on the DjangoTranslation folder and the makemessages command for the value nl-nl-x-informal. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Translation",
            "Command",
            "Locale"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15525",
        "summary": "Loading data from a fixture works in the default database, but when using a second database, an exception is raised. The issue suggests fixing this behavior.",
        "category": "Bug",
        "tags": [
            "Database",
            "Fixture",
            "Serialization",
            "Natural Keys"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15526",
        "summary": "The 'view_on_site' redirect does not work for custom admin sites. This is due to the reverse call in get_view_on_site_url not resolving with the current (possibly custom) admin site. This causes custom admin sites to use the default admin to redirect via 'view_on_site'.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "URL Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15554",
        "summary": "When using multiple FilteredRelation with different filters but for the same relation, the second FilteredRelation is ignored. This results in only a single SQL JOIN being generated when inspecting the raw SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15560",
        "summary": "The 'createsuperuser' command does not validate usernames that use a UniqueConstraint. This results in an IntegrityError when trying to create a user with a username that already exists.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15561",
        "summary": "The AlterField operation generates SQL (new table + insert + drop + rename) when adding/changing choices on SQLite, even though this shouldn't be needed. On other databases like Postgres, the same migration generates no SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15563",
        "summary": "Queryset update behaves incorrectly when the queryset class inherits from multiple classes. The update happens not on the child class but on other parent class instances.",
        "category": "Bug",
        "tags": [
            "Database",
            "Inheritance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15569",
        "summary": "The '_unregister_lookup' method in 'RegisterLookupMixin' does not clear the lookup cache. This should be done, as it is done in 'register_lookup'.",
        "category": "Bug",
        "tags": [
            "Database",
            "Cache"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15629",
        "summary": "The issue is about a foreign key constraint error in MySQL when using db_collation with a primary key that also has referenced foreign keys in other models. The error occurs because the collation of the primary key must match the collation of the foreign key.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "MySQL",
            "Foreign Key",
            "Collation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15630",
        "summary": "The issue is about the interaction between exists() and group by in Django. The user is questioning the addition of a hardcoded value to the GROUP BY clause when using exists(), which works on PostgreSQL but may not work on other databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "PostgreSQL",
            "Group By"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15643",
        "summary": "The issue is about Django migrations dropping an explicit primary key defined on a model when it's altered, specifically on SQLite.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQLite",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15648",
        "summary": "The issue is about a TypeError that occurs when a decorator is applied on a method which is called by __get_dynamic_attr. The error occurs because __get_dynamic_attr tries to count the function's arguments, but decorators usually get defined with the *args, **kwargs syntax.",
        "category": "Bug",
        "tags": [
            "Views",
            "Decorators",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15651",
        "summary": "The issue is about implementing RenameIndex in a backwards compatible way to deal with old projects that have unnamed indexes. The user suggests a number of considerations for this implementation.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migrations",
            "Indexes",
            "Backwards Compatibility"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15666",
        "summary": "The issue is about a TypeError that occurs when using QueryExpression objects in the Model.Meta.ordering field. The error occurs when the compiler tries to use the related model, but the item can be an OrderBy object.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "QueryExpression",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15572",
        "summary": "Django versions > 3.2.3 have changed the way template directories are handled, causing autoreload to break when an invalid value is in TEMPLATESDIRS. This is due to the normalization of the empty string into the root of the project, causing template_changed() to always return True and preventing autoreload when the app code changes.",
        "category": "Bug",
        "tags": [
            "Autoreload",
            "Templates",
            "Pathlib"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15576",
        "summary": "The fix for bug #18414 introduced an inefficiency in .exists() on distinct querysets, causing all distinct querysets to select all their fields. The issue suggests that fields should be left on the queryset only under certain conditions.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Database",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15586",
        "summary": "Following changes to allow auto-reloading cached templates, there was a discussion to enable the cached template loader by default even in development. This issue is a proposal to enable this feature.",
        "category": "Feature Request",
        "tags": [
            "Templates",
            "Caching",
            "Development"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15607",
        "summary": "There is an unnecessary redirect in LogoutView when ?next=... contains an 'unsafe' URL. The expected result is to be logged out and redirected to LOGOUT_REDIRECT_URL, but there is an intermediary, useless redirect.",
        "category": "Bug",
        "tags": [
            "LogoutView",
            "Redirect",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15613",
        "summary": "There is inconsistent and unexpected handling of assigning an unsaved model to a Generic Foreign Key. The issue suggests modifying Model.save() or Model._prepare_related_fields_for_save() to also perform verification check for GFK fields.",
        "category": "Bug",
        "tags": [
            "Models",
            "Generic Foreign Key",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15620",
        "summary": "When a field migration is a no-op, the operation description is output in SQL, but nothing else. This can be confusing as to which operations are no-ops. The issue suggests outputting an extra SQL comment when there are deliberately no statements to execute for a given migration operation.",
        "category": "Feature Request",
        "tags": [
            "SQL",
            "Migration",
            "No-op"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15669",
        "summary": "The issue is a feature request for an --update flag for the makemigrations management command in Django, similar to the one in South. This flag would allow developers to refine the latest migration, which is useful for iterative development.",
        "category": "Feature Request",
        "tags": [
            "Makemigrations",
            "Database",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15671",
        "summary": "The issue is a feature request to allow overriding FormSet's error messages for too few and too many forms. The user suggests moving the messages to default_error_messages to enable overriding them via the error_messages argument when instantiating the FormSet.",
        "category": "Feature Request",
        "tags": [
            "FormSet",
            "Error Messages",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15678",
        "summary": "The issue is a proposal to deprecate CryptPasswordHasher in Django 4.1 and remove it in Django 5.0. The CryptPasswordHasher is almost undocumented, not recommended, and only supported on UNIX. Moreover, the crypt module was deprecated in Python 3.11.",
        "category": "Feature Request",
        "tags": [
            "CryptPasswordHasher",
            "Deprecation",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15682",
        "summary": "The issue is a proposal to deprecate passing False to OrderBy's nulls_first and nulls_last in Django. The user found that passing False to these parameters still puts the nulls first, which is surprising and makes changing the null positioning based on a variable more awkward than it needs to be.",
        "category": "Bug",
        "tags": [
            "OrderBy",
            "Database",
            "Nulls"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15689",
        "summary": "The issue is a bug report about the APPEND_SLASH setting in Django. The user found that APPEND_SLASH adds significant latency to all requests not ending in /, even if they are successful. This is due to a change in Django 1.9.5/1.10 that checks should_redirect_with_slash() on every request, resulting in an extra urlconf lookup for every request not ending with /.",
        "category": "Bug",
        "tags": [
            "APPEND_SLASH",
            "Performance",
            "URL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15695",
        "summary": "The issue is a bug report about the RenameIndex() function in Django. The user found that RenameIndex() crashes when an unnamed index for unique_together is moving backward and forward. The function should restore the old auto-generated name when this happens.",
        "category": "Bug",
        "tags": [
            "RenameIndex",
            "Database",
            "Index"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15698",
        "summary": "The issue is about a crash in Django templates when calling methods for built-in types. The problem occurs when a non-existent variable is passed to a second template and its method is called. The issue was found during an upgrade from Django 2.2 to 3.2.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Built-in Types",
            "Method Call"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15703",
        "summary": "The issue suggests deprecating the use of Model.Meta.index_together in favour of Model.Meta.indexes. The reason is that anything that index_together does can be done by indexes and the Index class.",
        "category": "Feature Request",
        "tags": [
            "Model",
            "Indexing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15731",
        "summary": "The issue reports that inspect.signature returns incorrect signature information when used on queryset methods. The problem is due to the code not copying complete metadata. The proposed solution is to use functools.wraps instead of manually assigning name and docstring.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Metadata",
            "Inspect"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15732",
        "summary": "The issue is about an inability to drop a unique_together constraint on a model's primary key by a migration. The problem arises when there are two unique constraints on the column - the primary key and the unique_together constraint.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Unique Constraint"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15737",
        "summary": "The issue is about an unnecessary clear of cached reference in ORM models. The problem occurs when a child object's ForeignKeyDeferredAttribute changes value from None to the parent's ID, causing an unnecessary lazy read of the parent object.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Cache",
            "Lazy Read"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15738",
        "summary": "The issue is about a problem with models migration when changing a field from foreign key to many-to-many and deleting unique together. The problem arises when trying to do migrations, resulting in an error about the wrong number of constraints.",
        "category": "Bug",
        "tags": [
            "Models",
            "Migration",
            "Foreign Key",
            "Many-to-Many"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15741",
        "summary": "The issue is about a regression caused by commit [659d2421c7adb] which results in a TypeError when the date template filter receives a lazy string.",
        "category": "Bug",
        "tags": [
            "Date Template Filter",
            "Lazy String",
            "TypeError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15742",
        "summary": "The issue is about the blocktranslate tag with the asvar argument leading to double escaping of variables, which results in incorrect display on the final page.",
        "category": "Bug",
        "tags": [
            "Blocktranslate",
            "Variable Escaping",
            "Template"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15744",
        "summary": "The issue is about the ASGI request body being closed prematurely by the ASGI handler, leading to an I/O operation on closed file error.",
        "category": "Bug",
        "tags": [
            "ASGI Handler",
            "Request Body",
            "I/O Operation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15747",
        "summary": "The issue is about a FieldError being raised when trying to perform a custom action on data in the admin interface that is sorted by an annotated field.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "FieldError",
            "Annotated Field",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15752",
        "summary": "The issue is about deprecating the make_random_password() function as it is unused.",
        "category": "Feature Request",
        "tags": [
            "Deprecation",
            "make_random_password"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15766",
        "summary": "The issue is about the lack of support for robust on_commit handlers, which can lead to some handlers not executing if a previous handler raises an exception.",
        "category": "Feature Request",
        "tags": [
            "on_commit Handlers",
            "Exception Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15819",
        "summary": "The issue is about the 'inspectdb' command not generating 'related_name' for relations to the same entities, causing a clash between reverse accessors. The user suggests auto-generating 'related_name' for all fields in a model if the related Model was used for the same table.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "inspectdb",
            "Relations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15828",
        "summary": "The issue reports that the 'BaseConstraint.deconstruct()' and '__eq__' operators do not consider 'violation_error_message'. This is a regression in a specific commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "BaseConstraint",
            "Operators"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15851",
        "summary": "The issue is about the 'dbshell' command in PostgreSQL where additional parameters should be passed before the database name. The current order causes warnings and ignores extra command-line arguments.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL",
            "dbshell"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15863",
        "summary": "The issue reports that the 'floatformat' template filter drops precision when used for Decimal numbers. The problem is traced to incorrect conversion to Decimal within the 'floatformat' implementation.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "Decimal",
            "floatformat"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15869",
        "summary": "The issue suggests deprecating the 'length_is' template filter in favor of 'length'. The 'length_is' filter is considered a vestige from the days of the '{% ifequal %}' and '{% ifnotequal %}' tags and lacks flexibility compared to the 'length' filter.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Filter",
            "length_is",
            "Deprecation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15902",
        "summary": "The issue reports a deprecation warning for 'default.html' raised for ManagementForm's, even when forms are never rendered with the '{{ form }}' expression. The user suggests special-casing this to avoid producing the warning for the management forms.",
        "category": "Bug",
        "tags": [
            "Forms",
            "ManagementForm",
            "Deprecation Warning"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15774",
        "summary": "Django is detecting HTTP Accept-Language headers in a case-sensitive manner, which is not in line with the standards set by w3c, rfc2616, and bcp47. This results in inconsistent language display across different browsers. The issue suggests a fix in the code and documentation.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Language",
            "Headers",
            "Case-Sensitive"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15781",
        "summary": "The issue is about the formatting of help output in Django's management commands. The current output does not match the expected format, specifically in terms of line breaks and indentation.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "Formatting",
            "Help Output"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15789",
        "summary": "The issue suggests adding an encoder parameter to django.utils.html.json_script() to allow customization of JSON encoding. It also points out that this utility is not documented.",
        "category": "Feature Request",
        "tags": [
            "JSON",
            "Encoding",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15790",
        "summary": "The issue reports a potential problem with the check_for_template_tags_with_the_same_name function when a template tag library is added into TEMPLATES['OPTIONS']['libraries']. The error suggests that the same tag is being used for multiple template tag modules.",
        "category": "Bug",
        "tags": [
            "Templates",
            "Template Tags",
            "Libraries"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15799",
        "summary": "The issue reports that the SelectMultiple widget in ModelAdminForm displays help text even when allow_multiple_selected is set to False. The current behavior does not check this setting before rendering the help text.",
        "category": "Bug",
        "tags": [
            "ModelAdminForm",
            "Widgets",
            "SelectMultiple"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15814",
        "summary": "The issue reports a crash when using the only() method after select_related() on a proxy model. The error suggests that the 'id' is not in the list. A potential fix is suggested in the issue.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Proxy Models",
            "select_related()",
            "only()"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15916",
        "summary": "The issue is about the function django.forms.modelform_factory not using the formfield_callback specified in the Meta attribute of the base form provided. The expected behavior is that the FactoryForm uses the formfield_callback specified in the Meta attribute of MyForm and that therefore the fields would be required in both the FactoryForm and MyForm.",
        "category": "Bug",
        "tags": [
            "Forms",
            "ModelForm",
            "Callback"
        ]
    },
    {
        "instance_id": "django__django-15925",
        "summary": "The issue is about an error encountered when running migrations after upgrading Django from 4.0.7 to 4.1. The error occurs when applying a RemoveField migration on fields which had db_index=True.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "SQLite"
        ]
    },
    {
        "instance_id": "django__django-15930",
        "summary": "The issue is about a syntax error generated when using Case() with ~Q(pk__in=[]). The expected behavior is to annotate all rows with the value True since they all match.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Case"
        ]
    },
    {
        "instance_id": "django__django-15957",
        "summary": "The issue is about Prefetch() objects not working with sliced querysets. The expected behavior is to display a list of categories while displaying a couple of example objects from each category next to it.",
        "category": "Bug",
        "tags": [
            "Queryset",
            "Prefetch",
            "Slicing"
        ]
    },
    {
        "instance_id": "django__django-15969",
        "summary": "The issue is about performance issues encountered when using on_delete=models.SET_NULL on large tables. The SQL queries simply timeout due to the large number of children each Parent can have.",
        "category": "Bug",
        "tags": [
            "Database",
            "Performance",
            "ForeignKey"
        ]
    },
    {
        "instance_id": "django__django-15973",
        "summary": "The issue is about an AttributeError encountered when migrating apps into the database. The error occurs when defining the 'through' model in a many-to-many field in another app.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "ManyToManyField"
        ]
    },
    {
        "instance_id": "django__django-16032",
        "summary": "The issue is about a bug in Django's QuerySet.alias() method. When used after annotate(), it doesn't clear selected fields on the RHS when __in is used. This results in an OperationalError.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "alias",
            "annotate",
            "subquery"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16037",
        "summary": "The issue reports a crash when using QuerySet.annotate() with subquery and aggregation. The crash occurs after updating an app from Django 4.0 to 4.1.1 and is reproducible on both SQLite and PostgreSQL databases.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "annotate",
            "subquery",
            "aggregation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16041",
        "summary": "The issue reports a KeyError when rendering a template that uses a formset's empty_form, if 'empty_permitted' is explicitly set in form_kwargs.",
        "category": "Bug",
        "tags": [
            "Formset",
            "Rendering",
            "empty_form",
            "form_kwargs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16046",
        "summary": "The issue reports a bug in numberformat.py. When a number field that's null is encountered while formatting for the admin list_display, it causes an IndexError.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "numberformat",
            "IndexError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16053",
        "summary": "The issue reports that the string representation of ContentType and Permission models mixes English with other languages, resulting in strings that look odd.",
        "category": "Bug",
        "tags": [
            "Models",
            "Localization",
            "ContentType",
            "Permission"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16067",
        "summary": "The issue reports that DecimalValidator fails to validate 0 in scientific notation (0E+1 or 0E+2). This behavior was introduced in Django 2.0.13.",
        "category": "Bug",
        "tags": [
            "Model Validation",
            "DecimalValidator",
            "Scientific Notation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15987",
        "summary": "The issue is about the duplicate check in loaddata not detecting duplicates when FIXTURE_DIRS contains Path instances.",
        "category": "Bug",
        "tags": [
            "Database",
            "Path",
            "Loaddata",
            "Duplicates"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15993",
        "summary": "The issue is about a RenameModel operation that already has db_table defined. It should be a noop, but in Postgres, it drops and recreates foreign key constraints, and in sqlite it recreates the table.",
        "category": "Bug",
        "tags": [
            "Database",
            "RenameModel",
            "db_table",
            "Postgres",
            "SQLite"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15995",
        "summary": "The issue is about Django requiring an instance pk to instantiate a related manager. The user suggests that this check is too aggressive and should let the __init__ succeed even if the instance has no pk.",
        "category": "Bug",
        "tags": [
            "Database",
            "Related Manager",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-15996",
        "summary": "The issue is about the lack of support for serialization of combination of Enum flags. The EnumSerializer aims to work with the .name of the item, but if there is no single item for the given value, then there is no such name.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "Enum Flags"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16002",
        "summary": "The issue is about the ability to store 'NaN' in DecimalField but not being able to retrieve it. The value 'NaN' skips the validation in DecimalField.to_python, because it is not None, and is not instance of float.",
        "category": "Bug",
        "tags": [
            "Database",
            "DecimalField",
            "NaN"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16027",
        "summary": "The issue is about the timesince function returning wrong results for 11 months + several weeks. The user suggests that the problem is because each month is considered as 30 days, so 11 months are 330 days, but 11 months are about 334 days actually.",
        "category": "Bug",
        "tags": [
            "Time",
            "timesince",
            "Date"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16070",
        "summary": "The issue is about the QuerySet.order_by() function in Django. It silently skips non-existing fields on related fields with Meta.ordering, which is undesirable. The user expects an error to be thrown when a non-existing field is used in the order_by function.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Models",
            "Ordering"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16072",
        "summary": "The issue is about the update_or_create function in Django. The user suggests that this function should only update the fields in default on update, not all fields. This could potentially improve efficiency and reduce unnecessary database operations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Update",
            "Efficiency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16076",
        "summary": "The issue is about the inability to register lookups on relation fields in Django. The user is trying to perform a lookup on a ForeignKey field with a specific condition but encounters an error. The user suggests that Django should support registering lookups on relation fields.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Lookups",
            "ForeignKey"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16082",
        "summary": "The issue is about the MOD operator in Django. When combining numeric expressions of different types (Decimal and Integer) with the MOD operator, Django doesn't resolve the result to a Decimal type, unlike other mathematical operators.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Numeric Expressions",
            "MOD Operator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16092",
        "summary": "The issue is about adding a Field.db_default for defining database defaults in Django. The user suggests applying a specific diff to django/core/management.py to achieve this.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "Fields",
            "Defaults"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16100",
        "summary": "The issue is about the lack of transaction handling in the changelist_view in Django admin. The user suggests that since the view may change data in the database, it should be wrapped in a transaction to prevent unexpected states in case of errors.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Database",
            "Transaction Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16111",
        "summary": "The issue is about adding support for microseconds to the Now() function on MySQL and SQLite databases in Django.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "MySQL",
            "SQLite",
            "Time"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16116",
        "summary": "The issue is about the inconsistency in the behavior of the --check flag in the makemigrations command compared to other commands like migrate and optimizemigration.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Command Line"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16117",
        "summary": "The issue is about Django not detecting a newly generated migration file due to the name of the file. The name contains several dots, which prevents Django's migrate/showmigrations commands from finding the file.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "File Naming",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16120",
        "summary": "The issue is about the migrate --check command in Django emitting signals even if the database is up-to-date, which can cause confusion.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Signals"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16136",
        "summary": "The issue is about an error that occurs when a GET request is made to a View subclass that only has an async 'post' method. The error message states that the HttpResponseNotAllowed object can't be used in an 'await' expression.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Async",
            "Views"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16139",
        "summary": "The issue is about a broken link to the PasswordResetForm when accessing the UserAdmin via another model's Admin that has a reference to User with to_field set. This results in a 404 error.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "URL Validation",
            "User Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16255",
        "summary": "The issue is about a ValueError that occurs when a sitemap contains no items but supports returning lastmod for an item. The error is due to the max() function being called on an empty sequence. A potential solution is provided in the issue description.",
        "category": "Bug",
        "tags": [
            "Sitemap",
            "ValueError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16256",
        "summary": "The issue is about the async-compatible interface added to QuerySet which unintentionally added async acreate(), aget_or_create(), and aupdate_or_create() methods to related managers. These methods do not call create(), get_or_create(), and update_or_create() respectively from a related manager but from the QuerySet. A solution is proposed in the issue description.",
        "category": "Bug",
        "tags": [
            "Async",
            "QuerySet",
            "Related Managers"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16260",
        "summary": "The issue is about the model.refresh_from_db() function not clearing cached generic foreign keys. This leads to subtle bugs like non-transitive equalities in tests. A workaround is provided in the issue description.",
        "category": "Bug",
        "tags": [
            "Model",
            "Refresh",
            "Cache",
            "Generic Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16263",
        "summary": "The issue is about the queryset.count() function including unnecessary annotations in the SQL statement it produces. The issue suggests that Django could be more intelligent about what annotations to include in the query produced by queryset.count().",
        "category": "Feature Request",
        "tags": [
            "QuerySet",
            "Count",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16281",
        "summary": "The issue is about a migration that changes a ManyToManyField target to 'self' not working correctly. The issue provides steps to reproduce the error and the error message received.",
        "category": "Bug",
        "tags": [
            "Migration",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16302",
        "summary": "The issue is about the inability to define a CharField with unlimited length. The issue suggests that CharField should allow max_length=None, which intuitively means there is no maximum length. A potential solution is provided in the issue description.",
        "category": "Feature Request",
        "tags": [
            "Model",
            "CharField",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16142",
        "summary": "The issue is about the get_language_from_request function in Django. The user suggests that this function should not fall back to the default language set in settings.LANGUAGE_CODE, but should return None if no language is found in the request. This would allow middleware to handle the fallback to the default language.",
        "category": "Bug",
        "tags": [
            "Middleware",
            "Language",
            "Request Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16143",
        "summary": "The user is having difficulty tracking down the cause of a TransactionManagementError. The error message does not provide enough information about why the transaction needs to be rolled back. The user suggests that Django should keep track of why a rollback is needed and provide this information in the error message.",
        "category": "Bug",
        "tags": [
            "Database",
            "Transactions",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16145",
        "summary": "The user reports an inconsistency between the Django tutorial and the actual output of the runserver command. When running the server with '0:8000', the output link is 'http://0:8000/', which is not usable in a browser. The user suggests that the output should be 'http://0.0.0.0:8000/' to match the tutorial and be usable.",
        "category": "Bug",
        "tags": [
            "Server",
            "Command Line",
            "Documentation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16208",
        "summary": "The user is debugging database calls and notices that while the BEGIN SQL calls are logged, there is no log for when a transaction is committed or rolled back. The user suggests that Django should also log these events.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Logging",
            "Transactions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16229",
        "summary": "The user reports a problem with ModelForm fields with callable defaults. When creating an object via the admin, if an inline contains an ArrayField in error, the validation is bypassed if the form is submitted a second time without modification. The user suggests forcing show_hidden_initial=False on the field in the form init as a fix.",
        "category": "Bug",
        "tags": [
            "Admin",
            "ModelForm",
            "Validation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16254",
        "summary": "The user reports a regression in Django 4.1. When adding a ManyToManyField to a table on SQLite, the table is rebuilt, which was not the case in Django 4.0. The user suggests that this is unnecessary and could be fixed by reintroducing the special-case code for implicit M2M tables that was removed in a previous commit.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16306",
        "summary": "The issue reports that BaseForm.__getitem__() in Django does unnecessary work in the 'happy path'. It suggests that the function could return self._bound_fields_cache[name] at the beginning and handle KeyError, instead of accessing self.fields and checking for the presence of name in self._bound_fields_cache each time.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Performance"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16311",
        "summary": "The issue suggests implementing a mitigation for the BREACH attack that doesn't depend on masking specific tokens or injecting data into HTML. It proposes adding randomness to the compressed response by injecting random bytes in the gzip filename field of the gzip stream.",
        "category": "Feature Request",
        "tags": [
            "Security",
            "Compression"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16315",
        "summary": "The issue reports that QuerySet.bulk_create() crashes when using mixed case columns in unique_fields/update_fields. The problem arises when the 'ON CONFLICT' SQL code uses the field name and not the db_column, leading to a syntax error.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16317",
        "summary": "The issue reports that QuerySet.bulk_create() crashes when 'pk' is used in unique_fields. The error message indicates that the column 'pk' does not exist.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16322",
        "summary": "The issue reports that Django produces an incorrect query when the same keyword appears in both aggregate() and annotate(). The problem was initially unnoticed on SQLite but caused a crash on MySQL due to an 'Unknown column' error.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "SQL",
            "SQLite",
            "MySQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16333",
        "summary": "The issue reports that UserCreationForm does not save data from ManyToMany form fields when used with a custom User model. The problem is that UserCreationForm.save(commit=True) does not call self.save_m2m().",
        "category": "Bug",
        "tags": [
            "Forms",
            "User Model",
            "ManyToManyField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16408",
        "summary": "The issue reports a problem with multi-level FilteredRelation combined with select_related() setting the wrong related object. The test case provided fails, indicating a potential bug in Django's ORM.",
        "category": "Bug",
        "tags": [
            "ORM",
            "Database",
            "Models",
            "FilteredRelation",
            "select_related"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16411",
        "summary": "The issue suggests a feature request for ManifestStaticFilesStorage to expose a 'hash' of the manifest file. This would allow Single Page Applications (SPAs) to perform a full reload if the header changes.",
        "category": "Feature Request",
        "tags": [
            "ManifestStaticFilesStorage",
            "Hash",
            "SPAs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16429",
        "summary": "The issue reports a TypeError raised by the timesince() function when the USE_TZ setting is set to True and the datetime object is one month or more in the past. The issue suggests a potential fix.",
        "category": "Bug",
        "tags": [
            "timesince",
            "TypeError",
            "USE_TZ",
            "Timezone"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16454",
        "summary": "The issue reports that Django management command subparsers do not retain error formatting. The issue suggests a potential fix to ensure that the subparser action copies the relevant arguments through to constructed subparsers.",
        "category": "Bug",
        "tags": [
            "Management Commands",
            "Subparsers",
            "Error Formatting"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16485",
        "summary": "The issue reports a crash in the floatformat() function when it is called with '0.00'. The function throws a ValueError.",
        "category": "Bug",
        "tags": [
            "floatformat",
            "ValueError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16491",
        "summary": "The issue reports that Exists annotations can return non-boolean results (i.e., None) if used with an empty QuerySet. The issue suggests that this behavior is inconsistent with the definition of Exists, which has an output_field of BooleanField.",
        "category": "Bug",
        "tags": [
            "Exists",
            "Annotations",
            "QuerySet",
            "BooleanField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16343",
        "summary": "The issue is about a vulnerability caused by an inaccurate instantiation of django.core.signing.Signer. The developer intended to use the user's email address as the salt for the Signing instance but instead caused it to be used as the key. The proposed solution is to change the signature of Signer.__init__ to force the developer to name the parameters.",
        "category": "Bug",
        "tags": [
            "Security",
            "Signer",
            "Key",
            "Salt"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16366",
        "summary": "The issue suggests dropping support for SQLite versions less than 3.21.0. The reason is that SQLite 3.15+ supports functions in partial indexes and SQLite 3.20+ can defer constraint checks and supports PRAGMA foreign key checks. The versions of SQLite shipped with Ubuntu Xenial, Debian Buster, and Python 3.7 are all above 3.21.0.",
        "category": "Feature Request",
        "tags": [
            "SQLite",
            "Database",
            "Support"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16369",
        "summary": "The issue is about the current implementation of Sitemap in Django. If i18n is used, a cartesian product between some items and some languages is displayed. There is no way to use the provided i18n automation if we want to display some items depending on the language.",
        "category": "Feature Request",
        "tags": [
            "Sitemap",
            "i18n",
            "Language"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16379",
        "summary": "The issue is about a race condition in Django's FileBasedCache. Between the exists() check and open(), it's possible for the file to be deleted. If many threads race to read an expired cache at once, it's not that unlikely to hit this window.",
        "category": "Bug",
        "tags": [
            "FileBasedCache",
            "Race Condition",
            "Concurrency"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16398",
        "summary": "The issue is about the QuerySet.select_related() function in Django. When used with multiple filtered relations to the OneToOneField, it sets the last one. The proposed solution is to use partial, just like the remote_setter.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "select_related",
            "OneToOneField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16400",
        "summary": "The issue is about the migrate management command in Django. When invoked with a database parameter, the migration runs successfully. However, there seems to be a DB read request that runs after the migration. This call does not respect the db param and invokes the db router.",
        "category": "Bug",
        "tags": [
            "Migrate",
            "Database",
            "DB Router"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16493",
        "summary": "The issue is about the storage argument on a FileField. If it is set to a callable that returns default_storage, it is omitted from the deconstructed form of the field, rather than being included as a reference to the callable as expected. This causes randomly generated migrations that alternately includes or omits storage on the FileField definition.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "FileField",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16501",
        "summary": "The issue is about the validation of UniqueConstraint with ordered expressions. When a model with a UniqueConstraint is added and an instance of the model is created in the admin, it results in a stack trace error. This happens on both Postgres and sqlite backends.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "UniqueConstraint",
            "Admin Console"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16502",
        "summary": "The issue is about the response bodies returned for HTTP HEAD requests by runserver. According to RFC 2616, section 4.3, response bodies must not be returned for HEAD requests. However, runserver does not strip the body, making the responses non-compliant with the spec.",
        "category": "Bug",
        "tags": [
            "HTTP",
            "Runserver",
            "HEAD Requests"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16511",
        "summary": "The issue is a feature request to extend update_or_create to support specifying a different set of defaults for the create operation. This would be useful in cases where different fields need to be set depending on whether a record is being created or updated.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Models",
            "update_or_create"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16514",
        "summary": "The issue is about the logging of changes on models in AdminSite. Currently, all registered sites show all entries of LogEntry, which can be confusing for users who see log entries for models they can't access. The request is to filter LogEntries by registered models.",
        "category": "Feature Request",
        "tags": [
            "Admin Console",
            "Logging",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16517",
        "summary": "The issue is about the handling of mixed-case views/templates names. When a class-based view is documented with a mixed-case name, clicking on the link in the docs results in a 404 error.",
        "category": "Bug",
        "tags": [
            "Views",
            "Templates",
            "Admin Docs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16527",
        "summary": "The issue is about the 'show_save_as_new' function in the Django admin. The user suggests adding an additional verification for 'has_add_permission' because 'save_as_new' is an add modification.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Permissions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16532",
        "summary": "The issue is about a failure in RenameModel migration when there are duplicate model names in a Many-to-Many (M2M) relationship. The error occurs when the table is created for the M2M relationship and the automatic field names are 'from_incident_id' and 'to_incident_id' since models have the same names.",
        "category": "Bug",
        "tags": [
            "Database",
            "Model Validation",
            "Migration"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16560",
        "summary": "The issue is a feature request to customize the code attribute of ValidationError raised by BaseConstraint.validate. The user suggests adding a new violation_error_message parameter to BaseConstraint to allow easy addition.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16569",
        "summary": "The issue is about the failure of Formsets' add_fields() method in some circumstances if the argument index is None. The error occurs when a FormSet has the attributes self.can_delete == True and self.can_delete_extra == False, and the add_fields() method is called on that FormSet.",
        "category": "Bug",
        "tags": [
            "Formsets",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16578",
        "summary": "The issue is a suggestion to change the signature of BaseConstraint to use keyword-only arguments as a separate cleanup. The user notes that name and violation_error_message are already keyword-only in all the BaseConstraint subclasses in the Django code base.",
        "category": "Feature Request",
        "tags": [
            "Code Refactoring"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16588",
        "summary": "The issue is about the crash of floatformat() on '0.0000'. The user reports that the current Django code (both 4.2b1 and latest git) crash on using the floatformat template filter with 0 values.",
        "category": "Bug",
        "tags": [
            "Template Filter",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16595",
        "summary": "The issue reports that the migration optimizer does not reduce multiple AlterField operations. If the AddField model is separated from the AlterField, none of the AlterField are reduced. The user is asking if this behavior is intended or if it could be documented.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migration",
            "Model"
        ]
    },
    {
        "instance_id": "django__django-16597",
        "summary": "The issue reports that when a WINDOW expression is referred to in a subquery, the query compiler fails with a ValueError. The user suspects that this is due to self.connection not being passed on to inner_query.get_compiler.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query Compilation",
            "Subquery"
        ]
    },
    {
        "instance_id": "django__django-16599",
        "summary": "The issue reports that querying with an integer larger than SQLite supports results in an OverflowError. The user is asking if this behavior is accepted or if there is a maximum length.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "Query"
        ]
    },
    {
        "instance_id": "django__django-16600",
        "summary": "The issue reports a regression where aggregate queries are rejected by the database due to the aggregated field being added to the GROUP BY clause. The error only occurs on the second evaluation of the query.",
        "category": "Bug",
        "tags": [
            "Database",
            "Query",
            "Aggregation"
        ]
    },
    {
        "instance_id": "django__django-16603",
        "summary": "The issue reports that the ASGI http.disconnect message is not handled correctly on requests that include a body. The user suggests that to handle this correctly, something like Channel's await_many_dispatch() might be needed to keep receiving from the input queue while dispatching the request.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "HTTP",
            "Request Handling"
        ]
    },
    {
        "instance_id": "django__django-16612",
        "summary": "The issue reports that the ability to redirect with settings.APPEND_SLASH = True when there are query strings was broken with the introduction of AdminSite.catch_all_view(). The user suggests that the redirect in question does not include the query strings.",
        "category": "Bug",
        "tags": [
            "AdminSite",
            "Redirect",
            "Query String"
        ]
    },
    {
        "instance_id": "django__django-16614",
        "summary": "The issue is about the default scheme for URLs in django.forms.fields.URLField.to_python. Currently, it assumes 'http' as the default scheme for URLs that do not specify a scheme. The user suggests that 'https' should be the default scheme as it is safer.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "Forms"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16629",
        "summary": "The user proposes a feature addition to how Choices are handled when used on model fields. Currently, Field.choices only accepts iterables. The user suggests that the field should also accept the Choice class directly and deal with the variation internally.",
        "category": "Feature Request",
        "tags": [
            "Model Validation",
            "Choices"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16631",
        "summary": "The user reports an issue with SECRET_KEY_FALLBACKS not being used for sessions. After rotating the secret key and adding the old one to SECRET_KEY_FALLBACKS, all users on the site were logged out. The user suggests that the documentation for SECRET_KEY_FALLBACKS may be incorrect.",
        "category": "Bug",
        "tags": [
            "Sessions",
            "Security"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16635",
        "summary": "The user reports a bug where migrations try to add a constraint before adding a foreign key, resulting in a FieldDoesNotExist error. The user provides steps to reproduce the bug.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16642",
        "summary": "The user reports an issue with FileResponse setting the content type as text/html for files with 'Z' or 'br' extensions. The user provides examples to illustrate the issue.",
        "category": "Bug",
        "tags": [
            "File Handling",
            "Mime Type"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16649",
        "summary": "The user reports a potential issue with the positioning of columns added with annotate() in querysets. The positioning is not controllable with values() and can disrupt union() unless the ordering is done in a certain way to accommodate it. The user suggests that this should be mentioned in the documentation.",
        "category": "Documentation",
        "tags": [
            "Database",
            "Querysets",
            "Annotation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16657",
        "summary": "The issue is about an error that occurs when executing QuerySet.update() on querysets in descending order by annotations. The error message indicates that the keyword 'message_length' cannot be resolved into a field.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Database",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16661",
        "summary": "The issue is about the ModelAdmin.lookup_allowed() function incorrectly raising a DisallowedModelAdminLookup error when a foreign key is used as a primary key. The issue seems to be caused by the admin thinking that having a foreign key field as a primary key is the same as concrete inheritance.",
        "category": "Bug",
        "tags": [
            "ModelAdmin",
            "Database",
            "Foreign Key",
            "Primary Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16662",
        "summary": "The issue is about the ordering of imports in migration files violating the Django coding style and isort defaults. The issue suggests that migration files should be generated with imports sorted by module, independent of import style.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Coding Style",
            "Imports"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16667",
        "summary": "The issue is about the SelectDateWidget crashing with an OverflowError when large integers (larger than sys.maxsize) are supplied to the date's constructor. The issue happens as part of the validation logic run in form.is_valid.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation",
            "OverflowError"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16670",
        "summary": "The issue is about the ASGIStaticFilesHandler raising a warning about the incorrect iterator type being used. The issue suggests that the fix is to have ASGIStaticFilesHandler adapt the iterator in the same way StreamingHttpResponse does.",
        "category": "Bug",
        "tags": [
            "ASGI",
            "Static Files",
            "Warning"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16686",
        "summary": "The issue is about the values() function not mentioning annotations as valid choices when resolving an error. The error message does not mention annotation as a valid choice.",
        "category": "Bug",
        "tags": [
            "Database",
            "Annotations",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16693",
        "summary": "The issue is about improving the error message for incorrect context processors in Django. When a template context processor returns the wrong type, the error message is not clear. The user suggests handling this with a try/except block to provide a more informative error message.",
        "category": "Feature Request",
        "tags": [
            "Error Handling",
            "Template Context Processor"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16707",
        "summary": "The issue is about the inability to print the input formats for django.forms.fields.DateField using __str__, while __repr__ works. The user expects the string representation to be available instead of failing with an internal Python error.",
        "category": "Bug",
        "tags": [
            "Forms",
            "DateField",
            "String Representation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16735",
        "summary": "The issue is about i18n_patterns() not respecting prefix_default_language=False. After upgrading Django from 4.1.7 to 4.2.0, navigating to /admin/ causes a HTTP 302 and only /en/admin/ works, even though prefix_default_language=False is explicitly defined.",
        "category": "Bug",
        "tags": [
            "URLs",
            "i18n_patterns",
            "Language Prefix"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16745",
        "summary": "The issue is about StepValueValidator not taking into account min_value. The user points out that StepValueValidator always uses 0 as the base, which conflicts with client-side validation and prevents the user from submitting any value for the input.",
        "category": "Bug",
        "tags": [
            "Forms",
            "Validation",
            "StepValueValidator"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16746",
        "summary": "The issue is about the inability to change error messages raised by Paginator.validate_number method. The user suggests adding the ability to customize and internationalize these error messages.",
        "category": "Feature Request",
        "tags": [
            "Error Messages",
            "Paginator",
            "Internationalization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16749",
        "summary": "The issue is about ASGIRequest not respecting settings.FORCE_SCRIPT_NAME. The user points out that the login form action URL is incorrect when FORCE_SCRIPT_NAME is set.",
        "category": "Bug",
        "tags": [
            "ASGIRequest",
            "URLs",
            "FORCE_SCRIPT_NAME"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16750",
        "summary": "The issue is about a ValueError that is raised when annotating with Chr. The user suggests setting output_field = CharField() in Chr to prevent this.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Annotations"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16757",
        "summary": "The issue reports that the admin site does not report a system check error when a reversed foreign key is used in 'list_display' values. The user suggests that using a reversed foreign key should also result in a system check error instead of a 500 response.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Database",
            "Foreign Key"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16759",
        "summary": "The issue is about the 'lookup_allowed' function not considering dynamic 'list_filter'. The user suggests changing the code to iterate over 'get_list_filter(request)' instead of 'self.list_filter'.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "ModelAdmin",
            "list_filter"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16786",
        "summary": "The issue reports that when using the Coalesce function as part of the condition of a FilteredRelation, the query fails with an 'Unknown column' error if any of the fields referenced by Coalesce requires a JOIN. The user suspects an underlying issue with how JOINs are detected and added to a query when there are nested field references.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQL",
            "JOIN",
            "FilteredRelation"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16801",
        "summary": "The issue is about the ImageField adding a post_init signal handler to the model unnecessarily, causing performance issues. The user suggests removing the post_init signal if width_field and height_field are not set.",
        "category": "Bug",
        "tags": [
            "Performance",
            "ImageField",
            "post_init signal"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16802",
        "summary": "The issue reports that the 'random' template filter crashes on an empty list, while the 'first' and 'last' filters do not raise anything and just return an empty page. The user suggests that the behavior of all three filters should be the same when the list is empty.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "List"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16858",
        "summary": "After upgrading from Django 4.1 to 4.2, the `get_prep_value` method for a custom JSONField is no longer called. The issue suggests either restoring the call to `get_prep_value` for JSONField or documenting this change as an exception.",
        "category": "Bug",
        "tags": [
            "JSONField",
            "Database",
            "Upgrade",
            "get_prep_value"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16865",
        "summary": "The `makemigrations --update` command does not respect the `--name` option. If a migration is created with a custom name, running `--update` changes the name to the autogenerated one. The issue suggests either updating the documentation or correcting this behavior.",
        "category": "Bug",
        "tags": [
            "Migrations",
            "Command",
            "makemigrations",
            "Update"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16873",
        "summary": "The `join` template filter forcibly escapes the joining string even when `autoescape` is set to `off`. The issue suggests that this is not the expected behavior and may be a bug.",
        "category": "Bug",
        "tags": [
            "Template",
            "Filter",
            "join",
            "autoescape"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16877",
        "summary": "The issue proposes a new template filter `escapeseq` which would escape each item of a list before applying an operation like `join`. This would be useful in a context where `autoescape` is off.",
        "category": "Feature Request",
        "tags": [
            "Template",
            "Filter",
            "escapeseq",
            "autoescape"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16879",
        "summary": "A QuerySet that was working on Django 4.1 and prior versions stopped working on 4.2. The issue involves a Case-When aggregation over aggregated fields. The issue suggests that this is a bug introduced in Django 4.2.",
        "category": "Bug",
        "tags": [
            "QuerySet",
            "Aggregation",
            "Case-When",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16883",
        "summary": "The issue suggests allowing users to override the table name to model conversion logic when implementing a custom `inspectdb` command. This would be useful when table names are already in PascalCase.",
        "category": "Feature Request",
        "tags": [
            "inspectdb",
            "Command",
            "Model",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16810",
        "summary": "The issue is about a bug in Django's URL translation feature. When the default language is not English and prefix_default_language is set to False, the system raises a 404 error for the default unprefixed pages. The problem seems to be in the get_language_from_path function in django/utils/translation/trans_real.py.",
        "category": "Bug",
        "tags": [
            "URL Translation",
            "HTTP 404",
            "Language Code"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16816",
        "summary": "The issue reports a bug in Django's admin interface. When a non-existent field is added to the list_display in the admin interface, it does not raise an error E108 as expected. Instead, it results in an internal server error.",
        "category": "Bug",
        "tags": [
            "Admin Interface",
            "Error Handling",
            "Models"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16819",
        "summary": "The issue is a feature request to optimize Django's migration operations by reducing the number of AddIndex/RemoveIndex operations.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "Migration",
            "Optimization"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16820",
        "summary": "The issue is about a bug in Django's migration squashing feature. When squashing migrations with Meta.index_together -> Meta.indexes transition, it should remove deprecation warnings. However, it does not, and the warnings can only be removed by rewriting migrations.",
        "category": "Bug",
        "tags": [
            "Migration",
            "Deprecation Warnings",
            "Squashing"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16824",
        "summary": "The issue reports a bug in Django's dbshell management command. If the database name is a PosixPath, exiting dbshell using Control - d sometimes results in an exception.",
        "category": "Bug",
        "tags": [
            "Database",
            "dbshell",
            "PosixPath"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16830",
        "summary": "The issue is about a bug in Django's model inheritance feature. When saving a model with non-abstract model inheritance and issuing own primary keys, the force_insert flag is not passed when saving parents on inherited models. This results in an extra UPDATE statement that precedes the INSERT.",
        "category": "Bug",
        "tags": [
            "Models",
            "Inheritance",
            "Database"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16920",
        "summary": "The issue is about the lack of association between field errors and the field, and between the help text and the field, for screen reader users. The proposed solution is to use aria-describedby.",
        "category": "Bug",
        "tags": [
            "Accessibility",
            "Form Rendering",
            "Screen Reader",
            "HTML"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16938",
        "summary": "The issue is about the failure of serialization of many-to-many relations with a custom manager using select_related. The error is raised due to performance optimization.",
        "category": "Bug",
        "tags": [
            "Serialization",
            "Database",
            "Many-to-Many Relation",
            "Custom Manager"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16948",
        "summary": "The issue is about the misuse of format_html to format the HTML before calling it, which acts like mark_safe, allowing data through without escaping. The proposal is to deprecate calls to format_html that don\u2019t pass args or kwargs.",
        "category": "Feature Request",
        "tags": [
            "HTML",
            "Security",
            "Data Escaping"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16950",
        "summary": "The issue is about the Django Admin not using the default value of UUIDField when using Inlines. The value of 'id' in the Thing model is being set to null.",
        "category": "Bug",
        "tags": [
            "Django Admin",
            "Inlines",
            "UUIDField",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16952",
        "summary": "The issue is about the crash when creating objects with more complicated multi-table inheritance.",
        "category": "Bug",
        "tags": [
            "Multi-Table Inheritance",
            "Object Creation",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16983",
        "summary": "The issue is about the lack of system check for filter_horizontal/filter_vertical on ManyToManyFields with intermediary models. The proposal is to add a system check for this.",
        "category": "Feature Request",
        "tags": [
            "System Check",
            "ManyToManyField",
            "Intermediary Models",
            "Admin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17029",
        "summary": "The issue reports that apps.clear_cache() does not clear get_swappable_settings_name cache. The user suggests adding a line of code to clear this cache.",
        "category": "Bug",
        "tags": [
            "Cache",
            "App Registry"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17045",
        "summary": "The issue suggests adding a system check for unmatched URL paths' angle brackets. Currently, unmatched angle brackets are silently ignored, leading to potential debugging difficulties.",
        "category": "Feature Request",
        "tags": [
            "URL Validation",
            "System Check"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17046",
        "summary": "The issue reports a crash in the admin page when deleting objects after searching related many to many field. The error seems to be related to calling delete() after .distinct().",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Database",
            "Many-to-Many Field"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17051",
        "summary": "The issue reports that primary keys are not set in the returned queryset when using bulk_create with a conflict handling flag turned on. The user suggests modifying the code to return IDs in the case of update_conflicts.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "QuerySet",
            "bulk_create"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17058",
        "summary": "The issue suggests adding support for NULLS [NOT] DISTINCT to UniqueConstraint. This feature is present in the 2023 SQL standard and implemented in PostgreSQL 15.",
        "category": "Feature Request",
        "tags": [
            "Database",
            "UniqueConstraint",
            "SQL"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17065",
        "summary": "The issue reports that BoundField.as_widget() ignores aria-describedby that is passed in the attrs argument. The user suggests modifying the code to check for aria-describedby in attrs first.",
        "category": "Bug",
        "tags": [
            "Forms API",
            "Accessibility",
            "BoundField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16888",
        "summary": "The issue is about a change in behavior in Django 4.2 when querying for decimals larger than max_digits on SQLite. Previously, it would return ObjectNotFound, but now it throws a decimal.InvalidOperation error. The user suggests that the backend should either accept larger values and always return 'not found', or the error should be more descriptive.",
        "category": "Bug",
        "tags": [
            "Database",
            "SQLite",
            "DecimalField",
            "Error Handling"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16899",
        "summary": "The issue is about the error message for readonly_fields in ModelAdmin. The current error message indicates the index of the value at fault but does not include the field's name. The user suggests including the field name in the readonly_fields checks to ease understanding of the error.",
        "category": "Bug",
        "tags": [
            "Admin Console",
            "Error Message",
            "ModelAdmin"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16901",
        "summary": "The issue is about incorrect SQL generation for Q(\u2026) ^ Q(\u2026) ^ Q(\u2026) with more than 2 arguments on databases that don\u2019t natively support XOR, such as PostgreSQL. The correct interpretation is that a ^ b ^ c is true when an odd number of the arguments are true, but Django\u2019s fallback interpretation is that a ^ b ^ c is true when exactly one argument is true.",
        "category": "Bug",
        "tags": [
            "Database",
            "PostgreSQL",
            "SQL Generation",
            "Q Objects"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16902",
        "summary": "The issue is about the RIGHT database function on Oracle returning the whole string instead of an empty string when the given length is 0. The user suggests that it should return the empty string as PostgreSQL does, or at least this behavior should be documented.",
        "category": "Bug",
        "tags": [
            "Database",
            "Oracle",
            "SQLite",
            "RIGHT Function"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16903",
        "summary": "The issue is about a diamond shape inheritance causing a duplicated PK error when creating an object, if the primary key field has a default. The user suggests a change in the _save_table method in db/models/base.py to fix this issue.",
        "category": "Bug",
        "tags": [
            "Database",
            "Inheritance",
            "Primary Key",
            "Model"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-16910",
        "summary": "The issue is about the only() function not working with select_related() on a query using the reverse lookup for a OneToOne relation in Django 4.2. All the fields from the related model are still included in the generated SQL.",
        "category": "Bug",
        "tags": [
            "Database",
            "QuerySet",
            "select_related",
            "only",
            "OneToOneField"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-17066",
        "summary": "The issue is about the non-deterministic order of migration serializer for sets. The user suggests adding a serializer specifically for unordered sequences to ensure stable output.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Migration",
            "Serializer",
            "Database"
        ]
    },
    {
        "instance_id": "django__django-17084",
        "summary": "The user is unable to use aggregate over window functions after upgrading to Django 4.2. The issue is causing an exception when executing ORM queries.",
        "category": "Bug",
        "error": "",
        "tags": [
            "ORM",
            "Database",
            "Aggregation",
            "Window Functions"
        ]
    },
    {
        "instance_id": "django__django-17087",
        "summary": "The issue is about the inability to use class methods from nested classes as Field.default. The migration contains a wrong value for the 'default' argument.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Models",
            "Migration",
            "Field Default"
        ]
    },
    {
        "instance_id": "django__django-5158",
        "summary": "The issue is about the error message raised when an unknown django-admin command is executed outside a Django project. The error message is misleading and does not fit with the real error.",
        "category": "Bug",
        "error": "",
        "tags": [
            "Admin Console",
            "Error Handling"
        ]
    },
    {
        "instance_id": "django__django-5470",
        "summary": "The issue is about the script prefix for django.core.urlresolvers not being set when called through manage.py. This causes problems when rendering views or reversing URLs from a manage.py command.",
        "category": "Bug",
        "error": "",
        "tags": [
            "URL Validation",
            "Script Prefix"
        ]
    },
    {
        "instance_id": "django__django-7188",
        "summary": "The issue is about the inability to use the auth machinery without having django.contrib.auth in INSTALLED_APPS. The user suggests that Django projects should be able to use the auth machinery without this requirement.",
        "category": "Feature Request",
        "error": "",
        "tags": [
            "Authentication",
            "Middleware",
            "INSTALLED_APPS"
        ]
    },
    {
        "instance_id": "django__django-9003",
        "summary": "The issue reports a non-deterministic crash in django.db.models.sql.Query.combine() when executing a complex query with many-to-many self-joins and ORs. The crash is associated with an assertion error and a circular reference in the change_map. The issue is complicated due to the complexity of the query and the non-deterministic nature of the crash.",
        "category": "Bug",
        "tags": [
            "Database",
            "Models",
            "Query",
            "Many-to-Many",
            "Self-Joins",
            "ORs"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9296",
        "summary": "The issue suggests implementing the __iter__ function in the Paginator object to iterate over all the pages, instead of using the page_range function. This would make the iteration more natural and logical in Python.",
        "category": "Feature Request",
        "tags": [
            "Paginator",
            "Iteration",
            "__iter__",
            "page_range"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9703",
        "summary": "The issue suggests an enhancement for the management command invocation to suggest commands for mistyped commands. This would save time for users who can't remember the full management command name but can remember a part of it.",
        "category": "Feature Request",
        "tags": [
            "Management Command",
            "Command Suggestion",
            "User Experience"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-9871",
        "summary": "The issue suggests reordering the management command arguments in the --help output to prioritize command-specific arguments. This would make the useful information specific to the command more visible to the user by placing it at the beginning of the output.",
        "category": "Feature Request",
        "tags": [
            "Management Command",
            "Command Arguments",
            "Help Output",
            "User Experience"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-7475",
        "summary": "The issue is about enhancing the manage.py diffsettings command to allow comparison with other settings modules, not just the default Django settings. This is useful for users who use a hierarchy of settings modules.",
        "category": "Feature Request",
        "tags": [
            "Settings",
            "Command Line",
            "manage.py"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-7530",
        "summary": "The issue reports a bug in the makemigrations command where router.allow_migrate() is incorrectly called for each app with all the models in the project, rather than for each app with the app's models. This causes problems for routers that pass invalid combinations for shards.",
        "category": "Bug",
        "tags": [
            "Database",
            "Migrations",
            "Models",
            "Router"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8119",
        "summary": "The issue is a feature request to allow expressions in .filter() calls. This would enable 3rd party apps to create query syntax extensions and unify the ORM experience.",
        "category": "Feature Request",
        "tags": [
            "ORM",
            "Filter",
            "Expressions"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8326",
        "summary": "The issue is a feature request to add a 'unified diff' output mode to the diffsettings management command. This is because most people are used to unified diffs as opposed to the current '###' formatting of diffsettings.",
        "category": "Feature Request",
        "tags": [
            "Command Line",
            "manage.py",
            "diffsettings"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8630",
        "summary": "The issue is a feature request to add a next_page attribute to LoginView, similar to the one in LogoutView. This would allow overriding of settings.LOGOUT_REDIRECT_URL.",
        "category": "Feature Request",
        "tags": [
            "LoginView",
            "LogoutView",
            "URL Redirect"
        ],
        "error": ""
    },
    {
        "instance_id": "django__django-8961",
        "summary": "The issue reports a problem with the program name for Django's command-line utility. The help command renders the program name incorrectly in some cases, and there are also issues with the manage.py option in the documentation.",
        "category": "Bug",
        "tags": [
            "Command Line",
            "Documentation",
            "manage.py"
        ],
        "error": ""
    }
]